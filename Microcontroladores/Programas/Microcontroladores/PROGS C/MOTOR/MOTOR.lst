

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Sat May 07 18:26:19 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,delta=2
     9                           	psect	text36,local,class=CODE,delta=2
    10                           	psect	text39,local,class=CODE,delta=2
    11                           	psect	pa_nodes,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  000A                     	;#
    14                           
    15                           	psect	config
    16  2007  E0D4               	dw	57556	;#
    17  2008  FFFF               	dw	65535	;#
    18                           
    19                           	psect	nvCOMMON
    20  0076                     __pnvCOMMON:	
    21  0076                     _RET:	
    22  0076                     	ds	1
    23  0077                     _ROT:	
    24  0077                     	ds	1
    25  0078                     _TEMP1:	
    26  0078                     	ds	1
    27  0079                     _TEMP2:	
    28  0079                     	ds	1
    29  007A                     _VEL:	
    30  007A                     	ds	1
    31  0005                     _PORTA	set	5
    32  0006                     _PORTB	set	6
    33  0085                     _TRISA	set	133
    34  0086                     _TRISB	set	134
    35  0087                     _TRISC	set	135
    36  0088                     _TRISD	set	136
    37  0089                     _TRISE	set	137
    38  0188                     _ANSEL	set	392
    39  0189                     _ANSELH	set	393
    40                           
    41                           	psect	cinit
    42  0723                     start_initialization:	
    43  0723                     end_of_initialization:	
    44                           ;End of C runtime variable initialization code
    45                           
    46  0723  0183               	clrf	3
    47  0724  120A  118A  2F65   	ljmp	_main	;jump to C main() function
    48                           
    49                           	psect	cstackCOMMON
    50  0070                     __pcstackCOMMON:	
    51  0070                     ?_derecha:	
    52  0070                     ?_izquierda:	
    53                           ; 0 bytes @ 0x0
    54                           
    55  0070                     ?_retardo:	
    56                           ; 0 bytes @ 0x0
    57                           
    58  0070                     ??_retardo:	
    59                           ; 0 bytes @ 0x0
    60                           
    61  0070                     ?_main:	
    62                           ; 0 bytes @ 0x0
    63                           
    64  0070                     retardo@retar:	
    65                           ; 0 bytes @ 0x0
    66                           
    67                           
    68                           ; 1 bytes @ 0x0
    69  0070                     	ds	1
    70  0071                     retardo@VA:	
    71                           
    72                           ; 1 bytes @ 0x1
    73  0071                     	ds	1
    74  0072                     retardo@VB:	
    75                           
    76                           ; 1 bytes @ 0x2
    77  0072                     	ds	1
    78  0073                     retardo@VC:	
    79                           
    80                           ; 1 bytes @ 0x3
    81  0073                     	ds	1
    82  0074                     ??_derecha:	
    83  0074                     ??_izquierda:	
    84                           ; 0 bytes @ 0x4
    85                           
    86  0074                     derecha@tm1:	
    87                           ; 0 bytes @ 0x4
    88                           
    89  0074                     izquierda@tm2:	
    90                           ; 1 bytes @ 0x4
    91                           
    92                           
    93                           ; 1 bytes @ 0x4
    94  0074                     	ds	1
    95  0075                     ??_main:	
    96                           
    97                           ; 0 bytes @ 0x5
    98  0075                     	ds	1
    99                           
   100                           	psect	maintext
   101  0765                     __pmaintext:	
   102 ;;Data sizes: Strings 0, constant 0, data 0, bss 0, persistent 5 stack 0
   103 ;;Auto spaces:   Size  Autos    Used
   104 ;; COMMON          14      6      11
   105 ;; BANK0           80      0       0
   106 ;; BANK1           80      0       0
   107 ;; BANK3           96      0       0
   108 ;; BANK2           96      0       0
   109 ;;
   110 ;; Pointer list with targets:
   111 ;;
   112 ;; Critical Paths under _main in COMMON
   113 ;;
   114 ;;   _main->_derecha
   115 ;;   _main->_izquierda
   116 ;;   _izquierda->_retardo
   117 ;;   _derecha->_retardo
   118 ;;
   119 ;; Critical Paths under _main in BANK0
   120 ;;
   121 ;;   None.
   122 ;;
   123 ;; Critical Paths under _main in BANK1
   124 ;;
   125 ;;   None.
   126 ;;
   127 ;; Critical Paths under _main in BANK3
   128 ;;
   129 ;;   None.
   130 ;;
   131 ;; Critical Paths under _main in BANK2
   132 ;;
   133 ;;   None.
   134 ;;
   135 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   136 ;;
   137 ;;
   138 ;;Call Graph Tables:
   139 ;;
   140 ;; ---------------------------------------------------------------------------------
   141 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   142 ;; ---------------------------------------------------------------------------------
   143 ;; (0) _main                                                 1     1      0     330
   144 ;;                                              5 COMMON     1     1      0
   145 ;;                            _derecha
   146 ;;                          _izquierda
   147 ;; ---------------------------------------------------------------------------------
   148 ;; (1) _izquierda                                            1     1      0     165
   149 ;;                                              4 COMMON     1     1      0
   150 ;;                            _retardo
   151 ;; ---------------------------------------------------------------------------------
   152 ;; (1) _derecha                                              1     1      0     165
   153 ;;                                              4 COMMON     1     1      0
   154 ;;                            _retardo
   155 ;; ---------------------------------------------------------------------------------
   156 ;; (2) _retardo                                              4     4      0     105
   157 ;;                                              0 COMMON     4     4      0
   158 ;; ---------------------------------------------------------------------------------
   159 ;; Estimated maximum stack depth 2
   160 ;; ---------------------------------------------------------------------------------
   161 ;; Call Graph Graphs:
   162 ;; _main (ROOT)
   163 ;;   _derecha
   164 ;;     _retardo
   165 ;;   _izquierda
   166 ;;     _retardo
   167 ;;
   168 ;; Address spaces:
   169 ;;Name               Size   Autos  Total    Cost      Usage
   170 ;;BITCOMMON            E      0       0       0        0.0%
   171 ;;EEDATA             100      0       0       0        0.0%
   172 ;;NULL                 0      0       0       0        0.0%
   173 ;;CODE                 0      0       0       0        0.0%
   174 ;;COMMON               E      6       B       1       78.6%
   175 ;;BITSFR0              0      0       0       1        0.0%
   176 ;;SFR0                 0      0       0       1        0.0%
   177 ;;BITSFR1              0      0       0       2        0.0%
   178 ;;SFR1                 0      0       0       2        0.0%
   179 ;;STACK                0      0       2       2        0.0%
   180 ;;ABS                  0      0       B       3        0.0%
   181 ;;BITBANK0            50      0       0       4        0.0%
   182 ;;BITSFR3              0      0       0       4        0.0%
   183 ;;SFR3                 0      0       0       4        0.0%
   184 ;;BANK0               50      0       0       5        0.0%
   185 ;;BITSFR2              0      0       0       5        0.0%
   186 ;;SFR2                 0      0       0       5        0.0%
   187 ;;BITBANK1            50      0       0       6        0.0%
   188 ;;BANK1               50      0       0       7        0.0%
   189 ;;BITBANK3            60      0       0       8        0.0%
   190 ;;BANK3               60      0       0       9        0.0%
   191 ;;BITBANK2            60      0       0      10        0.0%
   192 ;;BANK2               60      0       0      11        0.0%
   193 ;;DATA                 0      0       D      12        0.0%
   194                           
   195                           
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 21 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\MOTOR\MOTOR.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;		None
   203 ;; Return value:  Size  Location     Type
   204 ;;		None               void
   205 ;; Registers used:
   206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : 17F/0
   209 ;;		On exit  : 17F/0
   210 ;;		Unchanged: FFE80/0
   211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   212 ;;      Params:         0       0       0       0       0
   213 ;;      Locals:         0       0       0       0       0
   214 ;;      Temps:          1       0       0       0       0
   215 ;;      Totals:         1       0       0       0       0
   216 ;;Total ram usage:        1 bytes
   217 ;; Hardware stack levels required when called:    2
   218 ;; This function calls:
   219 ;;		_derecha
   220 ;;		_izquierda
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225  0765                     _main:	
   226                           
   227                           ;MOTOR.c: 22: ANSEL = 0x00;
   228                           
   229                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   230  0765  1683               	bsf	3,5	;RP0=1, select bank3
   231  0766  1703               	bsf	3,6	;RP1=1, select bank3
   232  0767  0188               	clrf	8	;volatile
   233                           
   234                           ;MOTOR.c: 23: ANSELH = 0x00;
   235  0768  0189               	clrf	9	;volatile
   236                           
   237                           ;MOTOR.c: 25: TRISA = 0x00;
   238  0769  1303               	bcf	3,6	;RP1=0, select bank1
   239  076A  0185               	clrf	5	;volatile
   240                           
   241                           ;MOTOR.c: 26: TRISB = 0xFF;
   242  076B  30FF               	movlw	255
   243  076C  0086               	movwf	6	;volatile
   244                           
   245                           ;MOTOR.c: 27: TRISC = 0xFF;
   246  076D  0087               	movwf	7	;volatile
   247                           
   248                           ;MOTOR.c: 28: TRISD = 0x00;
   249  076E  0188               	clrf	8	;volatile
   250                           
   251                           ;MOTOR.c: 29: TRISE = 0x03;
   252  076F  3003               	movlw	3
   253  0770  0089               	movwf	9	;volatile
   254  0771                     l2498:	
   255                           
   256                           ;MOTOR.c: 32: {
   257                           ;MOTOR.c: 34: TEMP1 = PORTB;
   258  0771  1283               	bcf	3,5	;RP0=0, select bank0
   259  0772  0806               	movf	6,w	;volatile
   260  0773  00F8               	movwf	_TEMP1
   261                           
   262                           ;MOTOR.c: 35: TEMP2 = PORTB;
   263  0774  0806               	movf	6,w	;volatile
   264  0775  00F9               	movwf	_TEMP2
   265                           
   266                           ;MOTOR.c: 37: VEL = TEMP1 >>4;
   267  0776  0E78               	swapf	_TEMP1,w
   268  0777  390F               	andlw	15
   269  0778  00FA               	movwf	_VEL
   270  0779  30C0               	movlw	192
   271                           
   272                           ;MOTOR.c: 39: TEMP2 = TEMP2<<6;
   273  077A  0EF9               	swapf	_TEMP2,f
   274  077B  0DF9               	rlf	_TEMP2,f
   275  077C  0DF9               	rlf	_TEMP2,f
   276  077D  05F9               	andwf	_TEMP2,f
   277                           
   278                           ;MOTOR.c: 40: ROT = TEMP2>>6;
   279  077E  0879               	movf	_TEMP2,w
   280  077F  00F5               	movwf	??_main
   281  0780  3006               	movlw	6
   282  0781                     u55:	
   283  0781  1003               	clrc
   284  0782  0CF5               	rrf	??_main,f
   285  0783  3EFF               	addlw	-1
   286  0784  1D03               	skipz
   287  0785  2F81               	goto	u55
   288  0786  0875               	movf	??_main,w
   289  0787  00F7               	movwf	_ROT
   290                           
   291                           ;MOTOR.c: 43: switch(VEL){
   292  0788  2FEF               	goto	l2550
   293  0789                     l1045:	
   294                           
   295                           ;MOTOR.c: 47: RET =0x01;
   296  0789  01F6               	clrf	_RET
   297  078A  0AF6               	incf	_RET,f
   298                           
   299                           ;MOTOR.c: 48: if(ROT == 0x01){
   300  078B  0B77               	decfsz	_ROT,w
   301  078C  2F94               	goto	l2512
   302                           
   303                           ;MOTOR.c: 49: derecha(RET);
   304  078D  3001               	movlw	1
   305  078E  120A  118A  273E   	fcall	_derecha
      +       120A  118A         
   306                           
   307                           ;MOTOR.c: 50: }else if(ROT == 0x02){
   308  0793  2F9E               	goto	l2516
   309  0794                     l2512:	
   310  0794  0877               	movf	_ROT,w
   311  0795  3A02               	xorlw	2
   312  0796  1D03               	skipz
   313  0797  2F9E               	goto	l2516
   314                           
   315                           ;MOTOR.c: 51: izquierda(RET);
   316  0798  3001               	movlw	1
   317  0799  120A  118A  2727   	fcall	_izquierda
      +       120A  118A         
   318  079E                     l2516:	
   319  079E  0B7A               	decfsz	_VEL,w
   320  079F  2F71               	goto	l2498
   321  07A0  2F89               	goto	l1045
   322  07A1                     l1053:	
   323                           
   324                           ;MOTOR.c: 58: RET =0x01;
   325  07A1  01F6               	clrf	_RET
   326  07A2  0AF6               	incf	_RET,f
   327                           
   328                           ;MOTOR.c: 59: if(ROT == 0x01){
   329  07A3  0B77               	decfsz	_ROT,w
   330  07A4  2FAC               	goto	l2522
   331                           
   332                           ;MOTOR.c: 60: derecha(RET);
   333  07A5  3001               	movlw	1
   334  07A6  120A  118A  273E   	fcall	_derecha
      +       120A  118A         
   335                           
   336                           ;MOTOR.c: 61: }else if(ROT == 0x02){
   337  07AB  2FB6               	goto	l2526
   338  07AC                     l2522:	
   339  07AC  0877               	movf	_ROT,w
   340  07AD  3A02               	xorlw	2
   341  07AE  1D03               	skipz
   342  07AF  2FB6               	goto	l2526
   343                           
   344                           ;MOTOR.c: 62: izquierda(RET);
   345  07B0  3001               	movlw	1
   346  07B1  120A  118A  2727   	fcall	_izquierda
      +       120A  118A         
   347  07B6                     l2526:	
   348  07B6  087A               	movf	_VEL,w
   349  07B7  3A02               	xorlw	2
   350  07B8  1D03               	btfss	3,2
   351  07B9  2F71               	goto	l2498
   352  07BA  2FA1               	goto	l1053
   353  07BB                     l1060:	
   354                           
   355                           ;MOTOR.c: 69: RET =0x01;
   356  07BB  01F6               	clrf	_RET
   357  07BC  0AF6               	incf	_RET,f
   358                           
   359                           ;MOTOR.c: 70: if(ROT == 0x01){
   360  07BD  0B77               	decfsz	_ROT,w
   361  07BE  2FC6               	goto	l2532
   362                           
   363                           ;MOTOR.c: 71: derecha(RET);
   364  07BF  3001               	movlw	1
   365  07C0  120A  118A  273E   	fcall	_derecha
      +       120A  118A         
   366                           
   367                           ;MOTOR.c: 72: }else if(ROT == 0x02){
   368  07C5  2FD0               	goto	l2536
   369  07C6                     l2532:	
   370  07C6  0877               	movf	_ROT,w
   371  07C7  3A02               	xorlw	2
   372  07C8  1D03               	skipz
   373  07C9  2FD0               	goto	l2536
   374                           
   375                           ;MOTOR.c: 73: izquierda(RET);
   376  07CA  3001               	movlw	1
   377  07CB  120A  118A  2727   	fcall	_izquierda
      +       120A  118A         
   378  07D0                     l2536:	
   379  07D0  087A               	movf	_VEL,w
   380  07D1  3A04               	xorlw	4
   381  07D2  1D03               	btfss	3,2
   382  07D3  2F71               	goto	l2498
   383  07D4  2FBB               	goto	l1060
   384  07D5                     l1067:	
   385                           
   386                           ;MOTOR.c: 80: RET =0x01;
   387  07D5  01F6               	clrf	_RET
   388  07D6  0AF6               	incf	_RET,f
   389                           
   390                           ;MOTOR.c: 81: if(ROT == 0x01){
   391  07D7  0B77               	decfsz	_ROT,w
   392  07D8  2FE0               	goto	l2542
   393                           
   394                           ;MOTOR.c: 82: derecha(RET);
   395  07D9  3001               	movlw	1
   396  07DA  120A  118A  273E   	fcall	_derecha
      +       120A  118A         
   397                           
   398                           ;MOTOR.c: 83: }else if(ROT == 0x02){
   399  07DF  2FEA               	goto	l2546
   400  07E0                     l2542:	
   401  07E0  0877               	movf	_ROT,w
   402  07E1  3A02               	xorlw	2
   403  07E2  1D03               	skipz
   404  07E3  2FEA               	goto	l2546
   405                           
   406                           ;MOTOR.c: 84: izquierda(RET);
   407  07E4  3001               	movlw	1
   408  07E5  120A  118A  2727   	fcall	_izquierda
      +       120A  118A         
   409  07EA                     l2546:	
   410  07EA  087A               	movf	_VEL,w
   411  07EB  3A08               	xorlw	8
   412  07EC  1D03               	btfss	3,2
   413  07ED  2F71               	goto	l2498
   414  07EE  2FD5               	goto	l1067
   415  07EF                     l2550:	
   416  07EF  087A               	movf	_VEL,w
   417                           
   418                           ; Switch size 1, requested type "space"
   419                           ; Number of cases is 4, Range of values is 1 to 15
   420                           ; switch strategies available:
   421                           ; Name         Instructions Cycles
   422                           ; simple_byte           13     7 (average)
   423                           ; direct_byte           56    11 (fixed)
   424                           ; jumptable            263     9 (fixed)
   425                           ;	Chosen strategy is simple_byte
   426  07F0  3A01               	xorlw	1	; case 1
   427  07F1  1903               	skipnz
   428  07F2  2F9E               	goto	l2516
   429  07F3  3A02               	xorlw	2	; case 3
   430  07F4  1903               	skipnz
   431  07F5  2FB6               	goto	l2526
   432  07F6  3A04               	xorlw	4	; case 7
   433  07F7  1903               	skipnz
   434  07F8  2FD0               	goto	l2536
   435  07F9  3A08               	xorlw	8	; case 15
   436  07FA  1903               	skipnz
   437  07FB  2FEA               	goto	l2546
   438  07FC  2F71               	goto	l2498
   439  07FD  120A  118A  2800   	ljmp	start
   440  0800                     __end_of_main:	
   441                           
   442                           	psect	text36
   443  0727                     __ptext36:	
   444 ;; =============== function _main ends ============
   445                           
   446                           
   447 ;; *************** function _izquierda *****************
   448 ;; Defined at:
   449 ;;		line 104 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\MOTOR\MOTOR.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;  tm2             1    wreg     unsigned char 
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  tm2             1    4[COMMON] unsigned char 
   454 ;; Return value:  Size  Location     Type
   455 ;;		None               void
   456 ;; Registers used:
   457 ;;		wreg, status,2, status,0, pclath, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 17F/0
   460 ;;		On exit  : 17F/0
   461 ;;		Unchanged: FFE80/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       0       0       0       0
   464 ;;      Locals:         1       0       0       0       0
   465 ;;      Temps:          0       0       0       0       0
   466 ;;      Totals:         1       0       0       0       0
   467 ;;Total ram usage:        1 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; Hardware stack levels required when called:    1
   470 ;; This function calls:
   471 ;;		_retardo
   472 ;; This function is called by:
   473 ;;		_main
   474 ;; This function uses a non-reentrant model
   475 ;;
   476  0727                     _izquierda:	
   477                           
   478                           ; Regs used in _izquierda: [wreg+status,2+status,0+pclath+cstack]
   479                           ;izquierda@tm2 stored from wreg
   480  0727  00F4               	movwf	izquierda@tm2
   481                           
   482                           ;MOTOR.c: 105: PORTA = 0x09;
   483  0728  3009               	movlw	9
   484  0729  0085               	movwf	5	;volatile
   485                           
   486                           ;MOTOR.c: 106: retardo(tm2);
   487  072A  0874               	movf	izquierda@tm2,w
   488  072B  2755  120A  118A   	fcall	_retardo
   489                           
   490                           ;MOTOR.c: 107: PORTA = 0x06;
   491  072E  3006               	movlw	6
   492  072F  0085               	movwf	5	;volatile
   493                           
   494                           ;MOTOR.c: 108: retardo(tm2);
   495  0730  0874               	movf	izquierda@tm2,w
   496  0731  2755  120A  118A   	fcall	_retardo
   497                           
   498                           ;MOTOR.c: 109: PORTA = 0x03;
   499  0734  3003               	movlw	3
   500  0735  0085               	movwf	5	;volatile
   501                           
   502                           ;MOTOR.c: 110: retardo(tm2);
   503  0736  0874               	movf	izquierda@tm2,w
   504  0737  2755  120A  118A   	fcall	_retardo
   505                           
   506                           ;MOTOR.c: 111: PORTA = 0x0C;
   507  073A  300C               	movlw	12
   508  073B  0085               	movwf	5	;volatile
   509                           
   510                           ;MOTOR.c: 112: retardo(tm2);
   511  073C  0874               	movf	izquierda@tm2,w
   512  073D  2F55               	ljmp	_retardo
   513  073E                     __end_of_izquierda:	
   514  073E                     __ptext37:	
   515 ;; =============== function _izquierda ends ============
   516                           
   517                           
   518 ;; *************** function _derecha *****************
   519 ;; Defined at:
   520 ;;		line 92 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\MOTOR\MOTOR.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;  tm1             1    wreg     unsigned char 
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  tm1             1    4[COMMON] unsigned char 
   525 ;; Return value:  Size  Location     Type
   526 ;;		None               void
   527 ;; Registers used:
   528 ;;		wreg, status,2, status,0, pclath, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 17F/0
   531 ;;		On exit  : 17F/0
   532 ;;		Unchanged: FFE80/0
   533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   534 ;;      Params:         0       0       0       0       0
   535 ;;      Locals:         1       0       0       0       0
   536 ;;      Temps:          0       0       0       0       0
   537 ;;      Totals:         1       0       0       0       0
   538 ;;Total ram usage:        1 bytes
   539 ;; Hardware stack levels used:    1
   540 ;; Hardware stack levels required when called:    1
   541 ;; This function calls:
   542 ;;		_retardo
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547  073E                     _derecha:	
   548                           
   549                           ; Regs used in _derecha: [wreg+status,2+status,0+pclath+cstack]
   550                           ;derecha@tm1 stored from wreg
   551  073E  00F4               	movwf	derecha@tm1
   552                           
   553                           ;MOTOR.c: 93: PORTA = 0x0C;
   554  073F  300C               	movlw	12
   555  0740  0085               	movwf	5	;volatile
   556                           
   557                           ;MOTOR.c: 94: retardo(tm1);
   558  0741  0874               	movf	derecha@tm1,w
   559  0742  2755  120A  118A   	fcall	_retardo
   560                           
   561                           ;MOTOR.c: 95: PORTA = 0x06;
   562  0745  3006               	movlw	6
   563  0746  0085               	movwf	5	;volatile
   564                           
   565                           ;MOTOR.c: 96: retardo(tm1);
   566  0747  0874               	movf	derecha@tm1,w
   567  0748  2755  120A  118A   	fcall	_retardo
   568                           
   569                           ;MOTOR.c: 97: PORTA = 0x03;
   570  074B  3003               	movlw	3
   571  074C  0085               	movwf	5	;volatile
   572                           
   573                           ;MOTOR.c: 98: retardo(tm1);
   574  074D  0874               	movf	derecha@tm1,w
   575  074E  2755  120A  118A   	fcall	_retardo
   576                           
   577                           ;MOTOR.c: 99: PORTA = 0x09;
   578  0751  3009               	movlw	9
   579  0752  0085               	movwf	5	;volatile
   580                           
   581                           ;MOTOR.c: 100: retardo(tm1);
   582  0753  0874               	movf	derecha@tm1,w
   583  0754  2F55               	ljmp	_retardo
   584  0755                     __end_of_derecha:	
   585  0755                     __ptext38:	
   586 ;; =============== function _derecha ends ============
   587                           
   588                           
   589 ;; *************** function _retardo *****************
   590 ;; Defined at:
   591 ;;		line 116 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\MOTOR\MOTOR.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;  retar           1    wreg     unsigned char 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  retar           1    0[COMMON] unsigned char 
   596 ;;  VC              1    3[COMMON] unsigned char 
   597 ;;  VB              1    2[COMMON] unsigned char 
   598 ;;  VA              1    1[COMMON] unsigned char 
   599 ;; Return value:  Size  Location     Type
   600 ;;		None               void
   601 ;; Registers used:
   602 ;;		wreg, status,2, status,0
   603 ;; Tracked objects:
   604 ;;		On entry : 17F/0
   605 ;;		On exit  : 17F/0
   606 ;;		Unchanged: FFE80/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       0       0       0       0
   609 ;;      Locals:         4       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0
   611 ;;      Totals:         4       0       0       0       0
   612 ;;Total ram usage:        4 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; This function calls:
   615 ;;		Nothing
   616 ;; This function is called by:
   617 ;;		_derecha
   618 ;;		_izquierda
   619 ;; This function uses a non-reentrant model
   620 ;;
   621  0755                     _retardo:	
   622                           
   623                           ; Regs used in _retardo: [wreg+status,2+status,0]
   624                           ;retardo@retar stored from wreg
   625  0755  00F0               	movwf	retardo@retar
   626  0756  2F5E               	goto	l2458
   627  0757                     l2446:	
   628  0757  03F1               	decf	retardo@VA,f
   629  0758  1903               	btfsc	3,2
   630  0759  2F57               	goto	l2446
   631  075A  2F5E               	goto	l2458
   632  075B                     l2454:	
   633  075B  03F2               	decf	retardo@VB,f
   634  075C  1903               	btfsc	3,2
   635  075D  2F5B               	goto	l2454
   636  075E                     l2458:	
   637                           
   638                           ;MOTOR.c: 125: for(char VC = retar;VC<=0x00; VC--);
   639  075E  0870               	movf	retardo@retar,w
   640  075F  00F3               	movwf	retardo@VC
   641  0760                     L1:	
   642  0760  0873               	movf	retardo@VC,w
   643  0761  1D03               	skipz
   644  0762  0008               	return
   645  0763  03F3               	decf	retardo@VC,f
   646  0764  2F60               	goto	L1
   647  0765                     __end_of_retardo:	
   648                           
   649                           	psect	text39
   650  0000                     __ptext39:	
   651 ;; =============== function _retardo ends ============
   652                           
   653  007E                     btemp	set	126	;btemp
   654  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Sat May 07 18:26:19 2022

                  u55 0781          izquierda@tm2 0074                   _RET 0076                   _VEL 007A  
                 _ROT 0077                  l1060 07BB                  l1053 07A1                  l1045 0789  
                l1080 0000                  l1067 07D5                  l1077 0000                  l2500 0000  
                l2510 0000                  l2502 0000                  l2520 0000                  l2512 0794  
                l2504 0000                  l2442 0000                  l2530 0000                  l2522 07AC  
                l2506 0000                  l2540 0000                  l2532 07C6                  l2516 079E  
                l2508 0000                  l2454 075B                  l2446 0757                  l2470 0000  
                l2542 07E0                  l2526 07B6                  l2518 0000                  l2550 07EF  
                l2464 0000                  l2456 0000                  l2448 0000                  l2472 0000  
                l2480 0000                  l2536 07D0                  l2528 0000                  l2458 075E  
                l2474 0000                  l2466 0000                  l2482 0000                  l2546 07EA  
                l2538 0000                  l2490 0000                  l2476 0000                  l2468 0000  
                l2484 0000                  l2492 0000                  l2486 0000                  l2478 0000  
                l2494 0000                  l2488 0000                  l2496 0000                  l2498 0771  
                _main 0765                  btemp 007E                  start 0000                 ?_main 0070  
               _ANSEL 0188                 _TEMP1 0078                 _TEMP2 0079                 _PORTA 0005  
               _PORTB 0006                 _TRISA 0085                 _TRISB 0086                 _TRISC 0087  
               _TRISD 0088                 _TRISE 0089       __end_of_derecha 0755       __end_of_retardo 0765  
               status 0003                 wtemp0 007E          __end_of_main 0800                ??_main 0075  
              _ANSELH 0189             ??_derecha 0074             ??_retardo 0070        __pcstackCOMMON 0070  
          __pnvCOMMON 0076            __pmaintext 0765    __size_of_izquierda 0017               _derecha 073E  
             _retardo 0755  end_of_initialization 0723            derecha@tm1 0074     __end_of_izquierda 073E  
 start_initialization 0723              ?_derecha 0070              ?_retardo 0070             _izquierda 0727  
          ?_izquierda 0070      __size_of_derecha 0017          retardo@retar 0070              __ptext36 0727  
            __ptext37 073E              __ptext38 0755              __ptext39 0000      __size_of_retardo 0010  
           retardo@VA 0071             retardo@VB 0072             retardo@VC 0073         __size_of_main 009B  
         ??_izquierda 0074  

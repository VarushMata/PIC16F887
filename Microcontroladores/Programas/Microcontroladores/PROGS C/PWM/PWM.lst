

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Sun May 08 12:48:00 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text36,local,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,delta=2
    10                           	psect	text37,local,class=CODE,delta=2
    11                           	psect	text39,local,class=CODE,delta=2
    12                           	psect	pa_nodes,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  000A                     	;#
    15                           
    16                           	psect	config
    17  2007  E0F4               	dw	57588	;#
    18  2008  FFFF               	dw	65535	;#
    19                           
    20                           	psect	text36
    21  0000                     __ptext36:	
    22  001F                     _ADCON0	set	31
    23  001E                     _ADRESH	set	30
    24  0017                     _CCP1CON	set	23
    25  001D                     _CCP2CON	set	29
    26  0015                     _CCPR1L	set	21
    27  001B                     _CCPR2L	set	27
    28  0012                     _T2CON	set	18
    29  0001                     _TMR0	set	1
    30  00F9                     _GO_DONE	set	249
    31  005A                     _T0IF	set	90
    32  0081                     _OPTION_REG	set	129
    33  0092                     _PR2	set	146
    34  0085                     _TRISA	set	133
    35  0086                     _TRISB	set	134
    36  0087                     _TRISC	set	135
    37  0088                     _TRISD	set	136
    38  0089                     _TRISE	set	137
    39  0188                     _ANSEL	set	392
    40  0189                     _ANSELH	set	393
    41  009E                     _ADRESL	set	158
    42                           
    43                           	psect	cinit
    44  0742                     start_initialization:	
    45                           
    46                           ; Clear objects allocated to COMMON
    47  0742  01F6               	clrf	__pbssCOMMON& (0+127)
    48  0743  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    49  0744  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    50  0745  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
    51  0746                     end_of_initialization:	
    52                           ;End of C runtime variable initialization code
    53                           
    54  0746  0183               	clrf	3
    55  0747  120A  118A  2F68   	ljmp	_main	;jump to C main() function
    56                           
    57                           	psect	bssCOMMON
    58  0076                     __pbssCOMMON:	
    59  0076                     _ADC1:	
    60  0076                     	ds	2
    61  0078                     _ADC2:	
    62  0078                     	ds	2
    63                           
    64                           	psect	cstackCOMMON
    65  0070                     __pcstackCOMMON:	
    66  0070                     ?_pause:	
    67  0070                     ?_msecbase:	
    68                           ; 0 bytes @ 0x0
    69                           
    70  0070                     ??_msecbase:	
    71                           ; 0 bytes @ 0x0
    72                           
    73  0070                     ?_main:	
    74                           ; 0 bytes @ 0x0
    75                           
    76  0070                     pause@usvalue:	
    77                           ; 0 bytes @ 0x0
    78                           
    79                           
    80                           ; 2 bytes @ 0x0
    81  0070                     	ds	2
    82  0072                     ??_pause:	
    83  0072                     pause@x:	
    84                           ; 0 bytes @ 0x2
    85                           
    86                           
    87                           ; 2 bytes @ 0x2
    88  0072                     	ds	2
    89  0074                     ??_main:	
    90                           
    91                           ; 0 bytes @ 0x4
    92  0074                     	ds	2
    93                           
    94                           	psect	maintext
    95  0768                     __pmaintext:	
    96 ;;Data sizes: Strings 0, constant 0, data 0, bss 4, persistent 0 stack 0
    97 ;;Auto spaces:   Size  Autos    Used
    98 ;; COMMON          14      6      10
    99 ;; BANK0           80      0       0
   100 ;; BANK1           80      0       0
   101 ;; BANK3           96      0       0
   102 ;; BANK2           96      0       0
   103 ;;
   104 ;; Pointer list with targets:
   105 ;;
   106 ;; Critical Paths under _main in COMMON
   107 ;;
   108 ;;   _main->_pause
   109 ;;
   110 ;; Critical Paths under _main in BANK0
   111 ;;
   112 ;;   None.
   113 ;;
   114 ;; Critical Paths under _main in BANK1
   115 ;;
   116 ;;   None.
   117 ;;
   118 ;; Critical Paths under _main in BANK3
   119 ;;
   120 ;;   None.
   121 ;;
   122 ;; Critical Paths under _main in BANK2
   123 ;;
   124 ;;   None.
   125 ;;
   126 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   127 ;;
   128 ;;
   129 ;;Call Graph Tables:
   130 ;;
   131 ;; ---------------------------------------------------------------------------------
   132 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   133 ;; ---------------------------------------------------------------------------------
   134 ;; (0) _main                                                 2     2      0      30
   135 ;;                                              4 COMMON     2     2      0
   136 ;;                              _pause
   137 ;; ---------------------------------------------------------------------------------
   138 ;; (1) _pause                                                4     2      2      30
   139 ;;                                              0 COMMON     4     2      2
   140 ;;                           _msecbase
   141 ;; ---------------------------------------------------------------------------------
   142 ;; (2) _msecbase                                             0     0      0       0
   143 ;; ---------------------------------------------------------------------------------
   144 ;; Estimated maximum stack depth 2
   145 ;; ---------------------------------------------------------------------------------
   146 ;; Call Graph Graphs:
   147 ;; _main (ROOT)
   148 ;;   _pause
   149 ;;     _msecbase
   150 ;;
   151 ;; Address spaces:
   152 ;;Name               Size   Autos  Total    Cost      Usage
   153 ;;BITCOMMON            E      0       0       0        0.0%
   154 ;;EEDATA             100      0       0       0        0.0%
   155 ;;NULL                 0      0       0       0        0.0%
   156 ;;CODE                 0      0       0       0        0.0%
   157 ;;COMMON               E      6       A       1       71.4%
   158 ;;BITSFR0              0      0       0       1        0.0%
   159 ;;SFR0                 0      0       0       1        0.0%
   160 ;;BITSFR1              0      0       0       2        0.0%
   161 ;;SFR1                 0      0       0       2        0.0%
   162 ;;STACK                0      0       2       2        0.0%
   163 ;;ABS                  0      0       A       3        0.0%
   164 ;;BITBANK0            50      0       0       4        0.0%
   165 ;;BITSFR3              0      0       0       4        0.0%
   166 ;;SFR3                 0      0       0       4        0.0%
   167 ;;BANK0               50      0       0       5        0.0%
   168 ;;BITSFR2              0      0       0       5        0.0%
   169 ;;SFR2                 0      0       0       5        0.0%
   170 ;;BITBANK1            50      0       0       6        0.0%
   171 ;;BANK1               50      0       0       7        0.0%
   172 ;;BITBANK3            60      0       0       8        0.0%
   173 ;;BANK3               60      0       0       9        0.0%
   174 ;;BITBANK2            60      0       0      10        0.0%
   175 ;;BANK2               60      0       0      11        0.0%
   176 ;;DATA                 0      0       C      12        0.0%
   177                           
   178                           
   179 ;; *************** function _main *****************
   180 ;; Defined at:
   181 ;;		line 12 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\Faltan\PWM\PWM.c"
   182 ;; Parameters:    Size  Location     Type
   183 ;;		None
   184 ;; Auto vars:     Size  Location     Type
   185 ;;		None
   186 ;; Return value:  Size  Location     Type
   187 ;;		None               void
   188 ;; Registers used:
   189 ;;		wreg, status,2, status,0, pclath, cstack
   190 ;; Tracked objects:
   191 ;;		On entry : 17F/0
   192 ;;		On exit  : 11F/0
   193 ;;		Unchanged: FFE80/0
   194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   195 ;;      Params:         0       0       0       0       0
   196 ;;      Locals:         0       0       0       0       0
   197 ;;      Temps:          2       0       0       0       0
   198 ;;      Totals:         2       0       0       0       0
   199 ;;Total ram usage:        2 bytes
   200 ;; Hardware stack levels required when called:    2
   201 ;; This function calls:
   202 ;;		_pause
   203 ;; This function is called by:
   204 ;;		Startup code after reset
   205 ;; This function uses a non-reentrant model
   206 ;;
   207  0768                     _main:	
   208                           
   209                           ;PWM.c: 14: ANSEL = 0x60;
   210                           
   211                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   212  0768  3060               	movlw	96
   213  0769  1683               	bsf	3,5	;RP0=1, select bank3
   214  076A  1703               	bsf	3,6	;RP1=1, select bank3
   215  076B  0088               	movwf	8	;volatile
   216                           
   217                           ;PWM.c: 15: ANSELH = 0;
   218  076C  0189               	clrf	9	;volatile
   219                           
   220                           ;PWM.c: 16: TRISB = 0xFF;
   221  076D  30FF               	movlw	255
   222  076E  1303               	bcf	3,6	;RP1=0, select bank1
   223  076F  0086               	movwf	6	;volatile
   224                           
   225                           ;PWM.c: 17: TRISA = 0;
   226  0770  0185               	clrf	5	;volatile
   227                           
   228                           ;PWM.c: 19: TRISD =0;
   229  0771  0188               	clrf	8	;volatile
   230                           
   231                           ;PWM.c: 20: TRISC =0;
   232  0772  0187               	clrf	7	;volatile
   233                           
   234                           ;PWM.c: 21: TRISE = 0x07;
   235  0773  3007               	movlw	7
   236  0774  0089               	movwf	9	;volatile
   237                           
   238                           ;PWM.c: 22: T2CON = 0x07;
   239  0775  1283               	bcf	3,5	;RP0=0, select bank0
   240  0776  0092               	movwf	18	;volatile
   241                           
   242                           ;PWM.c: 23: PR2 = 0xFF;
   243  0777  30FF               	movlw	255
   244  0778  1683               	bsf	3,5	;RP0=1, select bank1
   245  0779  0092               	movwf	18	;volatile
   246                           
   247                           ;PWM.c: 25: CCPR1L = 0x80;
   248  077A  3080               	movlw	128
   249  077B  1283               	bcf	3,5	;RP0=0, select bank0
   250  077C  0095               	movwf	21	;volatile
   251                           
   252                           ;PWM.c: 26: CCP1CON = 0x0C;
   253  077D  300C               	movlw	12
   254  077E  0097               	movwf	23	;volatile
   255  077F                     l2433:	
   256                           
   257                           ;PWM.c: 30: ADCON0 = 0xD5;
   258  077F  30D5               	movlw	213
   259  0780  1283               	bcf	3,5	;RP0=0, select bank0
   260  0781  1303               	bcf	3,6	;RP1=0, select bank0
   261  0782  009F               	movwf	31	;volatile
   262                           
   263                           ;PWM.c: 31: GO_DONE = 1;
   264  0783  149F               	bsf	31,1
   265  0784                     l1034:	
   266                           ;PWM.c: 32: while(GO_DONE);
   267                           
   268  0784  189F               	btfsc	31,1
   269  0785  2F84               	goto	l1034
   270                           
   271                           ;PWM.c: 33: ADC1 = (ADRESH<<2)|(ADRESL>>6);
   272  0786  081E               	movf	30,w	;volatile
   273  0787  00F6               	movwf	_ADC1
   274  0788  01F7               	clrf	_ADC1+1
   275  0789  1003               	clrc
   276  078A  0DF6               	rlf	_ADC1,f
   277  078B  0DF7               	rlf	_ADC1+1,f
   278  078C  1003               	clrc
   279  078D  0DF6               	rlf	_ADC1,f
   280  078E  0DF7               	rlf	_ADC1+1,f
   281  078F  1683               	bsf	3,5	;RP0=1, select bank1
   282  0790  081E               	movf	30,w	;volatile
   283  0791  00F4               	movwf	??_main
   284  0792  3006               	movlw	6
   285  0793                     u45:	
   286  0793  1003               	clrc
   287  0794  0CF4               	rrf	??_main,f
   288  0795  3EFF               	addlw	-1
   289  0796  1D03               	skipz
   290  0797  2F93               	goto	u45
   291  0798  0874               	movf	??_main,w
   292  0799  04F6               	iorwf	_ADC1,f
   293                           
   294                           ;PWM.c: 35: ADRESH = ADC1>>2;
   295  079A  0877               	movf	_ADC1+1,w
   296  079B  00F5               	movwf	??_main+1
   297  079C  0876               	movf	_ADC1,w
   298  079D  00F4               	movwf	??_main
   299  079E  1003               	clrc
   300  079F  0CF5               	rrf	??_main+1,f
   301  07A0  0CF4               	rrf	??_main,f
   302  07A1  1003               	clrc
   303  07A2  0CF5               	rrf	??_main+1,f
   304  07A3  0CF4               	rrf	??_main,f
   305  07A4  0874               	movf	??_main,w
   306  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   307  07A6  009E               	movwf	30	;volatile
   308                           
   309                           ;PWM.c: 36: ADRESL = ADC2<<8;
   310  07A7  1683               	bsf	3,5	;RP0=1, select bank1
   311  07A8  019E               	clrf	30	;volatile
   312                           
   313                           ;PWM.c: 37: CCPR1L = ADRESH;
   314  07A9  1283               	bcf	3,5	;RP0=0, select bank0
   315  07AA  081E               	movf	30,w	;volatile
   316  07AB  0095               	movwf	21	;volatile
   317                           
   318                           ;PWM.c: 38: CCP1CON = 0x0C|(ADRESL>>2);
   319  07AC  1683               	bsf	3,5	;RP0=1, select bank1
   320  07AD  081E               	movf	30,w	;volatile
   321  07AE  00F4               	movwf	??_main
   322  07AF  1003               	clrc
   323  07B0  0CF4               	rrf	??_main,f
   324  07B1  1003               	clrc
   325  07B2  0CF4               	rrf	??_main,f
   326  07B3  0874               	movf	??_main,w
   327  07B4  380C               	iorlw	12
   328  07B5  1283               	bcf	3,5	;RP0=0, select bank0
   329  07B6  0097               	movwf	23	;volatile
   330                           
   331                           ;PWM.c: 40: pause(1);
   332  07B7  01F0               	clrf	?_pause
   333  07B8  0AF0               	incf	?_pause,f
   334  07B9  01F1               	clrf	?_pause+1
   335  07BA  120A  118A  274A   	fcall	_pause
      +       120A  118A         
   336                           
   337                           ;PWM.c: 42: ADCON0 = 0xD9;
   338  07BF  30D9               	movlw	217
   339  07C0  1283               	bcf	3,5	;RP0=0, select bank0
   340  07C1  1303               	bcf	3,6	;RP1=0, select bank0
   341  07C2  009F               	movwf	31	;volatile
   342                           
   343                           ;PWM.c: 43: GO_DONE = 1;
   344  07C3  149F               	bsf	31,1
   345  07C4                     l1037:	
   346                           ;PWM.c: 44: while(GO_DONE);
   347                           
   348  07C4  189F               	btfsc	31,1
   349  07C5  2FC4               	goto	l1037
   350                           
   351                           ;PWM.c: 45: ADC2 = (ADRESH<<2)|(ADRESL>>6);
   352  07C6  081E               	movf	30,w	;volatile
   353  07C7  00F8               	movwf	_ADC2
   354  07C8  01F9               	clrf	_ADC2+1
   355  07C9  1003               	clrc
   356  07CA  0DF8               	rlf	_ADC2,f
   357  07CB  0DF9               	rlf	_ADC2+1,f
   358  07CC  1003               	clrc
   359  07CD  0DF8               	rlf	_ADC2,f
   360  07CE  0DF9               	rlf	_ADC2+1,f
   361  07CF  1683               	bsf	3,5	;RP0=1, select bank1
   362  07D0  081E               	movf	30,w	;volatile
   363  07D1  00F4               	movwf	??_main
   364  07D2  3006               	movlw	6
   365  07D3                     u65:	
   366  07D3  1003               	clrc
   367  07D4  0CF4               	rrf	??_main,f
   368  07D5  3EFF               	addlw	-1
   369  07D6  1D03               	skipz
   370  07D7  2FD3               	goto	u65
   371  07D8  0874               	movf	??_main,w
   372  07D9  04F8               	iorwf	_ADC2,f
   373                           
   374                           ;PWM.c: 47: ADRESH = ADC2>>2;
   375  07DA  0879               	movf	_ADC2+1,w
   376  07DB  00F5               	movwf	??_main+1
   377  07DC  0878               	movf	_ADC2,w
   378  07DD  00F4               	movwf	??_main
   379  07DE  1003               	clrc
   380  07DF  0CF5               	rrf	??_main+1,f
   381  07E0  0CF4               	rrf	??_main,f
   382  07E1  1003               	clrc
   383  07E2  0CF5               	rrf	??_main+1,f
   384  07E3  0CF4               	rrf	??_main,f
   385  07E4  0874               	movf	??_main,w
   386  07E5  1283               	bcf	3,5	;RP0=0, select bank0
   387  07E6  009E               	movwf	30	;volatile
   388                           
   389                           ;PWM.c: 48: ADRESL = ADC2<<8;
   390  07E7  1683               	bsf	3,5	;RP0=1, select bank1
   391  07E8  019E               	clrf	30	;volatile
   392                           
   393                           ;PWM.c: 49: CCPR2L = ADRESH;
   394  07E9  1283               	bcf	3,5	;RP0=0, select bank0
   395  07EA  081E               	movf	30,w	;volatile
   396  07EB  009B               	movwf	27	;volatile
   397                           
   398                           ;PWM.c: 50: CCP2CON = 0x0C|(ADRESL>>2);
   399  07EC  1683               	bsf	3,5	;RP0=1, select bank1
   400  07ED  081E               	movf	30,w	;volatile
   401  07EE  00F4               	movwf	??_main
   402  07EF  1003               	clrc
   403  07F0  0CF4               	rrf	??_main,f
   404  07F1  1003               	clrc
   405  07F2  0CF4               	rrf	??_main,f
   406  07F3  0874               	movf	??_main,w
   407  07F4  380C               	iorlw	12
   408  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   409  07F6  009D               	movwf	29	;volatile
   410                           
   411                           ;PWM.c: 52: pause(1);
   412  07F7  01F0               	clrf	?_pause
   413  07F8  0AF0               	incf	?_pause,f
   414  07F9  01F1               	clrf	?_pause+1
   415  07FA  120A  118A  274A   	fcall	_pause
      +       120A  118A         
   416  07FF  2F7F               	goto	l2433
   417  0800                     __end_of_main:	
   418                           
   419                           	psect	text37
   420  074A                     __ptext37:	
   421 ;; =============== function _main ends ============
   422                           
   423                           
   424 ;; *************** function _pause *****************
   425 ;; Defined at:
   426 ;;		line 58 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\Faltan\PWM\PWM.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;  usvalue         2    0[COMMON] unsigned short 
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  x               2    2[COMMON] unsigned short 
   431 ;; Return value:  Size  Location     Type
   432 ;;		None               void
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0, pclath, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : 17F/0
   437 ;;		On exit  : 11F/0
   438 ;;		Unchanged: FFE80/0
   439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   440 ;;      Params:         2       0       0       0       0
   441 ;;      Locals:         2       0       0       0       0
   442 ;;      Temps:          0       0       0       0       0
   443 ;;      Totals:         4       0       0       0       0
   444 ;;Total ram usage:        4 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; Hardware stack levels required when called:    1
   447 ;; This function calls:
   448 ;;		_msecbase
   449 ;; This function is called by:
   450 ;;		_main
   451 ;; This function uses a non-reentrant model
   452 ;;
   453  074A                     _pause:	
   454                           
   455                           ;PWM.c: 59: unsigned short x;
   456                           ;PWM.c: 61: for (x=0; x<=usvalue; x++)
   457                           
   458                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
   459  074A  01F2               	clrf	pause@x
   460  074B  01F3               	clrf	pause@x+1
   461  074C                     l2415:	
   462  074C  0873               	movf	pause@x+1,w
   463  074D  0271               	subwf	pause@usvalue+1,w
   464  074E  1D03               	skipz
   465  074F  2F52               	goto	u25
   466  0750  0872               	movf	pause@x,w
   467  0751  0270               	subwf	pause@usvalue,w
   468  0752                     u25:	
   469  0752  1C03               	btfss	3,0
   470  0753  0008               	return
   471                           
   472                           ;PWM.c: 62: {
   473                           ;PWM.c: 63: msecbase();
   474  0754  275B  120A  118A   	fcall	_msecbase
   475  0757  0AF2               	incf	pause@x,f
   476  0758  1903               	skipnz
   477  0759  0AF3               	incf	pause@x+1,f
   478  075A  2F4C               	goto	l2415
   479  075B                     __end_of_pause:	
   480  075B                     __ptext38:	
   481 ;; =============== function _pause ends ============
   482                           
   483                           
   484 ;; *************** function _msecbase *****************
   485 ;; Defined at:
   486 ;;		line 68 in file "C:\Users\Jorge\OneDrive\Escritorio\PROGS C\Faltan\PWM\PWM.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;		None               void
   493 ;; Registers used:
   494 ;;		wreg
   495 ;; Tracked objects:
   496 ;;		On entry : 11F/0
   497 ;;		On exit  : 11F/0
   498 ;;		Unchanged: FFE80/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   500 ;;      Params:         0       0       0       0       0
   501 ;;      Locals:         0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0
   503 ;;      Totals:         0       0       0       0       0
   504 ;;Total ram usage:        0 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; This function calls:
   507 ;;		Nothing
   508 ;; This function is called by:
   509 ;;		_pause
   510 ;; This function uses a non-reentrant model
   511 ;;
   512  075B                     _msecbase:	
   513                           
   514                           ;PWM.c: 69: OPTION_REG = 0b11010001;
   515                           
   516                           ; Regs used in _msecbase: [wreg]
   517  075B  30D1               	movlw	209
   518  075C  1683               	bsf	3,5	;RP0=1, select bank1
   519  075D  1303               	bcf	3,6	;RP1=0, select bank1
   520  075E  0081               	movwf	1	;volatile
   521                           
   522                           ;PWM.c: 70: TMR0 = 0x0E;
   523  075F  300E               	movlw	14
   524  0760  1283               	bcf	3,5	;RP0=0, select bank0
   525  0761  0081               	movwf	1	;volatile
   526                           
   527                           ;PWM.c: 71: TMR0 = 0x8E;
   528  0762  308E               	movlw	142
   529  0763  0081               	movwf	1	;volatile
   530  0764                     l1051:	
   531                           ;PWM.c: 72: while(!T0IF);
   532                           
   533  0764  1D0B               	btfss	11,2
   534  0765  2F64               	goto	l1051
   535                           
   536                           ;PWM.c: 73: T0IF = 0;
   537  0766  110B               	bcf	11,2
   538  0767  0008               	return
   539  0768                     __end_of_msecbase:	
   540                           
   541                           	psect	text39
   542  0000                     __ptext39:	
   543 ;; =============== function _msecbase ends ============
   544                           
   545  007E                     btemp	set	126	;btemp
   546  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Sun May 08 12:48:00 2022

                  u25 0752                    u45 0793                    u65 07D3                   _PR2 0092  
                l1034 0784                  l1051 0764                  l1037 07C4                  l1054 0000  
                l1048 0000                  l2413 0000                  l2421 0000                  l2407 0000  
                l2415 074C                  l2431 0000                  l2423 0000                  l2409 0000  
                l2441 0000                  l2433 077F                  l2425 0000                  l2417 0000  
                l2451 0000                  l2443 0000                  l2435 0000                  l2427 0000  
                l2419 0000                  l2461 0000                  l2445 0000                  l2429 0000  
                l2463 0000                  l2455 0000                  l2447 0000                  l2439 0000  
                _ADC1 0076                  _ADC2 0078                  l2457 0000                  l2449 0000  
                l2459 0000                  _T0IF 005A                  _TMR0 0001                  _main 0768  
                btemp 007E                  start 0000                 ?_main 0070                 _ANSEL 0188  
               _T2CON 0012                 _TRISA 0085                 _TRISB 0086                 _TRISC 0087  
               _TRISD 0088                 _TRISE 0089                 _pause 074A                 status 0003  
               wtemp0 007E          __end_of_main 0800                ??_main 0074                _ADCON0 001F  
              _ADRESH 001E                _ADRESL 009E                _CCPR1L 0015                ?_pause 0070  
              _CCPR2L 001B                _ANSELH 0189      __end_of_msecbase 0768                pause@x 0072  
      __pcstackCOMMON 0070         __end_of_pause 075B               ??_pause 0072            __pmaintext 0768  
             _CCP1CON 0017               _CCP2CON 001D               _GO_DONE 00F9             ?_msecbase 0070  
end_of_initialization 0746            ??_msecbase 0070   start_initialization 0742          pause@usvalue 0070  
         __pbssCOMMON 0076     __size_of_msecbase 000D        __size_of_pause 0011              __ptext36 0000  
            __ptext37 074A              __ptext38 075B              __ptext39 0000         __size_of_main 0098  
            _msecbase 075B            _OPTION_REG 0081  

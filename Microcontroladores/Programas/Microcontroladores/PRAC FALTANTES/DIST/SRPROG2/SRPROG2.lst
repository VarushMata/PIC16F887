

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Tue Jun 07 15:16:35 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,delta=2
    11                           	psect	text345,local,class=CODE,delta=2
    12                           	psect	text347,local,class=CODE,delta=2
    13                           	psect	text351,local,class=CODE,delta=2
    14                           	psect	text357,local,class=CODE,delta=2
    15                           	psect	text358,local,class=CODE,delta=2
    16                           	psect	text359,local,class=CODE,delta=2
    17                           	psect	functab,global,reloc=256,class=CODE,delta=2
    18                           	psect	pa_nodes,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  000A                     	;#
    21                           
    22                           	psect	config
    23  2007  E0F4               	dw	57588	;#
    24  2008  FFFF               	dw	65535	;#
    25                           
    26                           	psect	strings
    27  0003                     __pstrings:	
    28  0003                     stringtab:	
    29                           ;	global	stringdir,stringtab,__stringbase
    30                           
    31                           
    32                           ;	String table - string pointers are 1 byte each
    33  0003  1BFF               	btfsc	btemp+1,7
    34  0004  280D               	ljmp	stringcode
    35  0005  1383               	bcf	3,7
    36  0006  187F               	btfsc	btemp+1,0
    37  0007  1783               	bsf	3,7
    38  0008  0800               	movf	0,w
    39  0009  0A84               	incf	4,f
    40  000A  1903               	skipnz
    41  000B  0AFF               	incf	btemp+1,f
    42  000C  0008               	return
    43  000D                     stringcode:	
    44  000D                     stringdir:	
    45  000D  3000               	movlw	high stringdir
    46  000E  008A               	movwf	10
    47  000F  0804               	movf	4,w
    48  0010  0A84               	incf	4,f
    49  0011  0782               	addwf	2,f
    50  0012                     __stringbase:	
    51  0012  3400               	retlw	0
    52  0013                     _dpowers:	
    53  0013  3401               	retlw	1
    54  0014  3400               	retlw	0
    55  0015  340A               	retlw	10
    56  0016  3400               	retlw	0
    57  0017  3464               	retlw	100
    58  0018  3400               	retlw	0
    59  0019  34E8               	retlw	232
    60  001A  3403               	retlw	3
    61  001B  3410               	retlw	16
    62  001C  3427               	retlw	39
    63  0006                     _PORTB	set	6
    64  0008                     _PORTD	set	8
    65  001A                     _RCREG	set	26
    66  0018                     _RCSTA	set	24
    67  0010                     _T1CON	set	16
    68  0001                     _TMR0	set	1
    69  000F                     _TMR1H	set	15
    70  000E                     _TMR1L	set	14
    71  0019                     _TXREG	set	25
    72  0030                     _RB0	set	48
    73  0031                     _RB1	set	49
    74  0038                     _RC0	set	56
    75  003B                     _RC3	set	59
    76  003C                     _RC4	set	60
    77  0065                     _RCIF	set	101
    78  005A                     _T0IF	set	90
    79  0060                     _TMR1IF	set	96
    80  0080                     _TMR1ON	set	128
    81  0064                     _TXIF	set	100
    82  009F                     _ADCON1	set	159
    83  0081                     _OPTION_REG	set	129
    84  0099                     _SPBRG	set	153
    85  0085                     _TRISA	set	133
    86  0087                     _TRISC	set	135
    87  0088                     _TRISD	set	136
    88  0089                     _TRISE	set	137
    89  0098                     _TXSTA	set	152
    90  0431                     _TRISB1	set	1073
    91  043E                     _TRISC6	set	1086
    92  043F                     _TRISC7	set	1087
    93  0188                     _ANSEL	set	392
    94  0189                     _ANSELH	set	393
    95  0187                     _BAUDCTL	set	391
    96  001D                     STR_1:	
    97  001D  3449               	retlw	73	;'I'
    98  001E  344E               	retlw	78	;'N'
    99  001F  3449               	retlw	73	;'I'
   100  0020  3443               	retlw	67	;'C'
   101  0021  3449               	retlw	73	;'I'
   102  0022  3441               	retlw	65	;'A'
   103  0023  344E               	retlw	78	;'N'
   104  0024  3444               	retlw	68	;'D'
   105  0025  344F               	retlw	79	;'O'
   106  0026  342E               	retlw	46	;'.'
   107  0027  342E               	retlw	46	;'.'
   108  0028  342E               	retlw	46	;'.'
   109  0029  3400               	retlw	0
   110  002A                     STR_2:	
   111  002A  3453               	retlw	83	;'S'
   112  002B  3449               	retlw	73	;'I'
   113  002C  344E               	retlw	78	;'N'
   114  002D  3420               	retlw	32	;' '
   115  002E  3452               	retlw	82	;'R'
   116  002F  3441               	retlw	65	;'A'
   117  0030  344E               	retlw	78	;'N'
   118  0031  3447               	retlw	71	;'G'
   119  0032  344F               	retlw	79	;'O'
   120  0033  3400               	retlw	0
   121  0034                     STR_5:	
   122  0034  3444               	retlw	68	;'D'
   123  0035  3469               	retlw	105	;'i'
   124  0036  3473               	retlw	115	;'s'
   125  0037  3474               	retlw	116	;'t'
   126  0038  343A               	retlw	58	;':'
   127  0039  3400               	retlw	0
   128  003A                     STR_4:	
   129  003A  3420               	retlw	32	;' '
   130  003B  3425               	retlw	37	;'%'
   131  003C  3464               	retlw	100	;'d'
   132  003D  3420               	retlw	32	;' '
   133  003E  3400               	retlw	0
   134  003F                     STR_3:	
   135  003F  3425               	retlw	37	;'%'
   136  0040  3464               	retlw	100	;'d'
   137  0041  3400               	retlw	0
   138  0042                     STR_6:	
   139  0042  3463               	retlw	99	;'c'
   140  0043  346D               	retlw	109	;'m'
   141  0044  3400               	retlw	0
   142                           
   143                           	psect	cinit
   144  07B5                     start_initialization:	
   145                           
   146                           ; Clear objects allocated to BANK0
   147  07B5  01B4               	clrf	__pbssBANK0& (0+127)
   148  07B6  01B5               	clrf	(__pbssBANK0+1)& (0+127)
   149  07B7  01B6               	clrf	(__pbssBANK0+2)& (0+127)
   150  07B8  01B7               	clrf	(__pbssBANK0+3)& (0+127)
   151  07B9  01B8               	clrf	(__pbssBANK0+4)& (0+127)
   152  07BA  01B9               	clrf	(__pbssBANK0+5)& (0+127)
   153  07BB  01BA               	clrf	(__pbssBANK0+6)& (0+127)
   154  07BC  01BB               	clrf	(__pbssBANK0+7)& (0+127)
   155  07BD                     end_of_initialization:	
   156                           ;End of C runtime variable initialization code
   157                           
   158  07BD  0183               	clrf	3
   159  07BE  120A  118A  2CBA   	ljmp	_main	;jump to C main() function
   160                           
   161                           	psect	bssBANK0
   162  0034                     __pbssBANK0:	
   163  0034                     _dato:	
   164  0034                     	ds	2
   165  0036                     _dist:	
   166  0036                     	ds	2
   167  0038                     _carac1:	
   168  0038                     	ds	4
   169                           
   170                           	psect	cstackCOMMON
   171  0070                     __pcstackCOMMON:	
   172  0070                     ?_lcd_init:	
   173  0070                     ?_lcd_goto:	
   174                           ; 0 bytes @ 0x0
   175                           
   176  0070                     ?_lcd_clear:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     ?_pause:	
   180                           ; 0 bytes @ 0x0
   181                           
   182  0070                     ?_msecbase:	
   183                           ; 0 bytes @ 0x0
   184                           
   185  0070                     ??_msecbase:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_isdigit:	
   189                           ; 0 bytes @ 0x0
   190                           
   191  0070                     ??_isdigit:	
   192                           ; 1 bit 
   193                           
   194  0070                     ?_putch:	
   195                           ; 0 bytes @ 0x0
   196                           
   197  0070                     ??_getch:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_init_comms:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ??_init_comms:	
   204                           ; 0 bytes @ 0x0
   205                           
   206  0070                     ?_main:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_lcd_write:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_getch:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?___wmul:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?___lwdiv:	
   219                           ; 2 bytes @ 0x0
   220                           
   221  0070                     putch@byte:	
   222                           ; 2 bytes @ 0x0
   223                           
   224  0070                     _isdigit$2410:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     pause@usvalue:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ___wmul@multiplier:	
   231                           ; 2 bytes @ 0x0
   232                           
   233  0070                     ___lwdiv@divisor:	
   234                           ; 2 bytes @ 0x0
   235                           
   236                           
   237                           ; 2 bytes @ 0x0
   238  0070                     	ds	1
   239  0071                     ??_putch:	
   240  0071                     isdigit@c:	
   241                           ; 0 bytes @ 0x1
   242                           
   243                           
   244                           ; 1 bytes @ 0x1
   245  0071                     	ds	1
   246  0072                     ??_pause:	
   247  0072                     pause@x:	
   248                           ; 0 bytes @ 0x2
   249                           
   250  0072                     ___wmul@multiplicand:	
   251                           ; 2 bytes @ 0x2
   252                           
   253  0072                     ___lwdiv@dividend:	
   254                           ; 2 bytes @ 0x2
   255                           
   256                           
   257                           ; 2 bytes @ 0x2
   258  0072                     	ds	2
   259  0074                     ??_lcd_write:	
   260  0074                     ??___wmul:	
   261                           ; 0 bytes @ 0x4
   262                           
   263  0074                     ??___lwdiv:	
   264                           ; 0 bytes @ 0x4
   265                           
   266  0074                     lcd_write@c:	
   267                           ; 0 bytes @ 0x4
   268                           
   269  0074                     ___wmul@product:	
   270                           ; 1 bytes @ 0x4
   271                           
   272  0074                     ___lwdiv@quotient:	
   273                           ; 2 bytes @ 0x4
   274                           
   275                           
   276                           ; 2 bytes @ 0x4
   277  0074                     	ds	1
   278  0075                     ??_lcd_init:	
   279  0075                     ??_lcd_goto:	
   280                           ; 0 bytes @ 0x5
   281                           
   282  0075                     ?_lcd_puts:	
   283                           ; 0 bytes @ 0x5
   284                           
   285  0075                     ??_lcd_clear:	
   286                           ; 0 bytes @ 0x5
   287                           
   288  0075                     lcd_goto@pos:	
   289                           ; 0 bytes @ 0x5
   290                           
   291  0075                     lcd_puts@s:	
   292                           ; 1 bytes @ 0x5
   293                           
   294                           
   295                           ; 2 bytes @ 0x5
   296  0075                     	ds	1
   297  0076                     ?_atoi:	
   298  0076                     ___lwdiv@counter:	
   299                           ; 2 bytes @ 0x6
   300                           
   301                           
   302                           ; 1 bytes @ 0x6
   303  0076                     	ds	1
   304  0077                     ??_lcd_puts:	
   305  0077                     ?___lwmod:	
   306                           ; 0 bytes @ 0x7
   307                           
   308  0077                     ___lwmod@divisor:	
   309                           ; 2 bytes @ 0x7
   310                           
   311                           
   312                           ; 2 bytes @ 0x7
   313  0077                     	ds	1
   314  0078                     ??_atoi:	
   315                           
   316                           ; 0 bytes @ 0x8
   317  0078                     	ds	1
   318  0079                     ___lwmod@dividend:	
   319                           
   320                           ; 2 bytes @ 0x9
   321  0079                     	ds	1
   322  007A                     atoi@sign:	
   323                           
   324                           ; 1 bytes @ 0xA
   325  007A                     	ds	1
   326  007B                     ??___lwmod:	
   327  007B                     ___lwmod@counter:	
   328                           ; 0 bytes @ 0xB
   329                           
   330  007B                     atoi@a:	
   331                           ; 1 bytes @ 0xB
   332                           
   333                           
   334                           ; 2 bytes @ 0xB
   335  007B                     	ds	1
   336  007C                     ?__doprnt:	
   337  007C                     __doprnt@f:	
   338                           ; 2 bytes @ 0xC
   339                           
   340                           
   341                           ; 1 bytes @ 0xC
   342  007C                     	ds	1
   343  007D                     __doprnt@ap:	
   344  007D                     atoi@s:	
   345                           ; 1 bytes @ 0xD
   346                           
   347                           
   348                           ; 1 bytes @ 0xD
   349  007D                     	ds	1
   350  007E                     ??_sprintf:	
   351  007E                     ??_printf:	
   352                           ; 0 bytes @ 0xE
   353                           
   354                           
   355                           	psect	cstackBANK0
   356  0020                     __pcstackBANK0:	
   357                           ; 0 bytes @ 0xE
   358                           
   359  0020                     ??__doprnt:	
   360                           
   361                           ; 0 bytes @ 0x0
   362  0020                     	ds	2
   363  0022                     __doprnt@flag:	
   364                           
   365                           ; 1 bytes @ 0x2
   366  0022                     	ds	1
   367  0023                     __doprnt@prec:	
   368                           
   369                           ; 1 bytes @ 0x3
   370  0023                     	ds	1
   371  0024                     __doprnt@_val:	
   372                           
   373                           ; 4 bytes @ 0x4
   374  0024                     	ds	4
   375  0028                     __doprnt@c:	
   376                           
   377                           ; 1 bytes @ 0x8
   378  0028                     	ds	1
   379  0029                     __doprnt@pb:	
   380                           
   381                           ; 1 bytes @ 0x9
   382  0029                     	ds	1
   383  002A                     ?_sprintf:	
   384  002A                     ?_printf:	
   385                           ; 2 bytes @ 0xA
   386                           
   387  002A                     sprintf@f:	
   388                           ; 2 bytes @ 0xA
   389                           
   390                           
   391                           ; 1 bytes @ 0xA
   392  002A                     	ds	2
   393  002C                     printf@f:	
   394                           
   395                           ; 1 bytes @ 0xC
   396  002C                     	ds	1
   397  002D                     printf@ap:	
   398  002D                     sprintf@wh:	
   399                           ; 1 bytes @ 0xD
   400                           
   401                           
   402                           ; 1 bytes @ 0xD
   403  002D                     	ds	1
   404  002E                     sprintf@ap:	
   405  002E                     printf@pb:	
   406                           ; 1 bytes @ 0xE
   407                           
   408                           
   409                           ; 2 bytes @ 0xE
   410  002E                     	ds	1
   411  002F                     sprintf@pb:	
   412                           
   413                           ; 2 bytes @ 0xF
   414  002F                     	ds	2
   415  0031                     ??_main:	
   416                           
   417                           ; 0 bytes @ 0x11
   418  0031                     	ds	3
   419                           
   420                           	psect	maintext
   421  04BA                     __pmaintext:	
   422 ;;Data sizes: Strings 40, constant 10, data 0, bss 8, persistent 0 stack 0
   423 ;;Auto spaces:   Size  Autos    Used
   424 ;; COMMON          14     14      14
   425 ;; BANK0           80     20      28
   426 ;; BANK1           80      0       0
   427 ;; BANK3           96      0       0
   428 ;; BANK2           96      0       0
   429 ;;
   430 ;; Pointer list with targets:
   431 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   432 ;;
   433 ;; ?___lwmod	unsigned int  size(1) Largest target is 2
   434 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   435 ;;
   436 ;; ?_atoi	int  size(1) Largest target is 0
   437 ;;
   438 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   439 ;;
   440 ;; sprintf@f	PTR const unsigned char  size(1) Largest target is 3
   441 ;;		 -> STR_3(CODE[3]), 
   442 ;;
   443 ;; ?_sprintf	int  size(1) Largest target is 4
   444 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   445 ;;
   446 ;; sprintf@ap	PTR void [1] size(1) Largest target is 2
   447 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   448 ;;
   449 ;; sprintf@wh	PTR unsigned char  size(1) Largest target is 4
   450 ;;		 -> carac1(BANK0[4]), 
   451 ;;
   452 ;; pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   453 ;;		 -> Absolute function(), putch(), 
   454 ;;
   455 ;; pb.ptr	PTR unsigned char  size(1) Largest target is 4
   456 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   457 ;;
   458 ;; printf@f	PTR const unsigned char  size(1) Largest target is 5
   459 ;;		 -> STR_4(CODE[5]), 
   460 ;;
   461 ;; ?_printf	int  size(1) Largest target is 0
   462 ;;
   463 ;; printf@ap	PTR void [1] size(1) Largest target is 2
   464 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   465 ;;
   466 ;; pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   467 ;;		 -> Absolute function(), putch(), 
   468 ;;
   469 ;; pb.ptr	PTR unsigned char  size(1) Largest target is 4
   470 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   471 ;;
   472 ;; atoi@s	PTR const unsigned char  size(1) Largest target is 4
   473 ;;		 -> carac1(BANK0[4]), 
   474 ;;
   475 ;; _doprnt@ap	PTR PTR void  size(1) Largest target is 2
   476 ;;		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 
   477 ;;
   478 ;; _doprnt@f	PTR const unsigned char  size(1) Largest target is 5
   479 ;;		 -> STR_4(CODE[5]), STR_3(CODE[3]), 
   480 ;;
   481 ;; S1857__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   482 ;;		 -> Absolute function(), putch(), 
   483 ;;
   484 ;; _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   485 ;;		 -> Absolute function(), putch(), 
   486 ;;
   487 ;; S1857__prbuf$ptr	PTR unsigned char  size(1) Largest target is 4
   488 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   489 ;;
   490 ;; _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 4
   491 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   492 ;;
   493 ;; _doprnt@pb	PTR struct __prbuf size(1) Largest target is 3
   494 ;;		 -> sprintf@pb(BANK0[2]), printf@pb(BANK0[2]), 
   495 ;;
   496 ;; S1876$_cp	PTR const unsigned char  size(1) Largest target is 0
   497 ;;
   498 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   499 ;;
   500 ;; lcd_puts@s	PTR const unsigned char  size(2) Largest target is 13
   501 ;;		 -> STR_6(CODE[3]), STR_5(CODE[6]), carac1(BANK0[4]), STR_2(CODE[10]), 
   502 ;;		 -> STR_1(CODE[13]), 
   503 ;;
   504 ;;
   505 ;; Critical Paths under _main in COMMON
   506 ;;
   507 ;;   _main->_atoi
   508 ;;   _lcd_init->_lcd_write
   509 ;;   _lcd_clear->_lcd_write
   510 ;;   _lcd_puts->_lcd_write
   511 ;;   _lcd_goto->_lcd_write
   512 ;;   _lcd_write->_pause
   513 ;;   _printf->__doprnt
   514 ;;   _sprintf->__doprnt
   515 ;;   __doprnt->___lwmod
   516 ;;   _atoi->___wmul
   517 ;;   ___lwmod->___lwdiv
   518 ;;
   519 ;; Critical Paths under _main in BANK0
   520 ;;
   521 ;;   _main->_sprintf
   522 ;;   _printf->__doprnt
   523 ;;   _sprintf->__doprnt
   524 ;;
   525 ;; Critical Paths under _main in BANK1
   526 ;;
   527 ;;   None.
   528 ;;
   529 ;; Critical Paths under _main in BANK3
   530 ;;
   531 ;;   None.
   532 ;;
   533 ;; Critical Paths under _main in BANK2
   534 ;;
   535 ;;   None.
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   538 ;;
   539 ;;
   540 ;;Call Graph Tables:
   541 ;;
   542 ;; ---------------------------------------------------------------------------------
   543 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   544 ;; ---------------------------------------------------------------------------------
   545 ;; (0) _main                                                 3     3      0    3572
   546 ;;                                             17 BANK0      3     3      0
   547 ;;                           _lcd_init
   548 ;;                         _init_comms
   549 ;;                           _lcd_goto
   550 ;;                           _lcd_puts
   551 ;;                              _getch
   552 ;;                          _lcd_clear
   553 ;;                            ___lwdiv
   554 ;;                            _sprintf
   555 ;;                               _atoi
   556 ;;                             _printf
   557 ;; ---------------------------------------------------------------------------------
   558 ;; (1) _lcd_init                                             1     1      0     295
   559 ;;                                              5 COMMON     1     1      0
   560 ;;                              _pause
   561 ;;                          _lcd_write
   562 ;;                          _lcd_clear
   563 ;; ---------------------------------------------------------------------------------
   564 ;; (1) _lcd_clear                                            0     0      0     136
   565 ;;                          _lcd_write
   566 ;;                              _pause
   567 ;; ---------------------------------------------------------------------------------
   568 ;; (1) _lcd_puts                                             2     0      2     135
   569 ;;                                              5 COMMON     2     0      2
   570 ;;                          _lcd_write
   571 ;; ---------------------------------------------------------------------------------
   572 ;; (1) _lcd_goto                                             1     1      0     112
   573 ;;                                              5 COMMON     1     1      0
   574 ;;                          _lcd_write
   575 ;; ---------------------------------------------------------------------------------
   576 ;; (2) _lcd_write                                            1     1      0      90
   577 ;;                                              4 COMMON     1     1      0
   578 ;;                              _pause
   579 ;; ---------------------------------------------------------------------------------
   580 ;; (1) _printf                                               6     4      2    1144
   581 ;;                                             10 BANK0      6     4      2
   582 ;;                            __doprnt
   583 ;; ---------------------------------------------------------------------------------
   584 ;; (1) _sprintf                                              7     4      3    1200
   585 ;;                                             10 BANK0      7     4      3
   586 ;;                            __doprnt
   587 ;; ---------------------------------------------------------------------------------
   588 ;; (2) __doprnt                                             12    10      2    1035
   589 ;;                                             12 COMMON     2     0      2
   590 ;;                                              0 BANK0     10    10      0
   591 ;;                   Absolute function
   592 ;;                              _putch
   593 ;;                            ___lwdiv
   594 ;;                            ___lwmod
   595 ;; ---------------------------------------------------------------------------------
   596 ;; (2) _pause                                                4     2      2      46
   597 ;;                                              0 COMMON     4     2      2
   598 ;;                           _msecbase
   599 ;; ---------------------------------------------------------------------------------
   600 ;; (1) _atoi                                                 8     6      2     388
   601 ;;                                              6 COMMON     8     6      2
   602 ;;                             ___wmul
   603 ;;                            _isdigit
   604 ;; ---------------------------------------------------------------------------------
   605 ;; (3) ___lwmod                                              5     1      4     159
   606 ;;                                              7 COMMON     5     1      4
   607 ;;                            ___lwdiv (ARG)
   608 ;; ---------------------------------------------------------------------------------
   609 ;; (3) ___lwdiv                                              7     3      4     162
   610 ;;                                              0 COMMON     7     3      4
   611 ;; ---------------------------------------------------------------------------------
   612 ;; (2) ___wmul                                               6     2      4      92
   613 ;;                                              0 COMMON     6     2      4
   614 ;; ---------------------------------------------------------------------------------
   615 ;; (2) _isdigit                                              2     2      0      68
   616 ;;                                              0 COMMON     2     2      0
   617 ;; ---------------------------------------------------------------------------------
   618 ;; (3) Absolute function(Fake)                               1     0      1       0
   619 ;;                                              0 COMMON     1     0      1
   620 ;; ---------------------------------------------------------------------------------
   621 ;; (3) _msecbase                                             0     0      0       0
   622 ;; ---------------------------------------------------------------------------------
   623 ;; (1) _init_comms                                           0     0      0       0
   624 ;; ---------------------------------------------------------------------------------
   625 ;; (1) _getch                                                0     0      0       0
   626 ;; ---------------------------------------------------------------------------------
   627 ;; (3) _putch                                                1     0      1      22
   628 ;;                                              0 COMMON     1     0      1
   629 ;; ---------------------------------------------------------------------------------
   630 ;; Estimated maximum stack depth 3
   631 ;; ---------------------------------------------------------------------------------
   632 ;; Call Graph Graphs:
   633 ;; _main (ROOT)
   634 ;;   _lcd_init
   635 ;;     _pause
   636 ;;       _msecbase
   637 ;;     _lcd_write
   638 ;;       _pause
   639 ;;         _msecbase
   640 ;;     _lcd_clear
   641 ;;       _lcd_write
   642 ;;         _pause
   643 ;;           _msecbase
   644 ;;       _pause
   645 ;;         _msecbase
   646 ;;   _init_comms
   647 ;;   _lcd_goto
   648 ;;     _lcd_write
   649 ;;       _pause
   650 ;;         _msecbase
   651 ;;   _lcd_puts
   652 ;;     _lcd_write
   653 ;;       _pause
   654 ;;         _msecbase
   655 ;;   _getch
   656 ;;   _lcd_clear
   657 ;;     _lcd_write
   658 ;;       _pause
   659 ;;         _msecbase
   660 ;;     _pause
   661 ;;       _msecbase
   662 ;;   ___lwdiv
   663 ;;   _sprintf
   664 ;;     __doprnt
   665 ;;       Absolute function(Fake)
   666 ;;       _putch
   667 ;;       ___lwdiv
   668 ;;       ___lwmod
   669 ;;         ___lwdiv (ARG)
   670 ;;   _atoi
   671 ;;     ___wmul
   672 ;;     _isdigit
   673 ;;   _printf
   674 ;;     __doprnt
   675 ;;       Absolute function(Fake)
   676 ;;       _putch
   677 ;;       ___lwdiv
   678 ;;       ___lwmod
   679 ;;         ___lwdiv (ARG)
   680 ;;
   681 ;; Address spaces:
   682 ;;Name               Size   Autos  Total    Cost      Usage
   683 ;;BITCOMMON            E      0       0       0        0.0%
   684 ;;EEDATA             100      0       0       0        0.0%
   685 ;;NULL                 0      0       0       0        0.0%
   686 ;;CODE                 0      0       0       0        0.0%
   687 ;;COMMON               E      E       E       1      100.0%
   688 ;;BITSFR0              0      0       0       1        0.0%
   689 ;;SFR0                 0      0       0       1        0.0%
   690 ;;BITSFR1              0      0       0       2        0.0%
   691 ;;SFR1                 0      0       0       2        0.0%
   692 ;;STACK                0      0       5       2        0.0%
   693 ;;ABS                  0      0      2A       3        0.0%
   694 ;;BITBANK0            50      0       0       4        0.0%
   695 ;;BITSFR3              0      0       0       4        0.0%
   696 ;;SFR3                 0      0       0       4        0.0%
   697 ;;BANK0               50     14      1C       5       35.0%
   698 ;;BITSFR2              0      0       0       5        0.0%
   699 ;;SFR2                 0      0       0       5        0.0%
   700 ;;BITBANK1            50      0       0       6        0.0%
   701 ;;BANK1               50      0       0       7        0.0%
   702 ;;BITBANK3            60      0       0       8        0.0%
   703 ;;BANK3               60      0       0       9        0.0%
   704 ;;BITBANK2            60      0       0      10        0.0%
   705 ;;BANK2               60      0       0      11        0.0%
   706 ;;DATA                 0      0      2F      12        0.0%
   707                           
   708                           
   709 ;; *************** function _main *****************
   710 ;; Defined at:
   711 ;;		line 66 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;		None               void
   718 ;; Registers used:
   719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 17F/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   725 ;;      Params:         0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0
   727 ;;      Temps:          0       3       0       0       0
   728 ;;      Totals:         0       3       0       0       0
   729 ;;Total ram usage:        3 bytes
   730 ;; Hardware stack levels required when called:    5
   731 ;; This function calls:
   732 ;;		_lcd_init
   733 ;;		_init_comms
   734 ;;		_lcd_goto
   735 ;;		_lcd_puts
   736 ;;		_getch
   737 ;;		_lcd_clear
   738 ;;		___lwdiv
   739 ;;		_sprintf
   740 ;;		_atoi
   741 ;;		_printf
   742 ;; This function is called by:
   743 ;;		Startup code after reset
   744 ;; This function uses a non-reentrant model
   745 ;;
   746  04BA                     _main:	
   747                           
   748                           ;SRPROG2.c: 68: ANSEL = 0x00;
   749                           
   750                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   751  04BA  1683               	bsf	3,5	;RP0=1, select bank3
   752  04BB  1703               	bsf	3,6	;RP1=1, select bank3
   753  04BC  0188               	clrf	8	;volatile
   754                           
   755                           ;SRPROG2.c: 69: ANSELH = 0x00;
   756  04BD  0189               	clrf	9	;volatile
   757                           
   758                           ;SRPROG2.c: 70: PORTB=0;
   759  04BE  1283               	bcf	3,5	;RP0=0, select bank0
   760  04BF  1303               	bcf	3,6	;RP1=0, select bank0
   761  04C0  0186               	clrf	6	;volatile
   762                           
   763                           ;SRPROG2.c: 71: TRISB1=0;
   764  04C1  1683               	bsf	3,5	;RP0=1, select bank1
   765  04C2  1086               	bcf	6,1
   766                           
   767                           ;SRPROG2.c: 72: TRISA = 0x00;
   768  04C3  0185               	clrf	5	;volatile
   769                           
   770                           ;SRPROG2.c: 73: TRISD = 0x00;
   771  04C4  0188               	clrf	8	;volatile
   772                           
   773                           ;SRPROG2.c: 74: TRISC = 0x00;
   774  04C5  0187               	clrf	7	;volatile
   775                           
   776                           ;SRPROG2.c: 75: TRISE = 0x00;
   777  04C6  0189               	clrf	9	;volatile
   778                           
   779                           ;SRPROG2.c: 76: ADCON1 = 0xFF;
   780  04C7  30FF               	movlw	255
   781  04C8  009F               	movwf	31	;volatile
   782                           
   783                           ;SRPROG2.c: 77: T1CON = 0x00;
   784  04C9  1283               	bcf	3,5	;RP0=0, select bank0
   785  04CA  0190               	clrf	16	;volatile
   786                           
   787                           ;SRPROG2.c: 78: TMR1H=0x00;
   788  04CB  018F               	clrf	15	;volatile
   789                           
   790                           ;SRPROG2.c: 79: TMR1L=0x00;
   791  04CC  018E               	clrf	14	;volatile
   792                           
   793                           ;SRPROG2.c: 81: RB1=0;
   794  04CD  1086               	bcf	6,1
   795                           
   796                           ;SRPROG2.c: 82: RB0=0;
   797  04CE  1006               	bcf	6,0
   798                           
   799                           ;SRPROG2.c: 84: lcd_init();
   800  04CF  120A  118A  272C   	fcall	_lcd_init
      +       120A  118A         
   801                           
   802                           ;SRPROG2.c: 86: init_comms();
   803  04D4  120A  118A  27A7   	fcall	_init_comms
      +       120A  118A         
   804                           
   805                           ;SRPROG2.c: 88: lcd_goto(0x00);
   806  04D9  3000               	movlw	0
   807  04DA  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
   808                           
   809                           ;SRPROG2.c: 89: lcd_puts("INICIANDO...");
   810  04DF  300B               	movlw	low (STR_1-__stringbase)
   811  04E0  00F5               	movwf	?_lcd_puts
   812  04E1  3080               	movlw	128
   813  04E2  00F6               	movwf	?_lcd_puts+1
   814  04E3  120A  118A  270F   	fcall	_lcd_puts
      +       120A  118A         
   815                           
   816                           ;SRPROG2.c: 91: _delay((unsigned long)((1000)*(4000000/4000.0)));
   817  04E8  3006               	movlw	6
   818  04E9  00B3               	movwf	??_main+2
   819  04EA  3013               	movlw	19
   820  04EB  00B2               	movwf	??_main+1
   821  04EC  30B1               	movlw	177
   822  04ED  00B1               	movwf	??_main
   823  04EE                     u837:	
   824  04EE  0BB1               	decfsz	??_main,f
   825  04EF  2CEE               	goto	u837
   826  04F0  0BB2               	decfsz	??_main+1,f
   827  04F1  2CEE               	goto	u837
   828  04F2  0BB3               	decfsz	??_main+2,f
   829  04F3  2CEE               	goto	u837
   830  04F4  2CF5               	nop2
   831  04F5                     l3318:	
   832                           
   833                           ;SRPROG2.c: 95: TMR1H=0x00;
   834  04F5  1283               	bcf	3,5	;RP0=0, select bank0
   835  04F6  1303               	bcf	3,6	;RP1=0, select bank0
   836  04F7  018F               	clrf	15	;volatile
   837                           
   838                           ;SRPROG2.c: 96: TMR1L=0x00;
   839  04F8  018E               	clrf	14	;volatile
   840                           
   841                           ;SRPROG2.c: 98: dist=0;
   842  04F9  01B6               	clrf	_dist
   843  04FA  01B7               	clrf	_dist+1
   844                           
   845                           ;SRPROG2.c: 100: getch();
   846  04FB  120A  118A  27C6   	fcall	_getch
      +       120A  118A         
   847                           
   848                           ;SRPROG2.c: 102: lcd_clear();
   849  0500  120A  118A  2793   	fcall	_lcd_clear
      +       120A  118A         
   850                           
   851                           ;SRPROG2.c: 104: RB1=0;
   852  0505  1283               	bcf	3,5	;RP0=0, select bank0
   853  0506  1303               	bcf	3,6	;RP1=0, select bank0
   854  0507  1086               	bcf	6,1
   855                           
   856                           ;SRPROG2.c: 106: _delay((unsigned long)((2)*(4000000/4000000.0)));
   857  0508  2D09               	nop2	;2 cycle nop
   858                           
   859                           ;SRPROG2.c: 108: RB1=1;
   860  0509  1283               	bcf	3,5	;RP0=0, select bank0
   861  050A  1303               	bcf	3,6	;RP1=0, select bank0
   862  050B  3003               	movlw	3
   863  050C  1486               	bsf	6,1
   864                           
   865                           ;SRPROG2.c: 110: _delay((unsigned long)((10)*(4000000/4000000.0)));
   866  050D  00B1               	movwf	??_main
   867  050E                     u847:	
   868  050E  0BB1               	decfsz	??_main,f
   869  050F  2D0E               	goto	u847
   870                           
   871                           ;SRPROG2.c: 112: RB1=0;
   872  0510  1283               	bcf	3,5	;RP0=0, select bank0
   873  0511  1303               	bcf	3,6	;RP1=0, select bank0
   874  0512  1086               	bcf	6,1
   875  0513                     l1067:	
   876                           ;SRPROG2.c: 114: while(!RB0);
   877                           
   878  0513  1C06               	btfss	6,0
   879  0514  2D13               	goto	l1067
   880                           
   881                           ;SRPROG2.c: 116: TMR1ON=1;
   882  0515  1410               	bsf	16,0
   883  0516  2D19               	goto	l1070
   884  0517                     l3338:	
   885  0517  180C               	btfsc	12,0
   886  0518  2D1B               	goto	l1074
   887  0519                     l1070:	
   888                           ;SRPROG2.c: 118: while(RB0 && !TMR1IF);
   889                           
   890  0519  1806               	btfsc	6,0
   891  051A  2D17               	goto	l3338
   892  051B                     l1074:	
   893                           
   894                           ;SRPROG2.c: 120: TMR1ON=0;
   895  051B  1010               	bcf	16,0
   896                           
   897                           ;SRPROG2.c: 122: if(!TMR1IF){
   898  051C  180C               	btfsc	12,0
   899  051D  2D24               	goto	l3342
   900                           
   901                           ;SRPROG2.c: 124: dist = (TMR1H<<8 | TMR1L);
   902  051E  080F               	movf	15,w	;volatile
   903  051F  00B7               	movwf	_dist+1
   904  0520  01B6               	clrf	_dist
   905  0521  080E               	movf	14,w	;volatile
   906  0522  04B6               	iorwf	_dist,f
   907                           
   908                           ;SRPROG2.c: 132: }else{
   909  0523  2D27               	goto	l3346
   910  0524                     l3342:	
   911                           
   912                           ;SRPROG2.c: 133: dist=0;
   913  0524  01B6               	clrf	_dist
   914  0525  01B7               	clrf	_dist+1
   915                           
   916                           ;SRPROG2.c: 134: TMR1IF=0;
   917  0526  100C               	bcf	12,0
   918  0527                     l3346:	
   919                           
   920                           ;SRPROG2.c: 135: }
   921                           ;SRPROG2.c: 137: dist = (dist)/58;
   922  0527  303A               	movlw	58
   923  0528  00F0               	movwf	?___lwdiv
   924  0529  01F1               	clrf	?___lwdiv+1
   925  052A  0837               	movf	_dist+1,w
   926  052B  00F3               	movwf	?___lwdiv+3
   927  052C  0836               	movf	_dist,w
   928  052D  00F2               	movwf	?___lwdiv+2
   929  052E  120A  118A  26A5   	fcall	___lwdiv
      +       120A  118A         
   930  0533  0871               	movf	?___lwdiv+1,w
   931  0534  00B7               	movwf	_dist+1
   932  0535  0870               	movf	?___lwdiv,w
   933  0536  00B6               	movwf	_dist
   934                           
   935                           ;SRPROG2.c: 138: dist = dist + 2;
   936  0537  3002               	movlw	2
   937  0538  07B6               	addwf	_dist,f
   938  0539  1803               	skipnc
   939  053A  0AB7               	incf	_dist+1,f
   940                           
   941                           ;SRPROG2.c: 140: if(dist<3 || 350<dist){
   942  053B  3000               	movlw	0
   943  053C  0237               	subwf	_dist+1,w
   944  053D  3003               	movlw	3
   945  053E  1903               	skipnz
   946  053F  0236               	subwf	_dist,w
   947  0540  1C03               	skipc
   948  0541  2D49               	goto	l3354
   949  0542  3001               	movlw	1
   950  0543  0237               	subwf	_dist+1,w
   951  0544  305F               	movlw	95
   952  0545  1903               	skipnz
   953  0546  0236               	subwf	_dist,w
   954  0547  1C03               	skipc
   955  0548  2D51               	goto	l3358
   956  0549                     l3354:	
   957                           
   958                           ;SRPROG2.c: 141: lcd_goto(0x00);
   959  0549  3000               	movlw	0
   960  054A  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
   961                           
   962                           ;SRPROG2.c: 142: lcd_puts("SIN RANGO");
   963  054F  3018               	movlw	low (STR_2-__stringbase)
   964  0550  2D9E               	goto	L1
   965  0551                     l3358:	
   966                           ;SRPROG2.c: 143: }else if(3<dist || dist<350){
   967                           
   968  0551  3000               	movlw	0
   969  0552  0237               	subwf	_dist+1,w
   970  0553  3004               	movlw	4
   971  0554  1903               	skipnz
   972  0555  0236               	subwf	_dist,w
   973  0556  1803               	skipnc
   974  0557  2D5F               	goto	l3362
   975  0558  3001               	movlw	1
   976  0559  0237               	subwf	_dist+1,w
   977  055A  305E               	movlw	94
   978  055B  1903               	skipnz
   979  055C  0236               	subwf	_dist,w
   980  055D  1803               	skipnc
   981  055E  2DA6               	goto	l3378
   982  055F                     l3362:	
   983                           
   984                           ;SRPROG2.c: 144: sprintf(carac1, "%d",dist);
   985  055F  302D               	movlw	(STR_3-__stringbase)& (0+255)
   986  0560  00AA               	movwf	?_sprintf
   987  0561  0837               	movf	_dist+1,w
   988  0562  00AC               	movwf	?_sprintf+2
   989  0563  0836               	movf	_dist,w
   990  0564  00AB               	movwf	?_sprintf+1
   991  0565  3038               	movlw	_carac1& (0+255)
   992  0566  120A  118A  25C0   	fcall	_sprintf
      +       120A  118A         
   993                           
   994                           ;SRPROG2.c: 146: dato = atoi(carac1);
   995  056B  3038               	movlw	_carac1& (0+255)
   996  056C  120A  118A  2439   	fcall	_atoi
      +       120A  118A         
   997  0571  0877               	movf	?_atoi+1,w
   998  0572  00B5               	movwf	_dato+1
   999  0573  0876               	movf	?_atoi,w
  1000  0574  00B4               	movwf	_dato
  1001                           
  1002                           ;SRPROG2.c: 147: printf(" %d ",dato);
  1003  0575  0835               	movf	_dato+1,w
  1004  0576  00AB               	movwf	?_printf+1
  1005  0577  0834               	movf	_dato,w
  1006  0578  00AA               	movwf	?_printf
  1007  0579  3028               	movlw	(STR_4-__stringbase)& (0+255)
  1008  057A  120A  118A  25B4   	fcall	_printf
      +       120A  118A         
  1009                           
  1010                           ;SRPROG2.c: 149: lcd_goto(0x00);
  1011  057F  3000               	movlw	0
  1012  0580  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
  1013                           
  1014                           ;SRPROG2.c: 150: lcd_puts("Dist:");
  1015  0585  3022               	movlw	low (STR_5-__stringbase)
  1016  0586  00F5               	movwf	?_lcd_puts
  1017  0587  3080               	movlw	128
  1018  0588  00F6               	movwf	?_lcd_puts+1
  1019  0589  120A  118A  270F   	fcall	_lcd_puts
      +       120A  118A         
  1020                           
  1021                           ;SRPROG2.c: 151: lcd_puts(carac1);
  1022  058E  3038               	movlw	_carac1& (0+255)
  1023  058F  00F5               	movwf	?_lcd_puts
  1024  0590  3000               	movlw	0
  1025  0591  00F6               	movwf	?_lcd_puts+1
  1026  0592  120A  118A  270F   	fcall	_lcd_puts
      +       120A  118A         
  1027                           
  1028                           ;SRPROG2.c: 152: lcd_goto(0x0A);
  1029  0597  300A               	movlw	10
  1030  0598  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
  1031                           
  1032                           ;SRPROG2.c: 153: lcd_puts("cm");
  1033  059D  3030               	movlw	low (STR_6-__stringbase)
  1034  059E                     L1:	
  1035  059E  00F5               	movwf	?_lcd_puts
  1036  059F  3080               	movlw	128
  1037  05A0  00F6               	movwf	?_lcd_puts+1
  1038  05A1  120A  118A  270F   	fcall	_lcd_puts
      +       120A  118A         
  1039  05A6                     l3378:	
  1040                           
  1041                           ;SRPROG2.c: 154: }
  1042                           ;SRPROG2.c: 156: _delay((unsigned long)((200)*(4000000/4000.0)));
  1043  05A6  3002               	movlw	2
  1044  05A7  00B3               	movwf	??_main+2
  1045  05A8  3004               	movlw	4
  1046  05A9  00B2               	movwf	??_main+1
  1047  05AA  30BA               	movlw	186
  1048  05AB  00B1               	movwf	??_main
  1049  05AC                     u857:	
  1050  05AC  0BB1               	decfsz	??_main,f
  1051  05AD  2DAC               	goto	u857
  1052  05AE  0BB2               	decfsz	??_main+1,f
  1053  05AF  2DAC               	goto	u857
  1054  05B0  0BB3               	decfsz	??_main+2,f
  1055  05B1  2DAC               	goto	u857
  1056  05B2  0064               	clrwdt
  1057  05B3  2CF5               	goto	l3318
  1058  05B4                     __end_of_main:	
  1059                           
  1060                           	psect	text345
  1061  0709                     __ptext345:	
  1062 ;; =============== function _lcd_puts ends ============
  1063                           
  1064                           
  1065 ;; *************** function _lcd_goto *****************
  1066 ;; Defined at:
  1067 ;;		line 188 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  pos             1    wreg     unsigned char 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  pos             1    5[COMMON] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;		None               void
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0, pclath, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/60
  1078 ;;		On exit  : 60/0
  1079 ;;		Unchanged: FFF9F/0
  1080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1081 ;;      Params:         0       0       0       0       0
  1082 ;;      Locals:         1       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0
  1084 ;;      Totals:         1       0       0       0       0
  1085 ;;Total ram usage:        1 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    3
  1088 ;; This function calls:
  1089 ;;		_lcd_write
  1090 ;; This function is called by:
  1091 ;;		_main
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094  0709                     _lcd_goto:	
  1095                           
  1096                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  1097                           ;lcd_goto@pos stored from wreg
  1098  0709  00F5               	movwf	lcd_goto@pos
  1099  070A  27A4               	call	PL5	;select bank 0
  1100                           
  1101                           ;SRPROG2.c: 189: RC3 = 0;
  1102  070B  1187               	bcf	7,3
  1103                           
  1104                           ;SRPROG2.c: 190: lcd_write(0x80 + pos);
  1105  070C  0875               	movf	lcd_goto@pos,w
  1106  070D  3E80               	addlw	128
  1107  070E  2F73               	ljmp	_lcd_write
  1108  070F                     __end_of_lcd_goto:	
  1109  070F                     __ptext344:	
  1110 ;; =============== function _lcd_clear ends ============
  1111                           
  1112                           
  1113 ;; *************** function _lcd_puts *****************
  1114 ;; Defined at:
  1115 ;;		line 177 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  s               2    5[COMMON] PTR const unsigned char 
  1118 ;;		 -> STR_6(3), STR_5(6), carac1(4), STR_2(10), 
  1119 ;;		 -> STR_1(13), 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;		None
  1122 ;; Return value:  Size  Location     Type
  1123 ;;		None               void
  1124 ;; Registers used:
  1125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 60/0
  1128 ;;		On exit  : 60/0
  1129 ;;		Unchanged: FFE9F/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1131 ;;      Params:         2       0       0       0       0
  1132 ;;      Locals:         0       0       0       0       0
  1133 ;;      Temps:          0       0       0       0       0
  1134 ;;      Totals:         2       0       0       0       0
  1135 ;;Total ram usage:        2 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    3
  1138 ;; This function calls:
  1139 ;;		_lcd_write
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144  070F                     _lcd_puts:	
  1145                           
  1146                           ;SRPROG2.c: 178: RC3 = 1;
  1147                           
  1148                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1149  070F  1587               	bsf	7,3
  1150  0710                     l3246:	
  1151                           ;SRPROG2.c: 179: while(*s)
  1152                           
  1153  0710  0876               	movf	lcd_puts@s+1,w
  1154  0711  00FF               	movwf	127
  1155  0712  0875               	movf	lcd_puts@s,w
  1156  0713  0084               	movwf	4
  1157  0714  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1158  0719  3800               	iorlw	0
  1159  071A  1903               	btfsc	3,2
  1160  071B  0008               	return
  1161                           
  1162                           ;SRPROG2.c: 180: lcd_write(*s++);
  1163  071C  0876               	movf	lcd_puts@s+1,w
  1164  071D  00FF               	movwf	127
  1165  071E  0875               	movf	lcd_puts@s,w
  1166  071F  0084               	movwf	4
  1167  0720  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1168  0725  2773  120A  118A   	fcall	_lcd_write
  1169  0728  0AF5               	incf	lcd_puts@s,f
  1170  0729  1903               	skipnz
  1171  072A  0AF6               	incf	lcd_puts@s+1,f
  1172  072B  2F10               	goto	l3246
  1173  072C                     __end_of_lcd_puts:	
  1174  072C                     __ptext342:	
  1175 ;; =============== function _main ends ============
  1176                           
  1177                           
  1178 ;; *************** function _lcd_init *****************
  1179 ;; Defined at:
  1180 ;;		line 193 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;		None
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  init_value      1    0        unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;		None               void
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0, pclath, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 17F/0
  1191 ;;		On exit  : 17F/0
  1192 ;;		Unchanged: FFE80/0
  1193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1194 ;;      Params:         0       0       0       0       0
  1195 ;;      Locals:         1       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0
  1197 ;;      Totals:         1       0       0       0       0
  1198 ;;Total ram usage:        1 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; Hardware stack levels required when called:    4
  1201 ;; This function calls:
  1202 ;;		_pause
  1203 ;;		_lcd_write
  1204 ;;		_lcd_clear
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209  072C                     _lcd_init:	
  1210  072C  300F               	movlw	15
  1211                           
  1212                           ;SRPROG2.c: 198: RC3 = 0;
  1213                           
  1214                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1215  072D  1187               	bcf	7,3
  1216                           
  1217                           ;SRPROG2.c: 199: RC0 = 0;
  1218  072E  1007               	bcf	7,0
  1219                           
  1220                           ;SRPROG2.c: 200: RC4 = 0;
  1221  072F  1207               	bcf	7,4
  1222                           
  1223                           ;SRPROG2.c: 202: pause(15);
  1224  0730  00F0               	movwf	?_pause
  1225  0731  01F1               	clrf	?_pause+1
  1226  0732  2762  120A  118A   	fcall	_pause
  1227                           
  1228                           ;SRPROG2.c: 203: PORTD = init_value;
  1229  0735  3003               	movlw	3
  1230  0736  27A4               	call	PL5	;select bank 0
  1231  0737  0088               	movwf	8	;volatile
  1232  0738  300A               	movlw	10
  1233                           
  1234                           ;SRPROG2.c: 204: ((RC0 = 1),(RC0=0));
  1235  0739  1407               	bsf	7,0
  1236  073A  1007               	bcf	7,0
  1237                           
  1238                           ;SRPROG2.c: 205: pause(10);
  1239  073B  00F0               	movwf	?_pause
  1240  073C  01F1               	clrf	?_pause+1
  1241  073D  2762  120A  118A   	fcall	_pause
  1242                           
  1243                           ;SRPROG2.c: 206: ((RC0 = 1),(RC0=0));
  1244                           
  1245                           ;SRPROG2.c: 207: pause(10);
  1246  0740  279C  120A  118A   	fcall	PL2	;call to abstracted procedure
  1247  0743  2762  120A  118A   	fcall	_pause
  1248                           
  1249                           ;SRPROG2.c: 208: ((RC0 = 1),(RC0=0));
  1250                           
  1251                           ;SRPROG2.c: 209: pause(10);
  1252  0746  279C  120A  118A   	fcall	PL2	;call to abstracted procedure
  1253  0749  2762  120A  118A   	fcall	_pause
  1254                           
  1255                           ;SRPROG2.c: 210: PORTD= 2;
  1256  074C  3002               	movlw	2
  1257  074D  27A4               	call	PL5	;select bank 0
  1258  074E  0088               	movwf	8	;volatile
  1259  074F  3028               	movlw	40
  1260                           
  1261                           ;SRPROG2.c: 211: ((RC0 = 1),(RC0=0));
  1262  0750  1407               	bsf	7,0
  1263  0751  1007               	bcf	7,0
  1264                           
  1265                           ;SRPROG2.c: 213: lcd_write(0x28);
  1266  0752  2773  120A  118A   	fcall	_lcd_write
  1267                           
  1268                           ;SRPROG2.c: 214: lcd_write(0x0C);
  1269  0755  300C               	movlw	12
  1270  0756  2773  120A  118A   	fcall	_lcd_write
  1271                           
  1272                           ;SRPROG2.c: 215: lcd_write(0x0F);
  1273  0759  300F               	movlw	15
  1274  075A  2773  120A  118A   	fcall	_lcd_write
  1275                           
  1276                           ;SRPROG2.c: 216: lcd_clear();
  1277  075D  2793  120A  118A   	fcall	_lcd_clear
  1278                           
  1279                           ;SRPROG2.c: 217: lcd_write(0x06);
  1280  0760  3006               	movlw	6
  1281  0761  2F73               	ljmp	_lcd_write
  1282  0762                     __end_of_lcd_init:	
  1283  0762                     __ptext350:	
  1284 ;; =============== function __doprnt ends ============
  1285                           
  1286                           
  1287 ;; *************** function _pause *****************
  1288 ;; Defined at:
  1289 ;;		line 220 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;  usvalue         2    0[COMMON] unsigned short 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  x               2    2[COMMON] unsigned short 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;		None               void
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0, pclath, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: FFF9F/0
  1302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1303 ;;      Params:         2       0       0       0       0
  1304 ;;      Locals:         2       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0
  1306 ;;      Totals:         4       0       0       0       0
  1307 ;;Total ram usage:        4 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    1
  1310 ;; This function calls:
  1311 ;;		_msecbase
  1312 ;; This function is called by:
  1313 ;;		_lcd_write
  1314 ;;		_lcd_clear
  1315 ;;		_lcd_init
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318  0762                     _pause:	
  1319  0762                     l3124:	
  1320                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
  1321                           
  1322                           
  1323                           ;SRPROG2.c: 221: unsigned short x;
  1324                           ;SRPROG2.c: 222: for (x=0; x<=usvalue; x++)
  1325  0762  01F2               	clrf	pause@x
  1326  0763  01F3               	clrf	pause@x+1
  1327  0764                     l3130:	
  1328  0764  0873               	movf	pause@x+1,w
  1329  0765  0271               	subwf	pause@usvalue+1,w
  1330  0766  1D03               	skipz
  1331  0767  2F6A               	goto	u635
  1332  0768  0872               	movf	pause@x,w
  1333  0769  0270               	subwf	pause@usvalue,w
  1334  076A                     u635:	
  1335  076A  1C03               	btfss	3,0
  1336  076B  0008               	return
  1337                           
  1338                           ;SRPROG2.c: 223: {
  1339                           ;SRPROG2.c: 224: msecbase();
  1340  076C  2786  120A  118A   	fcall	_msecbase
  1341  076F  0AF2               	incf	pause@x,f
  1342  0770  1903               	skipnz
  1343  0771  0AF3               	incf	pause@x+1,f
  1344  0772  2F64               	goto	l3130
  1345  0773                     __end_of_pause:	
  1346  0773                     __ptext346:	
  1347 ;; =============== function _lcd_goto ends ============
  1348                           
  1349                           
  1350 ;; *************** function _lcd_write *****************
  1351 ;; Defined at:
  1352 ;;		line 163 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  c               1    wreg     unsigned char 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  c               1    4[COMMON] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;		None               void
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0, pclath, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 60/0
  1364 ;;		Unchanged: FFF9F/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1366 ;;      Params:         0       0       0       0       0
  1367 ;;      Locals:         1       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0
  1369 ;;      Totals:         1       0       0       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    2
  1373 ;; This function calls:
  1374 ;;		_pause
  1375 ;; This function is called by:
  1376 ;;		_lcd_clear
  1377 ;;		_lcd_puts
  1378 ;;		_lcd_goto
  1379 ;;		_lcd_init
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382  0773                     _lcd_write:	
  1383                           
  1384                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1385                           ;lcd_write@c stored from wreg
  1386  0773  00F4               	movwf	lcd_write@c
  1387                           
  1388                           ;SRPROG2.c: 164: pause(1);
  1389  0774  01F0               	clrf	?_pause
  1390  0775  0AF0               	incf	?_pause,f
  1391  0776  01F1               	clrf	?_pause+1
  1392  0777  2762  120A  118A   	fcall	_pause
  1393                           
  1394                           ;SRPROG2.c: 165: PORTD = ( ( c >> 4) & 0x0F);
  1395  077A  0E74               	swapf	lcd_write@c,w
  1396  077B  390F               	andlw	15
  1397  077C  27A4               	call	PL5	;select bank 0
  1398  077D  0088               	movwf	8	;volatile
  1399                           
  1400                           ;SRPROG2.c: 166: ((RC0 = 1),(RC0=0));
  1401  077E  1407               	bsf	7,0
  1402  077F  1007               	bcf	7,0
  1403                           
  1404                           ;SRPROG2.c: 167: PORTD = (c & 0x0F);
  1405  0780  0874               	movf	lcd_write@c,w
  1406  0781  390F               	andlw	15
  1407  0782  0088               	movwf	8	;volatile
  1408                           
  1409                           ;SRPROG2.c: 168: ((RC0 = 1),(RC0=0));
  1410  0783  1407               	bsf	7,0
  1411  0784  1007               	bcf	7,0
  1412  0785  0008               	return
  1413  0786                     __end_of_lcd_write:	
  1414  0786                     __ptext356:	
  1415 ;; =============== function _isdigit ends ============
  1416                           
  1417                           
  1418 ;; *************** function _msecbase *****************
  1419 ;; Defined at:
  1420 ;;		line 228 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;		None               void
  1427 ;; Registers used:
  1428 ;;		wreg
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: FFF9F/0
  1433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1434 ;;      Params:         0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_pause
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446  0786                     _msecbase:	
  1447                           
  1448                           ;SRPROG2.c: 229: OPTION_REG = 0b11010010;
  1449                           
  1450                           ; Regs used in _msecbase: [wreg]
  1451  0786  30D2               	movlw	210
  1452  0787  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0788  1303               	bcf	3,6	;RP1=0, select bank1
  1454  0789  0081               	movwf	1	;volatile
  1455                           
  1456                           ;SRPROG2.c: 230: TMR0 = 0x0E;
  1457  078A  300E               	movlw	14
  1458  078B  1283               	bcf	3,5	;RP0=0, select bank0
  1459  078C  0081               	movwf	1	;volatile
  1460                           
  1461                           ;SRPROG2.c: 231: TMR0 = 0x8E;
  1462  078D  308E               	movlw	142
  1463  078E  0081               	movwf	1	;volatile
  1464  078F                     l1116:	
  1465                           ;SRPROG2.c: 232: while(!T0IF);
  1466                           
  1467  078F  1D0B               	btfss	11,2
  1468  0790  2F8F               	goto	l1116
  1469                           
  1470                           ;SRPROG2.c: 233: T0IF = 0;
  1471  0791  110B               	bcf	11,2
  1472  0792  0008               	return
  1473  0793                     __end_of_msecbase:	
  1474  0793                     __ptext343:	
  1475 ;; =============== function _lcd_init ends ============
  1476                           
  1477                           
  1478 ;; *************** function _lcd_clear *****************
  1479 ;; Defined at:
  1480 ;;		line 171 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;		None               void
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0, pclath, cstack
  1489 ;; Tracked objects:
  1490 ;;		On entry : 60/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: FFF9F/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1494 ;;      Params:         0       0       0       0       0
  1495 ;;      Locals:         0       0       0       0       0
  1496 ;;      Temps:          0       0       0       0       0
  1497 ;;      Totals:         0       0       0       0       0
  1498 ;;Total ram usage:        0 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    3
  1501 ;; This function calls:
  1502 ;;		_lcd_write
  1503 ;;		_pause
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;;		_lcd_init
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509  0793                     _lcd_clear:	
  1510  0793  3001               	movlw	1
  1511                           
  1512                           ;SRPROG2.c: 172: RC3 = 0;
  1513                           
  1514                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1515  0794  1187               	bcf	7,3
  1516                           
  1517                           ;SRPROG2.c: 173: lcd_write(0x01);
  1518  0795  2773  120A  118A   	fcall	_lcd_write
  1519                           
  1520                           ;SRPROG2.c: 174: pause (2);
  1521  0798  3002               	movlw	2
  1522  0799  00F0               	movwf	?_pause
  1523  079A  01F1               	clrf	?_pause+1
  1524  079B  2F62               	ljmp	l3124
  1525  079C                     __end_of_lcd_clear:	
  1526  079C                     PL2:	
  1527  079C  1283               	bcf	3,5	;RP0=0, select bank0
  1528  079D  1303               	bcf	3,6	;RP1=0, select bank0
  1529  079E  300A               	movlw	10
  1530  079F  1407               	bsf	7,0
  1531  07A0  1007               	bcf	7,0
  1532  07A1  00F0               	movwf	?_pause
  1533  07A2  01F1               	clrf	?_pause+1
  1534  07A3  0008               	return
  1535  07A4                     PL5:	
  1536  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1537  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  1538  07A6  0008               	return
  1539                           
  1540                           	psect	text347
  1541  05B4                     __ptext347:	
  1542 ;; =============== function _lcd_write ends ============
  1543                           
  1544                           
  1545 ;; *************** function _printf *****************
  1546 ;; Defined at:
  1547 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\printf.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  f               1    wreg     PTR const unsigned char 
  1550 ;;		 -> STR_4(5), 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1553 ;;		 -> STR_4(5), 
  1554 ;;  pb              2   14[BANK0 ] struct __prbuf
  1555 ;;  ap              1   13[BANK0 ] PTR void [1]
  1556 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  2   10[BANK0 ] int 
  1559 ;; Registers used:
  1560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 160/0
  1563 ;;		On exit  : 60/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1566 ;;      Params:         0       2       0       0       0
  1567 ;;      Locals:         0       4       0       0       0
  1568 ;;      Temps:          0       0       0       0       0
  1569 ;;      Totals:         0       6       0       0       0
  1570 ;;Total ram usage:        6 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    2
  1573 ;; This function calls:
  1574 ;;		__doprnt
  1575 ;; This function is called by:
  1576 ;;		_main
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579  05B4                     _printf:	
  1580                           
  1581                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1582                           ;printf@f stored from wreg
  1583  05B4  00AC               	movwf	printf@f
  1584  05B5  3001               	movlw	(fp__putch-fpbase)& (0+255)
  1585  05B6  01AE               	clrf	printf@pb
  1586  05B7  00AF               	movwf	printf@pb+1
  1587  05B8  302A               	movlw	?_printf& (0+255)
  1588  05B9  00AD               	movwf	printf@ap
  1589                           
  1590                           ;	Return value of _printf is never used
  1591  05BA  082C               	movf	printf@f,w
  1592  05BB  00FC               	movwf	?__doprnt
  1593  05BC  302D               	movlw	printf@ap& (0+255)
  1594  05BD  00FD               	movwf	?__doprnt+1
  1595  05BE  302E               	movlw	printf@pb& (0+255)
  1596  05BF  2DD0               	ljmp	__doprnt
  1597  05C0                     __end_of_printf:	
  1598  05C0                     __ptext348:	
  1599 ;; =============== function _printf ends ============
  1600                           
  1601                           
  1602 ;; *************** function _sprintf *****************
  1603 ;; Defined at:
  1604 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\sprintf.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  wh              1    wreg     PTR unsigned char 
  1607 ;;		 -> carac1(4), 
  1608 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  1609 ;;		 -> STR_3(3), 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  wh              1   13[BANK0 ] PTR unsigned char 
  1612 ;;		 -> carac1(4), 
  1613 ;;  pb              2   15[BANK0 ] struct __prbuf
  1614 ;;  ap              1   14[BANK0 ] PTR void [1]
  1615 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  2   10[BANK0 ] int 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 60/0
  1622 ;;		On exit  : 160/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         0       3       0       0       0
  1626 ;;      Locals:         0       4       0       0       0
  1627 ;;      Temps:          0       0       0       0       0
  1628 ;;      Totals:         0       7       0       0       0
  1629 ;;Total ram usage:        7 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    2
  1632 ;; This function calls:
  1633 ;;		__doprnt
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638  05C0                     _sprintf:	
  1639                           
  1640                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1641                           ;sprintf@wh stored from wreg
  1642  05C0  00AD               	movwf	sprintf@wh
  1643  05C1  00AF               	movwf	sprintf@pb
  1644  05C2  302B               	movlw	(?_sprintf+1)& (0+255)
  1645  05C3  01B0               	clrf	sprintf@pb+1
  1646  05C4  00AE               	movwf	sprintf@ap
  1647  05C5  082A               	movf	sprintf@f,w
  1648  05C6  00FC               	movwf	?__doprnt
  1649  05C7  302E               	movlw	sprintf@ap& (0+255)
  1650  05C8  00FD               	movwf	?__doprnt+1
  1651  05C9  302F               	movlw	sprintf@pb& (0+255)
  1652  05CA  25D0               	fcall	__doprnt
  1653  05CB  082F               	movf	sprintf@pb,w
  1654  05CC  0084               	movwf	4
  1655  05CD  1383               	bcf	3,7	;select IRP bank0
  1656  05CE  0180               	clrf	0
  1657  05CF  0008               	return
  1658  05D0                     __end_of_sprintf:	
  1659  05D0                     __ptext349:	
  1660 ;; =============== function _sprintf ends ============
  1661                           
  1662                           
  1663 ;; *************** function __doprnt *****************
  1664 ;; Defined at:
  1665 ;;		line 455 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  pb              1    wreg     PTR struct __prbuf
  1668 ;;		 -> sprintf@pb(2), printf@pb(2), 
  1669 ;;  f               1   12[COMMON] PTR const unsigned char 
  1670 ;;		 -> STR_4(5), STR_3(3), 
  1671 ;;  ap              1   13[COMMON] PTR PTR void 
  1672 ;;		 -> sprintf@ap(1), printf@ap(1), 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  pb              1    9[BANK0 ] PTR struct __prbuf
  1675 ;;		 -> sprintf@pb(2), printf@pb(2), 
  1676 ;;  _val            4    4[BANK0 ] struct .
  1677 ;;  c               1    8[BANK0 ] char 
  1678 ;;  prec            1    3[BANK0 ] char 
  1679 ;;  flag            1    2[BANK0 ] unsigned char 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  2   12[COMMON] int 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 60/0
  1686 ;;		On exit  : 60/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1689 ;;      Params:         2       0       0       0       0
  1690 ;;      Locals:         0       8       0       0       0
  1691 ;;      Temps:          0       2       0       0       0
  1692 ;;      Totals:         2      10       0       0       0
  1693 ;;Total ram usage:       12 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    1
  1696 ;; This function calls:
  1697 ;;		Absolute function
  1698 ;;		_putch
  1699 ;;		___lwdiv
  1700 ;;		___lwmod
  1701 ;; This function is called by:
  1702 ;;		_printf
  1703 ;;		_sprintf
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706  05D0                     __doprnt:	
  1707                           
  1708                           ; Regs used in __doprnt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1709                           ;__doprnt@pb stored from wreg
  1710  05D0  00A9               	movwf	__doprnt@pb
  1711  05D1                     l3194:	
  1712  05D1  087C               	movf	__doprnt@f,w
  1713  05D2  0AFC               	incf	__doprnt@f,f
  1714  05D3  0084               	movwf	4
  1715  05D4  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1716  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  1717  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  1718  05DB  00A8               	movwf	__doprnt@c
  1719  05DC  08A8               	movf	__doprnt@c,f
  1720  05DD  1903               	btfsc	3,2
  1721  05DE  2EA2               	goto	l3196
  1722  05DF  0828               	movf	__doprnt@c,w
  1723  05E0  3A25               	xorlw	37
  1724  05E1  1903               	skipnz
  1725  05E2  2DF9               	goto	l3144
  1726  05E3  0829               	movf	__doprnt@pb,w
  1727  05E4  3E01               	addlw	1
  1728  05E5  0084               	movwf	4
  1729  05E6  1383               	bcf	3,7	;select IRP bank0
  1730  05E7  0880               	movf	0,f
  1731  05E8  1903               	skipnz
  1732  05E9  2DF2               	goto	l3140
  1733  05EA  0828               	movf	__doprnt@c,w
  1734  05EB  26FA               	fcall	PL4	;call to abstracted procedure
  1735  05EC  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1736  05F1  2DD1               	goto	l3194
  1737  05F2                     l3140:	
  1738  05F2  0829               	movf	__doprnt@pb,w
  1739  05F3  0084               	movwf	4
  1740  05F4  0800               	movf	0,w
  1741  05F5  26F3  120A  118A   	fcall	PL3	;call to abstracted procedure
  1742  05F8  2DD1               	goto	l3194
  1743  05F9                     l3144:	
  1744  05F9  01A2               	clrf	__doprnt@flag
  1745  05FA  087C               	movf	__doprnt@f,w
  1746  05FB  0AFC               	incf	__doprnt@f,f
  1747  05FC  0084               	movwf	4
  1748  05FD  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1749  0602  00A8               	movwf	__doprnt@c
  1750                           
  1751                           ; Switch size 1, requested type "space"
  1752                           ; Number of cases is 3, Range of values is 0 to 105
  1753                           ; switch strategies available:
  1754                           ; Name         Instructions Cycles
  1755                           ; simple_byte           10     6 (average)
  1756                           ; jumptable            260     6 (fixed)
  1757                           ; rangetable           110     6 (fixed)
  1758                           ; spacedrange          218     9 (fixed)
  1759                           ; locatedrange         106     3 (fixed)
  1760                           ;	Chosen strategy is simple_byte
  1761  0603  3A00               	xorlw	0	; case 0
  1762  0604  1903               	skipnz
  1763  0605  2EA2               	goto	l3196
  1764  0606  3A64               	xorlw	100	; case 100
  1765  0607  1903               	skipnz
  1766  0608  2E0D               	goto	l3150
  1767  0609  3A0D               	xorlw	13	; case 105
  1768  060A  1903               	skipnz
  1769  060B  2E0D               	goto	l3150
  1770  060C  2DD1               	goto	l3194
  1771  060D                     l3150:	
  1772  060D  087D               	movf	__doprnt@ap,w
  1773  060E  0084               	movwf	4
  1774  060F  1383               	bcf	3,7	;select IRP bank0
  1775  0610  0800               	movf	0,w
  1776  0611  00A0               	movwf	??__doprnt
  1777  0612  3002               	movlw	2
  1778  0613  0780               	addwf	0,f
  1779  0614  0820               	movf	??__doprnt,w
  1780  0615  0084               	movwf	4
  1781  0616  0800               	movf	0,w
  1782  0617  00A4               	movwf	__doprnt@_val
  1783  0618  0A84               	incf	4,f
  1784  0619  0800               	movf	0,w
  1785  061A  00A5               	movwf	__doprnt@_val+1
  1786  061B  1FA5               	btfss	__doprnt@_val+1,7
  1787  061C  2E24               	goto	l3158
  1788  061D  3003               	movlw	3
  1789  061E  04A2               	iorwf	__doprnt@flag,f
  1790  061F  09A4               	comf	__doprnt@_val,f
  1791  0620  09A5               	comf	__doprnt@_val+1,f
  1792  0621  0AA4               	incf	__doprnt@_val,f
  1793  0622  1903               	skipnz
  1794  0623  0AA5               	incf	__doprnt@_val+1,f
  1795  0624                     l3158:	
  1796  0624  01A8               	clrf	__doprnt@c
  1797  0625  0AA8               	incf	__doprnt@c,f
  1798  0626                     l3162:	
  1799  0626  1003               	clrc
  1800  0627  0D28               	rlf	__doprnt@c,w
  1801  0628  3E01               	addlw	low (_dpowers-__stringbase)
  1802  0629  0084               	movwf	4
  1803  062A  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1804  062F  00A0               	movwf	??__doprnt
  1805  0630  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1806  0635  00A1               	movwf	??__doprnt+1
  1807  0636  0225               	subwf	__doprnt@_val+1,w
  1808  0637  1D03               	skipz
  1809  0638  2E3B               	goto	u675
  1810  0639  0820               	movf	??__doprnt,w
  1811  063A  0224               	subwf	__doprnt@_val,w
  1812  063B                     u675:	
  1813  063B  1C03               	btfss	3,0
  1814  063C  2E42               	goto	l3170
  1815  063D  0AA8               	incf	__doprnt@c,f
  1816  063E  0828               	movf	__doprnt@c,w
  1817  063F  3A05               	xorlw	5
  1818  0640  1D03               	skipz
  1819  0641  2E26               	goto	l3162
  1820  0642                     l3170:	
  1821  0642  0822               	movf	__doprnt@flag,w
  1822  0643  3903               	andlw	3
  1823  0644  1903               	btfsc	3,2
  1824  0645  2E5E               	goto	l3180
  1825  0646  0829               	movf	__doprnt@pb,w
  1826  0647  3E01               	addlw	1
  1827  0648  0084               	movwf	4
  1828  0649  1383               	bcf	3,7	;select IRP bank0
  1829  064A  0880               	movf	0,f
  1830  064B  1903               	skipnz
  1831  064C  2E55               	goto	l3176
  1832  064D  302D               	movlw	45
  1833  064E  26FA               	fcall	PL4	;call to abstracted procedure
  1834  064F  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1835  0654  2E5E               	goto	l3180
  1836  0655                     l3176:	
  1837  0655  0829               	movf	__doprnt@pb,w
  1838  0656  0084               	movwf	4
  1839  0657  0800               	movf	0,w
  1840  0658  0084               	movwf	4
  1841  0659  302D               	movlw	45
  1842  065A  0080               	movwf	0
  1843  065B  0829               	movf	__doprnt@pb,w
  1844  065C  0084               	movwf	4
  1845  065D  0A80               	incf	0,f
  1846  065E                     l3180:	
  1847  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1848  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0660  0828               	movf	__doprnt@c,w
  1850  0661  00A3               	movwf	__doprnt@prec
  1851  0662  2E9C               	goto	l3192
  1852  0663                     l3182:	
  1853  0663  300A               	movlw	10
  1854  0664  00F7               	movwf	?___lwmod
  1855  0665  01F8               	clrf	?___lwmod+1
  1856  0666  1003               	clrc
  1857  0667  0D23               	rlf	__doprnt@prec,w
  1858  0668  3E01               	addlw	low (_dpowers-__stringbase)
  1859  0669  0084               	movwf	4
  1860  066A  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1861  066F  00F0               	movwf	?___lwdiv
  1862  0670  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1863  0675  00F1               	movwf	?___lwdiv+1
  1864  0676  0825               	movf	__doprnt@_val+1,w
  1865  0677  00F3               	movwf	?___lwdiv+3
  1866  0678  0824               	movf	__doprnt@_val,w
  1867  0679  00F2               	movwf	?___lwdiv+2
  1868  067A  26A5  120A  118A   	fcall	___lwdiv
  1869  067D  0871               	movf	?___lwdiv+1,w
  1870  067E  00FA               	movwf	?___lwmod+3
  1871  067F  0870               	movf	?___lwdiv,w
  1872  0680  00F9               	movwf	?___lwmod+2
  1873  0681  26CF  120A  118A   	fcall	___lwmod
  1874  0684  0877               	movf	?___lwmod,w
  1875  0685  3E30               	addlw	48
  1876  0686  00A8               	movwf	__doprnt@c
  1877  0687  0829               	movf	__doprnt@pb,w
  1878  0688  3E01               	addlw	1
  1879  0689  0084               	movwf	4
  1880  068A  1383               	bcf	3,7	;select IRP bank0
  1881  068B  0880               	movf	0,f
  1882  068C  1903               	skipnz
  1883  068D  2E96               	goto	l3188
  1884  068E  0828               	movf	__doprnt@c,w
  1885  068F  26FA               	fcall	PL4	;call to abstracted procedure
  1886  0690  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1887  0695  2E9C               	goto	l3192
  1888  0696                     l3188:	
  1889  0696  0829               	movf	__doprnt@pb,w
  1890  0697  0084               	movwf	4
  1891  0698  0800               	movf	0,w
  1892  0699  26F3  120A  118A   	fcall	PL3	;call to abstracted procedure
  1893  069C                     l3192:	
  1894  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1895  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1896  069E  03A3               	decf	__doprnt@prec,f
  1897  069F  0F23               	incfsz	__doprnt@prec,w
  1898  06A0  2E63               	goto	l3182
  1899  06A1  2DD1               	goto	l3194
  1900  06A2                     l3196:	
  1901  06A2  01FC               	clrf	?__doprnt
  1902  06A3  01FD               	clrf	?__doprnt+1
  1903  06A4  0008               	return
  1904  06A5                     __end_of__doprnt:	
  1905  06A5                     __ptext353:	
  1906 ;; =============== function ___lwmod ends ============
  1907                           
  1908                           
  1909 ;; *************** function ___lwdiv *****************
  1910 ;; Defined at:
  1911 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwdiv.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  divisor         2    0[COMMON] unsigned int 
  1914 ;;  dividend        2    2[COMMON] unsigned int 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  quotient        2    4[COMMON] unsigned int 
  1917 ;;  counter         1    6[COMMON] unsigned char 
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  2    0[COMMON] unsigned int 
  1920 ;; Registers used:
  1921 ;;		wreg, status,2, status,0
  1922 ;; Tracked objects:
  1923 ;;		On entry : 60/0
  1924 ;;		On exit  : 60/0
  1925 ;;		Unchanged: FFF9F/0
  1926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1927 ;;      Params:         4       0       0       0       0
  1928 ;;      Locals:         3       0       0       0       0
  1929 ;;      Temps:          0       0       0       0       0
  1930 ;;      Totals:         7       0       0       0       0
  1931 ;;Total ram usage:        7 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_main
  1937 ;;		__doprnt
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940  06A5                     ___lwdiv:	
  1941                           
  1942                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1943  06A5  01F4               	clrf	___lwdiv@quotient
  1944  06A6  01F5               	clrf	___lwdiv@quotient+1
  1945  06A7  0871               	movf	___lwdiv@divisor+1,w
  1946  06A8  0470               	iorwf	___lwdiv@divisor,w
  1947  06A9  1903               	skipnz
  1948  06AA  2ECA               	goto	l3066
  1949  06AB  01F6               	clrf	___lwdiv@counter
  1950  06AC                     L4:	
  1951  06AC  0AF6               	incf	___lwdiv@counter,f
  1952  06AD  1BF1               	btfsc	___lwdiv@divisor+1,7
  1953  06AE  2EB3               	goto	l3054
  1954  06AF  1003               	clrc
  1955  06B0  0DF0               	rlf	___lwdiv@divisor,f
  1956  06B1  0DF1               	rlf	___lwdiv@divisor+1,f
  1957  06B2  2EAC               	goto	L4
  1958  06B3                     l3054:	
  1959  06B3  1003               	clrc
  1960  06B4  0DF4               	rlf	___lwdiv@quotient,f
  1961  06B5  0DF5               	rlf	___lwdiv@quotient+1,f
  1962  06B6  0871               	movf	___lwdiv@divisor+1,w
  1963  06B7  0273               	subwf	___lwdiv@dividend+1,w
  1964  06B8  1D03               	skipz
  1965  06B9  2EBC               	goto	u515
  1966  06BA  0870               	movf	___lwdiv@divisor,w
  1967  06BB  0272               	subwf	___lwdiv@dividend,w
  1968  06BC                     u515:	
  1969  06BC  1C03               	skipc
  1970  06BD  2EC6               	goto	L5
  1971  06BE  0870               	movf	___lwdiv@divisor,w
  1972  06BF  02F2               	subwf	___lwdiv@dividend,f
  1973  06C0  0871               	movf	___lwdiv@divisor+1,w
  1974  06C1  1C03               	skipc
  1975  06C2  03F3               	decf	___lwdiv@dividend+1,f
  1976  06C3  02F3               	subwf	___lwdiv@dividend+1,f
  1977  06C4  1474               	bsf	___lwdiv@quotient,0
  1978  06C5  1003               	clrc
  1979  06C6                     L5:	
  1980  06C6  0CF1               	rrf	___lwdiv@divisor+1,f
  1981  06C7  0CF0               	rrf	___lwdiv@divisor,f
  1982  06C8  0BF6               	decfsz	___lwdiv@counter,f
  1983  06C9  2EB3               	goto	l3054
  1984  06CA                     l3066:	
  1985  06CA  0875               	movf	___lwdiv@quotient+1,w
  1986  06CB  00F1               	movwf	?___lwdiv+1
  1987  06CC  0874               	movf	___lwdiv@quotient,w
  1988  06CD  00F0               	movwf	?___lwdiv
  1989  06CE  0008               	return
  1990  06CF                     __end_of___lwdiv:	
  1991  06CF                     __ptext352:	
  1992 ;; =============== function _atoi ends ============
  1993                           
  1994                           
  1995 ;; *************** function ___lwmod *****************
  1996 ;; Defined at:
  1997 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwmod.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  divisor         2    7[COMMON] unsigned int 
  2000 ;;  dividend        2    9[COMMON] unsigned int 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  counter         1   11[COMMON] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  2    7[COMMON] unsigned int 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0
  2007 ;; Tracked objects:
  2008 ;;		On entry : 60/0
  2009 ;;		On exit  : 60/0
  2010 ;;		Unchanged: FFF9F/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2012 ;;      Params:         4       0       0       0       0
  2013 ;;      Locals:         1       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0
  2015 ;;      Totals:         5       0       0       0       0
  2016 ;;Total ram usage:        5 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		__doprnt
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024  06CF                     ___lwmod:	
  2025                           
  2026                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2027  06CF  0878               	movf	___lwmod@divisor+1,w
  2028  06D0  0477               	iorwf	___lwmod@divisor,w
  2029  06D1  1903               	skipnz
  2030  06D2  2EEE               	goto	l3086
  2031  06D3  01FB               	clrf	___lwmod@counter
  2032  06D4                     L2:	
  2033  06D4  0AFB               	incf	___lwmod@counter,f
  2034  06D5  1BF8               	btfsc	___lwmod@divisor+1,7
  2035  06D6  2EDB               	goto	l3078
  2036  06D7  1003               	clrc
  2037  06D8  0DF7               	rlf	___lwmod@divisor,f
  2038  06D9  0DF8               	rlf	___lwmod@divisor+1,f
  2039  06DA  2ED4               	goto	L2
  2040  06DB                     l3078:	
  2041  06DB  0878               	movf	___lwmod@divisor+1,w
  2042  06DC  027A               	subwf	___lwmod@dividend+1,w
  2043  06DD  1D03               	skipz
  2044  06DE  2EE1               	goto	u555
  2045  06DF  0877               	movf	___lwmod@divisor,w
  2046  06E0  0279               	subwf	___lwmod@dividend,w
  2047  06E1                     u555:	
  2048  06E1  1C03               	skipc
  2049  06E2  2EEA               	goto	L3
  2050  06E3  0877               	movf	___lwmod@divisor,w
  2051  06E4  02F9               	subwf	___lwmod@dividend,f
  2052  06E5  0878               	movf	___lwmod@divisor+1,w
  2053  06E6  1C03               	skipc
  2054  06E7  03FA               	decf	___lwmod@dividend+1,f
  2055  06E8  02FA               	subwf	___lwmod@dividend+1,f
  2056  06E9  1003               	clrc
  2057  06EA                     L3:	
  2058  06EA  0CF8               	rrf	___lwmod@divisor+1,f
  2059  06EB  0CF7               	rrf	___lwmod@divisor,f
  2060  06EC  0BFB               	decfsz	___lwmod@counter,f
  2061  06ED  2EDB               	goto	l3078
  2062  06EE                     l3086:	
  2063  06EE  087A               	movf	___lwmod@dividend+1,w
  2064  06EF  00F8               	movwf	?___lwmod+1
  2065  06F0  0879               	movf	___lwmod@dividend,w
  2066  06F1  00F7               	movwf	?___lwmod
  2067  06F2  0008               	return
  2068  06F3                     __end_of___lwmod:	
  2069  06F3                     PL3:	
  2070  06F3  0084               	movwf	4
  2071  06F4  0828               	movf	__doprnt@c,w
  2072  06F5  0080               	movwf	0
  2073  06F6  0829               	movf	__doprnt@pb,w
  2074  06F7  0084               	movwf	4
  2075  06F8  0A80               	incf	0,f
  2076  06F9  0008               	return
  2077  06FA                     PL4:	
  2078  06FA  00F0               	movwf	?_putch
  2079  06FB  0829               	movf	__doprnt@pb,w
  2080  06FC  3E01               	addlw	1
  2081  06FD  0084               	movwf	4
  2082  06FE  0800               	movf	0,w
  2083  06FF  0008               	return
  2084                           
  2085                           	psect	text351
  2086  0439                     __ptext351:	
  2087 ;; =============== function _pause ends ============
  2088                           
  2089                           
  2090 ;; *************** function _atoi *****************
  2091 ;; Defined at:
  2092 ;;		line 6 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\atoi.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  s               1    wreg     PTR const unsigned char 
  2095 ;;		 -> carac1(4), 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  s               1   13[COMMON] PTR const unsigned char 
  2098 ;;		 -> carac1(4), 
  2099 ;;  a               2   11[COMMON] int 
  2100 ;;  sign            1   10[COMMON] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  2    6[COMMON] int 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 160/0
  2107 ;;		On exit  : 160/0
  2108 ;;		Unchanged: FFE9F/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         2       0       0       0       0
  2111 ;;      Locals:         4       0       0       0       0
  2112 ;;      Temps:          2       0       0       0       0
  2113 ;;      Totals:         8       0       0       0       0
  2114 ;;Total ram usage:        8 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    1
  2117 ;; This function calls:
  2118 ;;		___wmul
  2119 ;;		_isdigit
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124  0439                     _atoi:	
  2125                           
  2126                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2127                           ;atoi@s stored from wreg
  2128  0439  00FD               	movwf	atoi@s
  2129  043A                     l3094:	
  2130  043A  087D               	movf	atoi@s,w
  2131  043B  0084               	movwf	4
  2132  043C  0800               	movf	0,w
  2133  043D  3A20               	xorlw	32
  2134  043E  1D03               	btfss	3,2
  2135  043F  2C42               	goto	l3096
  2136  0440                     l3092:	
  2137  0440  0AFD               	incf	atoi@s,f
  2138  0441  2C3A               	goto	l3094
  2139  0442                     l3096:	
  2140  0442  087D               	movf	atoi@s,w
  2141  0443  0084               	movwf	4
  2142  0444  0800               	movf	0,w
  2143  0445  3A09               	xorlw	9
  2144  0446  1903               	skipnz
  2145  0447  2C40               	goto	l3092
  2146  0448  01FB               	clrf	atoi@a
  2147  0449  01FC               	clrf	atoi@a+1
  2148  044A  01FA               	clrf	atoi@sign
  2149  044B  087D               	movf	atoi@s,w
  2150  044C  0084               	movwf	4
  2151  044D  0800               	movf	0,w
  2152  044E  3A2D               	xorlw	45
  2153  044F  1D03               	skipz
  2154  0450  2C53               	goto	l3104
  2155  0451  0AFA               	incf	atoi@sign,f
  2156  0452  2C7D               	goto	l3106
  2157  0453                     l3104:	
  2158  0453  087D               	movf	atoi@s,w
  2159  0454  0084               	movwf	4
  2160  0455  0800               	movf	0,w
  2161  0456  3A2B               	xorlw	43
  2162  0457  1903               	btfsc	3,2
  2163  0458  2C7D               	goto	l3106
  2164  0459                     l3112:	
  2165  0459  087D               	movf	atoi@s,w
  2166  045A  0084               	movwf	4
  2167  045B  0800               	movf	0,w
  2168  045C  2493  120A  118A   	fcall	_isdigit
  2169  045F  1C03               	btfss	3,0
  2170  0460  2C7F               	goto	l3114
  2171  0461  087D               	movf	atoi@s,w
  2172  0462  0084               	movwf	4
  2173  0463  087C               	movf	atoi@a+1,w
  2174  0464  00F1               	movwf	?___wmul+1
  2175  0465  087B               	movf	atoi@a,w
  2176  0466  00F0               	movwf	?___wmul
  2177  0467  300A               	movlw	10
  2178  0468  00F2               	movwf	?___wmul+2
  2179  0469  01F3               	clrf	?___wmul+3
  2180  046A  24A1  120A  118A   	fcall	___wmul
  2181  046D  0800               	movf	0,w
  2182  046E  0770               	addwf	?___wmul,w
  2183  046F  00F8               	movwf	??_atoi
  2184  0470  3000               	movlw	0
  2185  0471  1803               	skipnc
  2186  0472  3001               	movlw	1
  2187  0473  0771               	addwf	?___wmul+1,w
  2188  0474  00F9               	movwf	??_atoi+1
  2189  0475  0878               	movf	??_atoi,w
  2190  0476  3ED0               	addlw	208
  2191  0477  00FB               	movwf	atoi@a
  2192  0478  0879               	movf	??_atoi+1,w
  2193  0479  1803               	skipnc
  2194  047A  3E01               	addlw	1
  2195  047B  3EFF               	addlw	255
  2196  047C  00FC               	movwf	atoi@a+1
  2197  047D                     l3106:	
  2198  047D  0AFD               	incf	atoi@s,f
  2199  047E  2C59               	goto	l3112
  2200  047F                     l3114:	
  2201  047F  087A               	movf	atoi@sign,w
  2202  0480  1903               	btfsc	3,2
  2203  0481  2C8E               	goto	l3120
  2204  0482  097B               	comf	atoi@a,w
  2205  0483  00F8               	movwf	??_atoi
  2206  0484  097C               	comf	atoi@a+1,w
  2207  0485  00F9               	movwf	??_atoi+1
  2208  0486  0AF8               	incf	??_atoi,f
  2209  0487  1903               	skipnz
  2210  0488  0AF9               	incf	??_atoi+1,f
  2211  0489  0878               	movf	??_atoi,w
  2212  048A  00F6               	movwf	?_atoi
  2213  048B  0879               	movf	??_atoi+1,w
  2214  048C  00F7               	movwf	?_atoi+1
  2215  048D  0008               	return
  2216  048E                     l3120:	
  2217  048E  087C               	movf	atoi@a+1,w
  2218  048F  00F7               	movwf	?_atoi+1
  2219  0490  087B               	movf	atoi@a,w
  2220  0491  00F6               	movwf	?_atoi
  2221  0492  0008               	return
  2222  0493                     __end_of_atoi:	
  2223  0493                     __ptext355:	
  2224 ;; =============== function ___wmul ends ============
  2225                           
  2226                           
  2227 ;; *************** function _isdigit *****************
  2228 ;; Defined at:
  2229 ;;		line 13 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\isdigit.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  c               1    wreg     unsigned char 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  c               1    1[COMMON] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;		None               void
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0
  2238 ;; Tracked objects:
  2239 ;;		On entry : 160/0
  2240 ;;		On exit  : 160/0
  2241 ;;		Unchanged: FFE9F/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         0       0       0       0       0
  2244 ;;      Locals:         2       0       0       0       0
  2245 ;;      Temps:          0       0       0       0       0
  2246 ;;      Totals:         2       0       0       0       0
  2247 ;;Total ram usage:        2 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		_atoi
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255  0493                     _isdigit:	
  2256                           
  2257                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2258                           ;isdigit@c stored from wreg
  2259  0493  00F1               	movwf	isdigit@c
  2260  0494  303A               	movlw	58
  2261  0495  01F0               	clrf	_isdigit$2410
  2262  0496  0271               	subwf	isdigit@c,w
  2263  0497  1803               	skipnc
  2264  0498  2C9F               	goto	l3024
  2265  0499  3030               	movlw	48
  2266  049A  0271               	subwf	isdigit@c,w
  2267  049B  1C03               	skipc
  2268  049C  2C9F               	goto	l3024
  2269  049D  01F0               	clrf	_isdigit$2410
  2270  049E  0AF0               	incf	_isdigit$2410,f
  2271  049F                     l3024:	
  2272  049F  0C70               	rrf	_isdigit$2410,w
  2273  04A0  0008               	return
  2274  04A1                     __end_of_isdigit:	
  2275  04A1                     __ptext354:	
  2276 ;; =============== function ___lwdiv ends ============
  2277                           
  2278                           
  2279 ;; *************** function ___wmul *****************
  2280 ;; Defined at:
  2281 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  multiplier      2    0[COMMON] unsigned int 
  2284 ;;  multiplicand    2    2[COMMON] unsigned int 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  product         2    4[COMMON] unsigned int 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  2    0[COMMON] unsigned int 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0
  2291 ;; Tracked objects:
  2292 ;;		On entry : 160/0
  2293 ;;		On exit  : 160/0
  2294 ;;		Unchanged: FFE9F/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         4       0       0       0       0
  2297 ;;      Locals:         2       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0
  2299 ;;      Totals:         6       0       0       0       0
  2300 ;;Total ram usage:        6 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_atoi
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308  04A1                     ___wmul:	
  2309                           
  2310                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2311  04A1  01F4               	clrf	___wmul@product
  2312  04A2  01F5               	clrf	___wmul@product+1
  2313  04A3                     l3030:	
  2314  04A3  1C70               	btfss	___wmul@multiplier,0
  2315  04A4  2CAB               	goto	l3034
  2316  04A5  0872               	movf	___wmul@multiplicand,w
  2317  04A6  07F4               	addwf	___wmul@product,f
  2318  04A7  1803               	skipnc
  2319  04A8  0AF5               	incf	___wmul@product+1,f
  2320  04A9  0873               	movf	___wmul@multiplicand+1,w
  2321  04AA  07F5               	addwf	___wmul@product+1,f
  2322  04AB                     l3034:	
  2323  04AB  1003               	clrc
  2324  04AC  0DF2               	rlf	___wmul@multiplicand,f
  2325  04AD  0DF3               	rlf	___wmul@multiplicand+1,f
  2326  04AE  1003               	clrc
  2327  04AF  0CF1               	rrf	___wmul@multiplier+1,f
  2328  04B0  0CF0               	rrf	___wmul@multiplier,f
  2329  04B1  0871               	movf	___wmul@multiplier+1,w
  2330  04B2  0470               	iorwf	___wmul@multiplier,w
  2331  04B3  1D03               	skipz
  2332  04B4  2CA3               	goto	l3030
  2333  04B5  0875               	movf	___wmul@product+1,w
  2334  04B6  00F1               	movwf	?___wmul+1
  2335  04B7  0874               	movf	___wmul@product,w
  2336  04B8  00F0               	movwf	?___wmul
  2337  04B9  0008               	return
  2338  04BA                     __end_of___wmul:	
  2339                           
  2340                           	psect	text357
  2341  07A7                     __ptext357:	
  2342 ;; =============== function _msecbase ends ============
  2343                           
  2344                           
  2345 ;; *************** function _init_comms *****************
  2346 ;; Defined at:
  2347 ;;		line 52 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;		None               void
  2354 ;; Registers used:
  2355 ;;		wreg, status,2
  2356 ;; Tracked objects:
  2357 ;;		On entry : 17F/0
  2358 ;;		On exit  : 17F/60
  2359 ;;		Unchanged: FFE80/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2361 ;;      Params:         0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0
  2364 ;;      Totals:         0       0       0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373  07A7                     _init_comms:	
  2374                           
  2375                           ;SRPROG2.c: 53: TRISC7 = 1;
  2376                           
  2377                           ; Regs used in _init_comms: [wreg+status,2]
  2378  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  2379  07A8  3019               	movlw	25
  2380  07A9  1787               	bsf	7,7
  2381                           
  2382                           ;SRPROG2.c: 54: TRISC6 = 0;
  2383  07AA  1307               	bcf	7,6
  2384                           
  2385                           ;SRPROG2.c: 55: SPBRG = 0x19;
  2386  07AB  0099               	movwf	25	;volatile
  2387                           
  2388                           ;SRPROG2.c: 57: RCSTA = 0x90;
  2389  07AC  3090               	movlw	144
  2390  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  2391  07AE  0098               	movwf	24	;volatile
  2392                           
  2393                           ;SRPROG2.c: 58: TXSTA = 0x26;
  2394  07AF  3026               	movlw	38
  2395  07B0  1683               	bsf	3,5	;RP0=1, select bank1
  2396  07B1  0098               	movwf	24	;volatile
  2397                           
  2398                           ;SRPROG2.c: 59: BAUDCTL = 0;
  2399  07B2  1703               	bsf	3,6	;RP1=1, select bank3
  2400  07B3  0187               	clrf	7	;volatile
  2401  07B4  0008               	return
  2402  07B5                     __end_of_init_comms:	
  2403                           
  2404                           	psect	text358
  2405  07C6                     __ptext358:	
  2406 ;; =============== function _init_comms ends ============
  2407                           
  2408                           
  2409 ;; *************** function _getch *****************
  2410 ;; Defined at:
  2411 ;;		line 45 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      unsigned char 
  2418 ;; Registers used:
  2419 ;;		wreg
  2420 ;; Tracked objects:
  2421 ;;		On entry : 60/0
  2422 ;;		On exit  : 60/0
  2423 ;;		Unchanged: FFF9F/0
  2424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2425 ;;      Params:         0       0       0       0       0
  2426 ;;      Locals:         0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0
  2428 ;;      Totals:         0       0       0       0       0
  2429 ;;Total ram usage:        0 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437  07C6                     _getch:	
  2438  07C6                     l1057:	
  2439                           ;SRPROG2.c: 47: while(!RCIF)
  2440                           
  2441                           ; Regs used in _getch: [wreg]
  2442                           
  2443  07C6  1E8C               	btfss	12,5
  2444  07C7  2FC6               	goto	l1057
  2445                           
  2446                           ;SRPROG2.c: 49: return RCREG;
  2447                           ;	Return value of _getch is never used
  2448  07C8  081A               	movf	26,w	;volatile
  2449  07C9  0008               	return
  2450  07CA                     __end_of_getch:	
  2451                           
  2452                           	psect	text359
  2453  07C1                     __ptext359:	
  2454 ;; =============== function _getch ends ============
  2455                           
  2456                           
  2457 ;; *************** function _putch *****************
  2458 ;; Defined at:
  2459 ;;		line 38 in file "C:\Users\Jorge\OneDrive\Escritorio\Entregar\DIST\SRPROG2\SRPROG2.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  byte            1    0[COMMON] unsigned char 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;		None
  2464 ;; Return value:  Size  Location     Type
  2465 ;;		None               void
  2466 ;; Registers used:
  2467 ;;		wreg
  2468 ;; Tracked objects:
  2469 ;;		On entry : 160/0
  2470 ;;		On exit  : 160/0
  2471 ;;		Unchanged: FFE9F/0
  2472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2473 ;;      Params:         1       0       0       0       0
  2474 ;;      Locals:         0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0
  2476 ;;      Totals:         1       0       0       0       0
  2477 ;;Total ram usage:        1 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_printf
  2483 ;;		__doprnt
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486  07C1                     _putch:	
  2487  07C1                     l1051:	
  2488                           ;SRPROG2.c: 40: while(!TXIF)
  2489                           
  2490                           ; Regs used in _putch: [wreg]
  2491                           
  2492  07C1  1E0C               	btfss	12,4
  2493  07C2  2FC1               	goto	l1051
  2494                           
  2495                           ;SRPROG2.c: 42: TXREG = byte;
  2496  07C3  0870               	movf	putch@byte,w
  2497  07C4  0099               	movwf	25	;volatile
  2498  07C5  0008               	return
  2499  07C6                     __end_of_putch:	
  2500                           
  2501 ;; =============== function _putch ends ============
  2502  0002                     
  2503                           	psect	functab
  2504  0700                     __pfunctab:	
  2505  0700                     fptable:	
  2506  0700  00FF               	movwf	(btemp+1)& (0+127)
  2507  0701  3007               	movlw	high fptable
  2508  0702  008A               	movwf	10
  2509  0703  087F               	movf	(btemp+1)& (0+127),w
  2510  0704  0782               	addwf	2,f
  2511  0705                     fpbase:	
  2512  0705  2F05               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  2513  0706                     fp__putch:	
  2514  0706  120A  118A  2FC1   	ljmp	_putch
  2515  007E                     btemp	set	126	;btemp
  2516  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Tue Jun 07 15:16:35 2022

                   pc 0002                    fsr 0004   ___wmul@multiplicand 0072                   _RB0 0030  
                 _RB1 0031                   _RC0 0038                   _RC3 003B                   _RC4 003C  
                 u515 06BC                   u555 06E1                   u635 076A                   u675 063B  
                 u837 04EE                   u847 050E                   u857 05AC                   fsr0 0004  
                 indf 0000           lcd_goto@pos 0075                  l1104 0000                  l1113 0000  
                l1051 07C1                  l1107 0000                  l1060 0000                  l1116 078F  
                l1054 0000                  l1070 0519                  l1063 0000                  l1119 0000  
                l1151 0000                  l1057 07C6                  l3002 0000                  l3010 0000  
                l1074 051B                  l1067 0513                  l3012 0000                  l3100 0000  
                l1092 0000                  l3014 0000                  l3030 04A3                  l2151 0000  
                l3008 0000                  l3024 049F                  l3016 0000                  l3120 048E  
                l3112 0459                  l3104 0453                  l3200 0000                  l2160 0000  
                l1089 0000                  l3018 0000                  l3034 04AB                  l3114 047F  
                l3106 047D                  l3130 0764                  l3202 0000                  l1098 0000  
                l3036 0000                  l3028 0000                  l3060 0000                  l3044 0000  
                l3116 0000                  l3124 0762                  l3140 05F2                  l3132 0000  
                l3204 0000                  l3212 0000                  l3300 0000                  l3038 0000  
                l3054 06B3                  l3046 0000                  l3070 0000                  l3150 060D  
                l3142 0000                  l3206 0000                  l3214 0000                  l3230 0000  
                l3222 0000                  l3310 0000                  l3302 0000                  l2167 0000  
                l3064 0000                  l3056 0000                  l3128 0000                  l3152 0000  
                l3144 05F9                  l3208 0000                  l3216 0000                  l3232 0000  
                l3224 0000                  l3240 0000                  l3320 0000                  l3312 0000  
                l3304 0000                  l3066 06CA                  l3090 0000                  l3170 0642  
                l3162 0626                  l3218 0000                  l3234 0000                  l3226 0000  
                l3250 0000                  l3330 0000                  l3322 0000                  l3314 0000  
                l3306 0000                  l2179 0000                  l3084 0000                  l3092 0440  
                l3180 065E                  l3156 0000                  l3148 0000                  l3228 0000  
                l3236 0000                  l3244 0000                  l3260 0000                  l3252 0000  
                l3332 0000                  l3324 0000                  l3316 0000                  l3308 0000  
                l2189 0000                  l3078 06DB                  l3086 06EE                  l3094 043A  
                l3190 0000                  l3182 0663                  l3158 0624                  l3238 0000  
                l3246 0710                  l3270 0000                  l3262 0000                  l3254 0000  
                l3350 0000                  l3342 0524                  l3334 0000                  l3326 0000  
                l3318 04F5                  l2199 0000                  l3096 0442                  l3184 0000  
                l3192 069C                  l3176 0655                  l3168 0000                  l3248 0000  
                l3280 0000                  l3272 0000                  l3264 0000                  l3256 0000  
                l3344 0000                  l3336 0000                  l3328 0000                  l3178 0000  
                l3194 05D1                  l3290 0000                  l3282 0000                  l3274 0000  
                l3266 0000                  l3258 0000                  l3370 0000                  l3362 055F  
                l3354 0549                  l3346 0527                  l3338 0517                  l3188 0696  
                l3196 06A2                  l3284 0000                  l3276 0000                  l3268 0000  
                l3372 0000                  l3364 0000                  l3356 0000                  l3348 0000  
                l3292 0000                  l3286 0000                  l3278 0000                  l3374 0000  
                l3366 0000                  l3358 0551                  l3294 0000                  l3288 0000  
                l3376 0000                  l3368 0000                  l3296 0000                  l3378 05A6  
                l3298 0000                  l2998 0000                  STR_1 001D                  STR_2 002A  
                STR_3 003F                  STR_4 003A                  STR_5 0034                  STR_6 0042  
                _T0IF 005A                  _RCIF 0065                  _TMR0 0001                  _TXIF 0064  
                _dato 0034                  _dist 0036                  _atoi 0439                  _main 04BA  
                btemp 007E                  start 0000                 ?_atoi 0076                 ?_main 0070  
               _ANSEL 0188                 _T1CON 0010       __end_of___lwdiv 06CF       __end_of___lwmod 06F3  
               _RCREG 001A                 _RCSTA 0018                 _TMR1H 000F                 _TMR1L 000E  
               _SPBRG 0099                 _PORTB 0006                 _PORTD 0008       __end_of__doprnt 06A5  
               _TRISA 0085                 _TRISC 0087                 _TRISD 0088                 _TRISE 0089  
               _TXREG 0019                 _TXSTA 0098                 _getch 07C6       __end_of_isdigit 04A1  
               _pause 0762                 atoi@a 007B                 atoi@s 007D                 _putch 07C1  
               fpbase 0705                 pclath 000A                 status 0003                 wtemp0 007E  
     __end_of_sprintf 05D0          __end_of_atoi 0493          __end_of_main 05B4                ??_atoi 0078  
              ??_main 0031                ?_getch 0070                _ADCON1 009F                ?_pause 0070  
              ?_putch 0070                _ANSELH 0189                _TMR1IF 0060                _TMR1ON 0080  
              _TRISB1 0431                _TRISC6 043E                _TRISC7 043F      __end_of_lcd_init 0762  
    __end_of_lcd_goto 070F      __end_of_lcd_puts 072C                _carac1 0038                ___wmul 04A1  
           ??___lwdiv 0074             ??___lwmod 007B             ??__doprnt 0020          __doprnt@_val 0024  
        __doprnt@flag 0022                _printf 05B4          __doprnt@prec 0023      __end_of_msecbase 0793  
              fptable 0700                fptotal 0002             ??_isdigit 0070                pause@x 0072  
           ??_sprintf 007E        __pcstackCOMMON 0070         __end_of_getch 07CA         __end_of_pause 0773  
       __end_of_putch 07C6    __size_of_lcd_clear 0009            __doprnt@ap 007D            __doprnt@pb 0029  
             ??_getch 0070    __size_of_lcd_write 0013               ??_pause 0072               ??_putch 0071  
          __pbssBANK0 0034            __pmaintext 04BA               ?___wmul 0070               _BAUDCTL 0187  
             ?_printf 002A             ?_lcd_init 0070             ?_lcd_goto 0070             ?_lcd_puts 0075  
           ?_msecbase 0070     __end_of_lcd_clear 079C     __end_of_lcd_write 0786       __size_of___wmul 0019  
             ___lwdiv 06A5               ___lwmod 06CF            _init_comms 07A7               __doprnt 05D0  
     __size_of_printf 000C               _dpowers 0013               _isdigit 0493               _sprintf 05C0  
          ??_lcd_init 0075            ??_lcd_goto 0075            ??_lcd_puts 0077  end_of_initialization 07BD  
          ??_msecbase 0070               printf@f 002C            lcd_write@c 0074           ?_init_comms 0070  
      __end_of___wmul 04BA        __end_of_printf 05C0   start_initialization 07B5              ??___wmul 0074  
            ??_printf 007E          pause@usvalue 0070         __pcstackBANK0 0020          _isdigit$2410 0070  
 __size_of_init_comms 000E     __size_of_lcd_init 0036     __size_of_lcd_goto 0006             __doprnt@c 0028  
           __doprnt@f 007C     __size_of_lcd_puts 001D      ___lwdiv@dividend 0072             __pfunctab 0700  
   __size_of_msecbase 000D             __ptext350 0762             __ptext342 072C             __ptext351 0439  
           __ptext343 0793             __ptext352 06CF             __ptext344 070F             __ptext353 06A5  
           __ptext345 0709             __ptext354 04A1             __ptext346 0773             __ptext355 0493  
           __ptext347 05B4             __ptext356 0786             __ptext348 05C0             __ptext357 07A7  
           __ptext349 05D0             __ptext358 07C6             __ptext359 07C1              ?___lwdiv 0070  
            ?___lwmod 0077              ?__doprnt 007C             _lcd_clear 0793             __pstrings 0003  
           _lcd_write 0773              ?_isdigit 0070      ___lwdiv@quotient 0074        __size_of_getch 0004  
            ?_sprintf 002A        __size_of_pause 0011        __size_of_putch 0005        ___wmul@product 0074  
          ?_lcd_clear 0070           __stringbase 0012            ?_lcd_write 0070     ___wmul@multiplier 0070  
           lcd_puts@s 0075          ??_init_comms 0070      __size_of___lwdiv 002A      __size_of___lwmod 0024  
    __size_of__doprnt 00D5      __size_of_isdigit 000E       ___lwdiv@divisor 0070       ___lwdiv@counter 0076  
            _lcd_init 072C              _lcd_goto 0709              _lcd_puts 070F      __size_of_sprintf 0010  
       __size_of_atoi 005A         __size_of_main 00FA    __end_of_init_comms 07B5              _msecbase 0786  
            atoi@sign 007A              fp__putch 0706           ??_lcd_clear 0075           ??_lcd_write 0074  
           putch@byte 0070              isdigit@c 0071             sprintf@ap 002E             sprintf@pb 002F  
           sprintf@wh 002D      ___lwmod@dividend 0079             stringcode 000D              printf@ap 002D  
            printf@pb 002E            _OPTION_REG 0081              sprintf@f 002A       ___lwmod@divisor 0077  
     ___lwmod@counter 007B              stringdir 000D              stringtab 0003  

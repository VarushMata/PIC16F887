

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Sat May 21 15:57:37 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,delta=2
    11                           	psect	text282,local,class=CODE,delta=2
    12                           	psect	text285,local,class=CODE,delta=2
    13                           	psect	text289,local,class=CODE,delta=2
    14                           	psect	text290,local,class=CODE,delta=2
    15                           	psect	text292,local,class=CODE,delta=2
    16                           	psect	pa_nodes,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  000A                     	;#
    19                           
    20                           	psect	config
    21  2007  E0F4               	dw	57588	;#
    22  2008  FFFF               	dw	65535	;#
    23                           
    24                           	psect	strings
    25  0003                     __pstrings:	
    26  0003                     stringtab:	
    27                           ;	global	stringdir,stringtab,__stringbase
    28                           
    29  0003                     stringcode:	
    30                           ;	String table - string pointers are 1 byte each
    31                           
    32  0003                     stringdir:	
    33  0003  3000               	movlw	high stringdir
    34  0004  008A               	movwf	10
    35  0005  0804               	movf	4,w
    36  0006  0A84               	incf	4,f
    37  0007  0782               	addwf	2,f
    38  0008                     __stringbase:	
    39  0008  3400               	retlw	0
    40  0009                     _dpowers:	
    41  0009  3401               	retlw	1
    42  000A  3400               	retlw	0
    43  000B  340A               	retlw	10
    44  000C  3400               	retlw	0
    45  000D  3464               	retlw	100
    46  000E  3400               	retlw	0
    47  000F  34E8               	retlw	232
    48  0010  3403               	retlw	3
    49  0011  3410               	retlw	16
    50  0012  3427               	retlw	39
    51  001F                     _ADCON0	set	31
    52  001E                     _ADRESH	set	30
    53  0017                     _CCP1CON	set	23
    54  001D                     _CCP2CON	set	29
    55  0015                     _CCPR1L	set	21
    56  001B                     _CCPR2L	set	27
    57  0008                     _PORTD	set	8
    58  001A                     _RCREG	set	26
    59  0018                     _RCSTA	set	24
    60  0012                     _T2CON	set	18
    61  0001                     _TMR0	set	1
    62  0019                     _TXREG	set	25
    63  00F9                     _GO_DONE	set	249
    64  0038                     _RC0	set	56
    65  003B                     _RC3	set	59
    66  003C                     _RC4	set	60
    67  0065                     _RCIF	set	101
    68  005A                     _T0IF	set	90
    69  0064                     _TXIF	set	100
    70  0081                     _OPTION_REG	set	129
    71  0092                     _PR2	set	146
    72  0099                     _SPBRG	set	153
    73  0085                     _TRISA	set	133
    74  0086                     _TRISB	set	134
    75  0087                     _TRISC	set	135
    76  0088                     _TRISD	set	136
    77  0089                     _TRISE	set	137
    78  0098                     _TXSTA	set	152
    79  04FF                     _ADFM	set	1279
    80  043E                     _TRISC6	set	1086
    81  043F                     _TRISC7	set	1087
    82  0188                     _ANSEL	set	392
    83  0189                     _ANSELH	set	393
    84  0187                     _BAUDCTL	set	391
    85  009E                     _ADRESL	set	158
    86  0013                     STR_1:	
    87  0013  3425               	retlw	37	;'%'
    88  0014  3464               	retlw	100	;'d'
    89  0015  3420               	retlw	32	;' '
    90  0016  3400               	retlw	0
    91  0013                     
    92                           	psect	cinit
    93  05B9                     start_initialization:	
    94                           
    95                           ; Clear objects allocated to BANK0
    96  05B9  01AB               	clrf	__pbssBANK0& (0+127)
    97  05BA  01AC               	clrf	(__pbssBANK0+1)& (0+127)
    98  05BB  01AD               	clrf	(__pbssBANK0+2)& (0+127)
    99  05BC  01AE               	clrf	(__pbssBANK0+3)& (0+127)
   100  05BD  01AF               	clrf	(__pbssBANK0+4)& (0+127)
   101  05BE  01B0               	clrf	(__pbssBANK0+5)& (0+127)
   102  05BF  01B1               	clrf	(__pbssBANK0+6)& (0+127)
   103  05C0  01B2               	clrf	(__pbssBANK0+7)& (0+127)
   104  05C1                     end_of_initialization:	
   105                           ;End of C runtime variable initialization code
   106                           
   107  05C1  0183               	clrf	3
   108  05C2  120A  118A  2DD3   	ljmp	_main	;jump to C main() function
   109                           
   110                           	psect	bssBANK0
   111  002B                     __pbssBANK0:	
   112  002B                     _pwm1:	
   113  002B                     	ds	2
   114  002D                     _pwm2:	
   115  002D                     	ds	2
   116  002F                     _vadc1:	
   117  002F                     	ds	2
   118  0031                     _vadc2:	
   119  0031                     	ds	2
   120                           
   121                           	psect	cstackCOMMON
   122  0070                     __pcstackCOMMON:	
   123  0070                     ?_lcd_init:	
   124  0070                     ?_ADC:	
   125                           ; 0 bytes @ 0x0
   126                           
   127  0070                     ?_PWM:	
   128                           ; 0 bytes @ 0x0
   129                           
   130  0070                     ?_pause:	
   131                           ; 0 bytes @ 0x0
   132                           
   133  0070                     ?_msecbase:	
   134                           ; 0 bytes @ 0x0
   135                           
   136  0070                     ??_msecbase:	
   137                           ; 0 bytes @ 0x0
   138                           
   139  0070                     ?_putch:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  0070                     ??_putch:	
   143                           ; 0 bytes @ 0x0
   144                           
   145  0070                     ??_getch:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  0070                     ?_init_comms:	
   149                           ; 0 bytes @ 0x0
   150                           
   151  0070                     ??_init_comms:	
   152                           ; 0 bytes @ 0x0
   153                           
   154  0070                     ?_main:	
   155                           ; 0 bytes @ 0x0
   156                           
   157  0070                     ?_lcd_write:	
   158                           ; 0 bytes @ 0x0
   159                           
   160  0070                     ?_lcd_clear:	
   161                           ; 0 bytes @ 0x0
   162                           
   163  0070                     ?_getch:	
   164                           ; 0 bytes @ 0x0
   165                           
   166  0070                     ?___lwdiv:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0070                     putch@byte:	
   170                           ; 2 bytes @ 0x0
   171                           
   172  0070                     pause@usvalue:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  0070                     ___lwdiv@divisor:	
   176                           ; 2 bytes @ 0x0
   177                           
   178                           
   179                           ; 2 bytes @ 0x0
   180  0070                     	ds	2
   181  0072                     ??_pause:	
   182  0072                     pause@x:	
   183                           ; 0 bytes @ 0x2
   184                           
   185  0072                     ___lwdiv@dividend:	
   186                           ; 2 bytes @ 0x2
   187                           
   188                           
   189                           ; 2 bytes @ 0x2
   190  0072                     	ds	2
   191  0074                     ??_ADC:	
   192  0074                     ??_PWM:	
   193                           ; 0 bytes @ 0x4
   194                           
   195  0074                     ??_lcd_write:	
   196                           ; 0 bytes @ 0x4
   197                           
   198  0074                     ??___lwdiv:	
   199                           ; 0 bytes @ 0x4
   200                           
   201  0074                     lcd_write@c:	
   202                           ; 0 bytes @ 0x4
   203                           
   204  0074                     ___lwdiv@quotient:	
   205                           ; 1 bytes @ 0x4
   206                           
   207                           
   208                           ; 2 bytes @ 0x4
   209  0074                     	ds	1
   210  0075                     ??_lcd_init:	
   211  0075                     ??_lcd_clear:	
   212                           ; 0 bytes @ 0x5
   213                           
   214                           
   215                           ; 0 bytes @ 0x5
   216  0075                     	ds	1
   217  0076                     ___lwdiv@counter:	
   218                           
   219                           ; 1 bytes @ 0x6
   220  0076                     	ds	1
   221  0077                     ?___lwmod:	
   222  0077                     ___lwmod@divisor:	
   223                           ; 2 bytes @ 0x7
   224                           
   225                           
   226                           ; 2 bytes @ 0x7
   227  0077                     	ds	2
   228  0079                     ___lwmod@dividend:	
   229                           
   230                           ; 2 bytes @ 0x9
   231  0079                     	ds	2
   232  007B                     ??___lwmod:	
   233  007B                     ___lwmod@counter:	
   234                           ; 0 bytes @ 0xB
   235                           
   236                           
   237                           ; 1 bytes @ 0xB
   238  007B                     	ds	1
   239  007C                     ?_printf:	
   240                           
   241                           ; 2 bytes @ 0xC
   242  007C                     	ds	2
   243  007E                     ??_main:	
   244                           
   245                           	psect	cstackBANK0
   246  0020                     __pcstackBANK0:	
   247                           ; 0 bytes @ 0xE
   248                           
   249  0020                     ??_printf:	
   250                           
   251                           ; 0 bytes @ 0x0
   252  0020                     	ds	2
   253  0022                     printf@ap:	
   254                           
   255                           ; 1 bytes @ 0x2
   256  0022                     	ds	1
   257  0023                     printf@flag:	
   258                           
   259                           ; 1 bytes @ 0x3
   260  0023                     	ds	1
   261  0024                     printf@f:	
   262                           
   263                           ; 1 bytes @ 0x4
   264  0024                     	ds	1
   265  0025                     printf@prec:	
   266                           
   267                           ; 1 bytes @ 0x5
   268  0025                     	ds	1
   269  0026                     printf@_val:	
   270                           
   271                           ; 4 bytes @ 0x6
   272  0026                     	ds	4
   273  002A                     printf@c:	
   274                           
   275                           ; 1 bytes @ 0xA
   276  002A                     	ds	1
   277                           
   278                           	psect	maintext
   279  05D3                     __pmaintext:	
   280 ;;Data sizes: Strings 4, constant 10, data 0, bss 8, persistent 0 stack 0
   281 ;;Auto spaces:   Size  Autos    Used
   282 ;; COMMON          14     14      14
   283 ;; BANK0           80     11      19
   284 ;; BANK1           80      0       0
   285 ;; BANK3           96      0       0
   286 ;; BANK2           96      0       0
   287 ;;
   288 ;; Pointer list with targets:
   289 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   290 ;;
   291 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   292 ;;
   293 ;; printf@f	PTR const unsigned char  size(1) Largest target is 4
   294 ;;		 -> STR_2(CODE[4]), STR_1(CODE[4]), 
   295 ;;
   296 ;; ?_printf	int  size(1) Largest target is 0
   297 ;;
   298 ;; printf@ap	PTR void [1] size(1) Largest target is 2
   299 ;;		 -> ?_printf(COMMON[2]), 
   300 ;;
   301 ;; S1851$_cp	PTR const unsigned char  size(1) Largest target is 0
   302 ;;
   303 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   304 ;;
   305 ;;
   306 ;; Critical Paths under _main in COMMON
   307 ;;
   308 ;;   _main->_printf
   309 ;;   _lcd_init->_lcd_write
   310 ;;   _lcd_clear->_lcd_write
   311 ;;   _lcd_write->_pause
   312 ;;   _PWM->_pause
   313 ;;   _ADC->_pause
   314 ;;   _printf->___lwmod
   315 ;;   ___lwmod->___lwdiv
   316 ;;
   317 ;; Critical Paths under _main in BANK0
   318 ;;
   319 ;;   _main->_printf
   320 ;;
   321 ;; Critical Paths under _main in BANK1
   322 ;;
   323 ;;   None.
   324 ;;
   325 ;; Critical Paths under _main in BANK3
   326 ;;
   327 ;;   None.
   328 ;;
   329 ;; Critical Paths under _main in BANK2
   330 ;;
   331 ;;   None.
   332 ;;
   333 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   334 ;;
   335 ;;
   336 ;;Call Graph Tables:
   337 ;;
   338 ;; ---------------------------------------------------------------------------------
   339 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   340 ;; ---------------------------------------------------------------------------------
   341 ;; (0) _main                                                 0     0      0    1116
   342 ;;                           _lcd_init
   343 ;;                         _init_comms
   344 ;;                              _getch
   345 ;;                                _ADC
   346 ;;                                _PWM
   347 ;;                             _printf
   348 ;; ---------------------------------------------------------------------------------
   349 ;; (1) _lcd_init                                             1     1      0     295
   350 ;;                                              5 COMMON     1     1      0
   351 ;;                              _pause
   352 ;;                          _lcd_write
   353 ;;                          _lcd_clear
   354 ;; ---------------------------------------------------------------------------------
   355 ;; (2) _lcd_clear                                            0     0      0     136
   356 ;;                          _lcd_write
   357 ;;                              _pause
   358 ;; ---------------------------------------------------------------------------------
   359 ;; (3) _lcd_write                                            1     1      0      90
   360 ;;                                              4 COMMON     1     1      0
   361 ;;                              _pause
   362 ;; ---------------------------------------------------------------------------------
   363 ;; (1) _PWM                                                  2     2      0      46
   364 ;;                                              4 COMMON     2     2      0
   365 ;;                              _pause
   366 ;; ---------------------------------------------------------------------------------
   367 ;; (1) _ADC                                                  1     1      0      46
   368 ;;                                              4 COMMON     1     1      0
   369 ;;                              _pause
   370 ;; ---------------------------------------------------------------------------------
   371 ;; (2) _pause                                                4     2      2      46
   372 ;;                                              0 COMMON     4     2      2
   373 ;;                           _msecbase
   374 ;; ---------------------------------------------------------------------------------
   375 ;; (1) _printf                                              13    11      2     729
   376 ;;                                             12 COMMON     2     0      2
   377 ;;                                              0 BANK0     11    11      0
   378 ;;                              _putch
   379 ;;                            ___lwdiv
   380 ;;                            ___lwmod
   381 ;; ---------------------------------------------------------------------------------
   382 ;; (2) ___lwmod                                              5     1      4     159
   383 ;;                                              7 COMMON     5     1      4
   384 ;;                            ___lwdiv (ARG)
   385 ;; ---------------------------------------------------------------------------------
   386 ;; (2) ___lwdiv                                              7     3      4     162
   387 ;;                                              0 COMMON     7     3      4
   388 ;; ---------------------------------------------------------------------------------
   389 ;; (3) _msecbase                                             0     0      0       0
   390 ;; ---------------------------------------------------------------------------------
   391 ;; (1) _init_comms                                           0     0      0       0
   392 ;; ---------------------------------------------------------------------------------
   393 ;; (1) _getch                                                0     0      0       0
   394 ;; ---------------------------------------------------------------------------------
   395 ;; (2) _putch                                                1     1      0      22
   396 ;;                                              0 COMMON     1     1      0
   397 ;; ---------------------------------------------------------------------------------
   398 ;; Estimated maximum stack depth 3
   399 ;; ---------------------------------------------------------------------------------
   400 ;; Call Graph Graphs:
   401 ;; _main (ROOT)
   402 ;;   _lcd_init
   403 ;;     _pause
   404 ;;       _msecbase
   405 ;;     _lcd_write
   406 ;;       _pause
   407 ;;         _msecbase
   408 ;;     _lcd_clear
   409 ;;       _lcd_write
   410 ;;         _pause
   411 ;;           _msecbase
   412 ;;       _pause
   413 ;;         _msecbase
   414 ;;   _init_comms
   415 ;;   _getch
   416 ;;   _ADC
   417 ;;     _pause
   418 ;;       _msecbase
   419 ;;   _PWM
   420 ;;     _pause
   421 ;;       _msecbase
   422 ;;   _printf
   423 ;;     _putch
   424 ;;     ___lwdiv
   425 ;;     ___lwmod
   426 ;;       ___lwdiv (ARG)
   427 ;;
   428 ;; Address spaces:
   429 ;;Name               Size   Autos  Total    Cost      Usage
   430 ;;BITCOMMON            E      0       0       0        0.0%
   431 ;;EEDATA             100      0       0       0        0.0%
   432 ;;NULL                 0      0       0       0        0.0%
   433 ;;CODE                 0      0       0       0        0.0%
   434 ;;COMMON               E      E       E       1      100.0%
   435 ;;BITSFR0              0      0       0       1        0.0%
   436 ;;SFR0                 0      0       0       1        0.0%
   437 ;;BITSFR1              0      0       0       2        0.0%
   438 ;;SFR1                 0      0       0       2        0.0%
   439 ;;STACK                0      0       5       2        0.0%
   440 ;;ABS                  0      0      21       3        0.0%
   441 ;;BITBANK0            50      0       0       4        0.0%
   442 ;;BITSFR3              0      0       0       4        0.0%
   443 ;;SFR3                 0      0       0       4        0.0%
   444 ;;BANK0               50      B      13       5       23.8%
   445 ;;BITSFR2              0      0       0       5        0.0%
   446 ;;SFR2                 0      0       0       5        0.0%
   447 ;;BITBANK1            50      0       0       6        0.0%
   448 ;;BANK1               50      0       0       7        0.0%
   449 ;;BITBANK3            60      0       0       8        0.0%
   450 ;;BANK3               60      0       0       9        0.0%
   451 ;;BITBANK2            60      0       0      10        0.0%
   452 ;;BANK2               60      0       0      11        0.0%
   453 ;;DATA                 0      0      26      12        0.0%
   454                           
   455                           
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 72 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;		None
   463 ;; Return value:  Size  Location     Type
   464 ;;		None               void
   465 ;; Registers used:
   466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 17F/0
   469 ;;		On exit  : 17F/0
   470 ;;		Unchanged: FFE80/0
   471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   472 ;;      Params:         0       0       0       0       0
   473 ;;      Locals:         0       0       0       0       0
   474 ;;      Temps:          0       0       0       0       0
   475 ;;      Totals:         0       0       0       0       0
   476 ;;Total ram usage:        0 bytes
   477 ;; Hardware stack levels required when called:    5
   478 ;; This function calls:
   479 ;;		_lcd_init
   480 ;;		_init_comms
   481 ;;		_getch
   482 ;;		_ADC
   483 ;;		_PWM
   484 ;;		_printf
   485 ;; This function is called by:
   486 ;;		Startup code after reset
   487 ;; This function uses a non-reentrant model
   488 ;;
   489  05D3                     _main:	
   490                           
   491                           ;GRAFPWM.c: 74: ANSEL = 0x60;
   492                           
   493                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   494  05D3  3060               	movlw	96
   495  05D4  1683               	bsf	3,5	;RP0=1, select bank3
   496  05D5  1703               	bsf	3,6	;RP1=1, select bank3
   497  05D6  0088               	movwf	8	;volatile
   498                           
   499                           ;GRAFPWM.c: 75: ANSELH = 0x00;
   500  05D7  0189               	clrf	9	;volatile
   501                           
   502                           ;GRAFPWM.c: 76: TRISB = 0xFF;
   503  05D8  30FF               	movlw	255
   504  05D9  1303               	bcf	3,6	;RP1=0, select bank1
   505  05DA  0086               	movwf	6	;volatile
   506                           
   507                           ;GRAFPWM.c: 77: TRISA = 0x00;
   508  05DB  0185               	clrf	5	;volatile
   509                           
   510                           ;GRAFPWM.c: 79: TRISD = 0x00;
   511  05DC  0188               	clrf	8	;volatile
   512                           
   513                           ;GRAFPWM.c: 80: TRISC = 0x00;
   514  05DD  0187               	clrf	7	;volatile
   515                           
   516                           ;GRAFPWM.c: 81: TRISE = 0x07;
   517  05DE  3007               	movlw	7
   518  05DF  0089               	movwf	9	;volatile
   519                           
   520                           ;GRAFPWM.c: 82: T2CON = 0x07;
   521  05E0  1283               	bcf	3,5	;RP0=0, select bank0
   522  05E1  0092               	movwf	18	;volatile
   523                           
   524                           ;GRAFPWM.c: 83: PR2 = 0xFF;
   525  05E2  30FF               	movlw	255
   526  05E3  1683               	bsf	3,5	;RP0=1, select bank1
   527  05E4  0092               	movwf	18	;volatile
   528                           
   529                           ;GRAFPWM.c: 85: CCPR1L = 0x80;
   530  05E5  3080               	movlw	128
   531  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   532  05E7  0095               	movwf	21	;volatile
   533                           
   534                           ;GRAFPWM.c: 86: CCP1CON = 0x0C;
   535  05E8  300C               	movlw	12
   536  05E9  0097               	movwf	23	;volatile
   537                           
   538                           ;GRAFPWM.c: 88: lcd_init();
   539  05EA  120A  118A  276C   	fcall	_lcd_init
      +       120A  118A         
   540                           
   541                           ;GRAFPWM.c: 90: init_comms();
   542  05EF  120A  118A  25C5   	fcall	_init_comms
      +       120A  118A         
   543                           
   544                           ;GRAFPWM.c: 92: ADFM = 0;
   545  05F4  1303               	bcf	3,6	;RP1=0, select bank1
   546  05F5  139F               	bcf	31,7
   547  05F6                     l3021:	
   548                           
   549                           ;GRAFPWM.c: 96: getch();
   550  05F6  120A  118A  25B4   	fcall	_getch
      +       120A  118A         
   551                           
   552                           ;GRAFPWM.c: 98: ADC();
   553  05FB  120A  118A  2725   	fcall	_ADC
      +       120A  118A         
   554                           
   555                           ;GRAFPWM.c: 100: PWM();
   556  0600  120A  118A  2703   	fcall	_PWM
      +       120A  118A         
   557                           
   558                           ;GRAFPWM.c: 102: printf("%d ",pwm1);
   559  0605  1283               	bcf	3,5	;RP0=0, select bank0
   560  0606  1303               	bcf	3,6	;RP1=0, select bank0
   561  0607  082C               	movf	_pwm1+1,w
   562  0608  00FD               	movwf	?_printf+1
   563  0609  082B               	movf	_pwm1,w
   564  060A  00FC               	movwf	?_printf
   565  060B  300B               	movlw	(STR_1-__stringbase)& (0+255)
   566  060C  120A  118A  261C   	fcall	_printf
      +       120A  118A         
   567                           
   568                           ;GRAFPWM.c: 103: printf("%d ",pwm2);
   569  0611  082E               	movf	_pwm2+1,w
   570  0612  00FD               	movwf	?_printf+1
   571  0613  082D               	movf	_pwm2,w
   572  0614  00FC               	movwf	?_printf
   573  0615  300B               	movlw	(STR_1-__stringbase)& (0+255)
   574  0616  120A  118A  261C   	fcall	_printf
      +       120A  118A         
   575  061B  2DF6               	goto	l3021
   576  061C                     __end_of_main:	
   577                           
   578                           	psect	text282
   579  0703                     __ptext282:	
   580 ;; =============== function _lcd_write ends ============
   581                           
   582                           
   583 ;; *************** function _PWM *****************
   584 ;; Defined at:
   585 ;;		line 126 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;		None
   588 ;; Auto vars:     Size  Location     Type
   589 ;;		None
   590 ;; Return value:  Size  Location     Type
   591 ;;		None               void
   592 ;; Registers used:
   593 ;;		wreg, status,2, status,0, pclath, cstack
   594 ;; Tracked objects:
   595 ;;		On entry : 11F/0
   596 ;;		On exit  : 11F/0
   597 ;;		Unchanged: FFE80/0
   598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   599 ;;      Params:         0       0       0       0       0
   600 ;;      Locals:         0       0       0       0       0
   601 ;;      Temps:          2       0       0       0       0
   602 ;;      Totals:         2       0       0       0       0
   603 ;;Total ram usage:        2 bytes
   604 ;; Hardware stack levels used:    1
   605 ;; Hardware stack levels required when called:    2
   606 ;; This function calls:
   607 ;;		_pause
   608 ;; This function is called by:
   609 ;;		_main
   610 ;; This function uses a non-reentrant model
   611 ;;
   612  0703                     _PWM:	
   613  0703  27FD               	call	PL5	;select bank 0
   614                           
   615                           ;GRAFPWM.c: 127: ADRESH=pwm1>>2;
   616                           
   617                           ; Regs used in _PWM: [wreg+status,2+status,0+pclath+cstack]
   618  0704  082C               	movf	_pwm1+1,w
   619  0705  00F5               	movwf	??_PWM+1
   620  0706  082B               	movf	_pwm1,w
   621                           
   622                           ;GRAFPWM.c: 128: ADRESL=pwm1<<8;
   623                           
   624                           ;GRAFPWM.c: 129: CCPR1L=ADRESH;
   625  0707  27DC  120A  118A   	fcall	PL2	;call to abstracted procedure
   626  070A  0095               	movwf	21	;volatile
   627                           
   628                           ;GRAFPWM.c: 130: CCP1CON=0X0C|(ADRESL>>2);
   629  070B  27EA  120A  118A   	fcall	PL3	;call to abstracted procedure
   630  070E  0097               	movwf	23	;volatile
   631                           
   632                           ;GRAFPWM.c: 131: pause(1);
   633  070F  01F0               	clrf	?_pause
   634  0710  0AF0               	incf	?_pause,f
   635  0711  01F1               	clrf	?_pause+1
   636  0712  27A2  120A  118A   	fcall	_pause
   637  0715  27FD               	call	PL5	;select bank 0
   638                           
   639                           ;GRAFPWM.c: 133: ADRESH=pwm2>>2;
   640  0716  082E               	movf	_pwm2+1,w
   641  0717  00F5               	movwf	??_PWM+1
   642  0718  082D               	movf	_pwm2,w
   643                           
   644                           ;GRAFPWM.c: 134: ADRESL=pwm2<<8;
   645                           
   646                           ;GRAFPWM.c: 135: CCPR2L=ADRESH;
   647  0719  27DC  120A  118A   	fcall	PL2	;call to abstracted procedure
   648  071C  009B               	movwf	27	;volatile
   649                           
   650                           ;GRAFPWM.c: 136: CCP2CON=0X0C|(ADRESL>>2);
   651  071D  27EA  120A  118A   	fcall	PL3	;call to abstracted procedure
   652  0720  009D               	movwf	29	;volatile
   653                           
   654                           ;GRAFPWM.c: 137: pause(1);
   655  0721  01F0               	clrf	?_pause
   656  0722  0AF0               	incf	?_pause,f
   657  0723  01F1               	clrf	?_pause+1
   658  0724  2FA2               	ljmp	l2891
   659  0725                     __end_of_PWM:	
   660  0725                     __ptext283:	
   661 ;; =============== function _PWM ends ============
   662                           
   663                           
   664 ;; *************** function _ADC *****************
   665 ;; Defined at:
   666 ;;		line 109 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;		None
   671 ;; Return value:  Size  Location     Type
   672 ;;		None               void
   673 ;; Registers used:
   674 ;;		wreg, status,2, status,0, pclath, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 17F/0
   677 ;;		On exit  : 11F/0
   678 ;;		Unchanged: FFE80/0
   679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   680 ;;      Params:         0       0       0       0       0
   681 ;;      Locals:         0       0       0       0       0
   682 ;;      Temps:          1       0       0       0       0
   683 ;;      Totals:         1       0       0       0       0
   684 ;;Total ram usage:        1 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    2
   687 ;; This function calls:
   688 ;;		_pause
   689 ;; This function is called by:
   690 ;;		_main
   691 ;; This function uses a non-reentrant model
   692 ;;
   693  0725                     _ADC:	
   694                           
   695                           ;GRAFPWM.c: 110: ADCON0=0xD5;
   696                           
   697                           ; Regs used in _ADC: [wreg+status,2+status,0+pclath+cstack]
   698  0725  30D5               	movlw	213
   699  0726  009F               	movwf	31	;volatile
   700                           
   701                           ;GRAFPWM.c: 111: GO_DONE=1;
   702  0727  149F               	bsf	31,1
   703  0728                     l1070:	
   704                           ;GRAFPWM.c: 112: while(GO_DONE);
   705                           
   706  0728  189F               	btfsc	31,1
   707  0729  2F28               	goto	l1070
   708                           
   709                           ;GRAFPWM.c: 113: vadc1=(ADRESH<<2)|(ADRESL>>6);
   710  072A  081E               	movf	30,w	;volatile
   711  072B  00AF               	movwf	_vadc1
   712  072C  01B0               	clrf	_vadc1+1
   713  072D  1003               	clrc
   714  072E  0DAF               	rlf	_vadc1,f
   715  072F  0DB0               	rlf	_vadc1+1,f
   716  0730  1003               	clrc
   717  0731  0DAF               	rlf	_vadc1,f
   718  0732  0DB0               	rlf	_vadc1+1,f
   719  0733  1683               	bsf	3,5	;RP0=1, select bank1
   720  0734  081E               	movf	30,w	;volatile
   721  0735  00F4               	movwf	??_ADC
   722  0736  3006               	movlw	6
   723  0737                     u445:	
   724  0737  1003               	clrc
   725  0738  0CF4               	rrf	??_ADC,f
   726  0739  3EFF               	addlw	-1
   727  073A  1D03               	skipz
   728  073B  2F37               	goto	u445
   729  073C  0874               	movf	??_ADC,w
   730  073D  1283               	bcf	3,5	;RP0=0, select bank0
   731  073E  04AF               	iorwf	_vadc1,f
   732                           
   733                           ;GRAFPWM.c: 114: pwm1=vadc1;
   734  073F  0830               	movf	_vadc1+1,w
   735  0740  00AC               	movwf	_pwm1+1
   736  0741  082F               	movf	_vadc1,w
   737  0742  00AB               	movwf	_pwm1
   738                           
   739                           ;GRAFPWM.c: 115: pause(1);
   740  0743  01F0               	clrf	?_pause
   741  0744  0AF0               	incf	?_pause,f
   742  0745  01F1               	clrf	?_pause+1
   743  0746  27A2  120A  118A   	fcall	_pause
   744                           
   745                           ;GRAFPWM.c: 117: ADCON0=0xD9;
   746  0749  30D9               	movlw	217
   747  074A  27FD               	call	PL5	;select bank 0
   748  074B  009F               	movwf	31	;volatile
   749                           
   750                           ;GRAFPWM.c: 118: GO_DONE=1;
   751  074C  149F               	bsf	31,1
   752  074D                     l1073:	
   753                           ;GRAFPWM.c: 119: while(GO_DONE);
   754                           
   755  074D  189F               	btfsc	31,1
   756  074E  2F4D               	goto	l1073
   757                           
   758                           ;GRAFPWM.c: 120: vadc2=(ADRESH<<2)|(ADRESL>>6);
   759  074F  081E               	movf	30,w	;volatile
   760  0750  00B1               	movwf	_vadc2
   761  0751  01B2               	clrf	_vadc2+1
   762  0752  1003               	clrc
   763  0753  0DB1               	rlf	_vadc2,f
   764  0754  0DB2               	rlf	_vadc2+1,f
   765  0755  1003               	clrc
   766  0756  0DB1               	rlf	_vadc2,f
   767  0757  0DB2               	rlf	_vadc2+1,f
   768  0758  1683               	bsf	3,5	;RP0=1, select bank1
   769  0759  081E               	movf	30,w	;volatile
   770  075A  00F4               	movwf	??_ADC
   771  075B  3006               	movlw	6
   772  075C                     u465:	
   773  075C  1003               	clrc
   774  075D  0CF4               	rrf	??_ADC,f
   775  075E  3EFF               	addlw	-1
   776  075F  1D03               	skipz
   777  0760  2F5C               	goto	u465
   778  0761  0874               	movf	??_ADC,w
   779  0762  1283               	bcf	3,5	;RP0=0, select bank0
   780  0763  04B1               	iorwf	_vadc2,f
   781                           
   782                           ;GRAFPWM.c: 121: pwm2=vadc2;
   783  0764  0832               	movf	_vadc2+1,w
   784  0765  00AE               	movwf	_pwm2+1
   785  0766  0831               	movf	_vadc2,w
   786  0767  00AD               	movwf	_pwm2
   787                           
   788                           ;GRAFPWM.c: 122: pause(1);
   789  0768  01F0               	clrf	?_pause
   790  0769  0AF0               	incf	?_pause,f
   791  076A  01F1               	clrf	?_pause+1
   792  076B  2FA2               	ljmp	l2891
   793  076C                     __end_of_ADC:	
   794  076C                     __ptext279:	
   795 ;; =============== function _main ends ============
   796                           
   797                           
   798 ;; *************** function _lcd_init *****************
   799 ;; Defined at:
   800 ;;		line 172 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  init_value      1    0        unsigned char 
   805 ;; Return value:  Size  Location     Type
   806 ;;		None               void
   807 ;; Registers used:
   808 ;;		wreg, status,2, status,0, pclath, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 17F/0
   811 ;;		On exit  : 17F/0
   812 ;;		Unchanged: FFE80/0
   813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   814 ;;      Params:         0       0       0       0       0
   815 ;;      Locals:         1       0       0       0       0
   816 ;;      Temps:          0       0       0       0       0
   817 ;;      Totals:         1       0       0       0       0
   818 ;;Total ram usage:        1 bytes
   819 ;; Hardware stack levels used:    1
   820 ;; Hardware stack levels required when called:    4
   821 ;; This function calls:
   822 ;;		_pause
   823 ;;		_lcd_write
   824 ;;		_lcd_clear
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829  076C                     _lcd_init:	
   830  076C  300F               	movlw	15
   831                           
   832                           ;GRAFPWM.c: 177: RC3 = 0;
   833                           
   834                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   835  076D  1187               	bcf	7,3
   836                           
   837                           ;GRAFPWM.c: 178: RC0 = 0;
   838  076E  1007               	bcf	7,0
   839                           
   840                           ;GRAFPWM.c: 179: RC4 = 0;
   841  076F  1207               	bcf	7,4
   842                           
   843                           ;GRAFPWM.c: 181: pause(15);
   844  0770  00F0               	movwf	?_pause
   845  0771  01F1               	clrf	?_pause+1
   846  0772  27A2  120A  118A   	fcall	_pause
   847                           
   848                           ;GRAFPWM.c: 182: PORTD = init_value;
   849  0775  3003               	movlw	3
   850  0776  27FD               	call	PL5	;select bank 0
   851  0777  0088               	movwf	8	;volatile
   852  0778  300A               	movlw	10
   853                           
   854                           ;GRAFPWM.c: 183: ((RC0 = 1),(RC0=0));
   855  0779  1407               	bsf	7,0
   856  077A  1007               	bcf	7,0
   857                           
   858                           ;GRAFPWM.c: 184: pause(10);
   859  077B  00F0               	movwf	?_pause
   860  077C  01F1               	clrf	?_pause+1
   861  077D  27A2  120A  118A   	fcall	_pause
   862                           
   863                           ;GRAFPWM.c: 185: ((RC0 = 1),(RC0=0));
   864                           
   865                           ;GRAFPWM.c: 186: pause(10);
   866  0780  27F5  120A  118A   	fcall	PL4	;call to abstracted procedure
   867  0783  27A2  120A  118A   	fcall	_pause
   868                           
   869                           ;GRAFPWM.c: 187: ((RC0 = 1),(RC0=0));
   870                           
   871                           ;GRAFPWM.c: 188: pause(10);
   872  0786  27F5  120A  118A   	fcall	PL4	;call to abstracted procedure
   873  0789  27A2  120A  118A   	fcall	_pause
   874                           
   875                           ;GRAFPWM.c: 189: PORTD= 2;
   876  078C  3002               	movlw	2
   877  078D  27FD               	call	PL5	;select bank 0
   878  078E  0088               	movwf	8	;volatile
   879  078F  3028               	movlw	40
   880                           
   881                           ;GRAFPWM.c: 190: ((RC0 = 1),(RC0=0));
   882  0790  1407               	bsf	7,0
   883  0791  1007               	bcf	7,0
   884                           
   885                           ;GRAFPWM.c: 192: lcd_write(0x28);
   886  0792  27B3  120A  118A   	fcall	_lcd_write
   887                           
   888                           ;GRAFPWM.c: 193: lcd_write(0x0C);
   889  0795  300C               	movlw	12
   890  0796  27B3  120A  118A   	fcall	_lcd_write
   891                           
   892                           ;GRAFPWM.c: 194: lcd_write(0x0F);
   893  0799  300F               	movlw	15
   894  079A  27B3  120A  118A   	fcall	_lcd_write
   895                           
   896                           ;GRAFPWM.c: 195: lcd_clear();
   897  079D  27D3  120A  118A   	fcall	_lcd_clear
   898                           
   899                           ;GRAFPWM.c: 196: lcd_write(0x06);
   900  07A0  3006               	movlw	6
   901  07A1  2FB3               	ljmp	_lcd_write
   902  07A2                     __end_of_lcd_init:	
   903  07A2                     __ptext284:	
   904 ;; =============== function _ADC ends ============
   905                           
   906                           
   907 ;; *************** function _pause *****************
   908 ;; Defined at:
   909 ;;		line 199 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  usvalue         2    0[COMMON] unsigned short 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  x               2    2[COMMON] unsigned short 
   914 ;; Return value:  Size  Location     Type
   915 ;;		None               void
   916 ;; Registers used:
   917 ;;		wreg, status,2, status,0, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 11F/0
   920 ;;		On exit  : 11F/0
   921 ;;		Unchanged: FFE80/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   923 ;;      Params:         2       0       0       0       0
   924 ;;      Locals:         2       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0
   926 ;;      Totals:         4       0       0       0       0
   927 ;;Total ram usage:        4 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    1
   930 ;; This function calls:
   931 ;;		_msecbase
   932 ;; This function is called by:
   933 ;;		_ADC
   934 ;;		_PWM
   935 ;;		_lcd_write
   936 ;;		_lcd_clear
   937 ;;		_lcd_init
   938 ;; This function uses a non-reentrant model
   939 ;;
   940  07A2                     _pause:	
   941  07A2                     l2891:	
   942                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
   943                           
   944                           
   945                           ;GRAFPWM.c: 200: unsigned short x;
   946                           ;GRAFPWM.c: 201: for (x=0; x<=usvalue; x++)
   947  07A2  01F2               	clrf	pause@x
   948  07A3  01F3               	clrf	pause@x+1
   949  07A4                     l2897:	
   950  07A4  0873               	movf	pause@x+1,w
   951  07A5  0271               	subwf	pause@usvalue+1,w
   952  07A6  1D03               	skipz
   953  07A7  2FAA               	goto	u425
   954  07A8  0872               	movf	pause@x,w
   955  07A9  0270               	subwf	pause@usvalue,w
   956  07AA                     u425:	
   957  07AA  1C03               	btfss	3,0
   958  07AB  0008               	return
   959                           
   960                           ;GRAFPWM.c: 202: {
   961                           ;GRAFPWM.c: 203: msecbase();
   962  07AC  27C6  120A  118A   	fcall	_msecbase
   963  07AF  0AF2               	incf	pause@x,f
   964  07B0  1903               	skipnz
   965  07B1  0AF3               	incf	pause@x+1,f
   966  07B2  2FA4               	goto	l2897
   967  07B3                     __end_of_pause:	
   968  07B3                     __ptext281:	
   969 ;; =============== function _lcd_clear ends ============
   970                           
   971                           
   972 ;; *************** function _lcd_write *****************
   973 ;; Defined at:
   974 ;;		line 142 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  c               1    wreg     unsigned char 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  c               1    4[COMMON] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;		None               void
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0, pclath, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 11F/0
   985 ;;		On exit  : 17F/0
   986 ;;		Unchanged: FFE80/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   988 ;;      Params:         0       0       0       0       0
   989 ;;      Locals:         1       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0
   991 ;;      Totals:         1       0       0       0       0
   992 ;;Total ram usage:        1 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    2
   995 ;; This function calls:
   996 ;;		_pause
   997 ;; This function is called by:
   998 ;;		_lcd_clear
   999 ;;		_lcd_init
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002  07B3                     _lcd_write:	
  1003                           
  1004                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1005                           ;lcd_write@c stored from wreg
  1006  07B3  00F4               	movwf	lcd_write@c
  1007                           
  1008                           ;GRAFPWM.c: 143: pause(1);
  1009  07B4  01F0               	clrf	?_pause
  1010  07B5  0AF0               	incf	?_pause,f
  1011  07B6  01F1               	clrf	?_pause+1
  1012  07B7  27A2  120A  118A   	fcall	_pause
  1013                           
  1014                           ;GRAFPWM.c: 144: PORTD = ( ( c >> 4) & 0x0F);
  1015  07BA  0E74               	swapf	lcd_write@c,w
  1016  07BB  390F               	andlw	15
  1017  07BC  27FD               	call	PL5	;select bank 0
  1018  07BD  0088               	movwf	8	;volatile
  1019                           
  1020                           ;GRAFPWM.c: 145: ((RC0 = 1),(RC0=0));
  1021  07BE  1407               	bsf	7,0
  1022  07BF  1007               	bcf	7,0
  1023                           
  1024                           ;GRAFPWM.c: 146: PORTD = (c & 0x0F);
  1025  07C0  0874               	movf	lcd_write@c,w
  1026  07C1  390F               	andlw	15
  1027  07C2  0088               	movwf	8	;volatile
  1028                           
  1029                           ;GRAFPWM.c: 147: ((RC0 = 1),(RC0=0));
  1030  07C3  1407               	bsf	7,0
  1031  07C4  1007               	bcf	7,0
  1032  07C5  0008               	return
  1033  07C6                     __end_of_lcd_write:	
  1034  07C6                     __ptext288:	
  1035 ;; =============== function ___lwdiv ends ============
  1036                           
  1037                           
  1038 ;; *************** function _msecbase *****************
  1039 ;; Defined at:
  1040 ;;		line 207 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;		None
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;		None
  1045 ;; Return value:  Size  Location     Type
  1046 ;;		None               void
  1047 ;; Registers used:
  1048 ;;		wreg
  1049 ;; Tracked objects:
  1050 ;;		On entry : 11F/0
  1051 ;;		On exit  : 11F/0
  1052 ;;		Unchanged: FFE80/0
  1053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1054 ;;      Params:         0       0       0       0       0
  1055 ;;      Locals:         0       0       0       0       0
  1056 ;;      Temps:          0       0       0       0       0
  1057 ;;      Totals:         0       0       0       0       0
  1058 ;;Total ram usage:        0 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_pause
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066  07C6                     _msecbase:	
  1067                           
  1068                           ;GRAFPWM.c: 208: OPTION_REG = 0b11010001;
  1069                           
  1070                           ; Regs used in _msecbase: [wreg]
  1071  07C6  30D1               	movlw	209
  1072  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  1073  07C8  1303               	bcf	3,6	;RP1=0, select bank1
  1074  07C9  0081               	movwf	1	;volatile
  1075                           
  1076                           ;GRAFPWM.c: 209: TMR0 = 0x0E;
  1077  07CA  300E               	movlw	14
  1078  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  1079  07CC  0081               	movwf	1	;volatile
  1080                           
  1081                           ;GRAFPWM.c: 210: TMR0 = 0x8E;
  1082  07CD  308E               	movlw	142
  1083  07CE  0081               	movwf	1	;volatile
  1084  07CF                     l1109:	
  1085                           ;GRAFPWM.c: 211: while(!T0IF);
  1086                           
  1087  07CF  1D0B               	btfss	11,2
  1088  07D0  2FCF               	goto	l1109
  1089                           
  1090                           ;GRAFPWM.c: 212: T0IF = 0;
  1091  07D1  110B               	bcf	11,2
  1092  07D2  0008               	return
  1093  07D3                     __end_of_msecbase:	
  1094  07D3                     __ptext280:	
  1095 ;; =============== function _lcd_init ends ============
  1096                           
  1097                           
  1098 ;; *************** function _lcd_clear *****************
  1099 ;; Defined at:
  1100 ;;		line 150 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;		None
  1105 ;; Return value:  Size  Location     Type
  1106 ;;		None               void
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, pclath, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 17F/0
  1111 ;;		On exit  : 11F/0
  1112 ;;		Unchanged: FFE80/0
  1113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1114 ;;      Params:         0       0       0       0       0
  1115 ;;      Locals:         0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0
  1117 ;;      Totals:         0       0       0       0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    3
  1121 ;; This function calls:
  1122 ;;		_lcd_write
  1123 ;;		_pause
  1124 ;; This function is called by:
  1125 ;;		_lcd_init
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128  07D3                     _lcd_clear:	
  1129  07D3  3001               	movlw	1
  1130                           
  1131                           ;GRAFPWM.c: 151: RC3 = 0;
  1132                           
  1133                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1134  07D4  1187               	bcf	7,3
  1135                           
  1136                           ;GRAFPWM.c: 152: lcd_write(0x01);
  1137  07D5  27B3  120A  118A   	fcall	_lcd_write
  1138                           
  1139                           ;GRAFPWM.c: 153: pause (2);
  1140  07D8  3002               	movlw	2
  1141  07D9  00F0               	movwf	?_pause
  1142  07DA  01F1               	clrf	?_pause+1
  1143  07DB  2FA2               	ljmp	l2891
  1144  07DC                     __end_of_lcd_clear:	
  1145  07DC                     PL2:	
  1146  07DC  00F4               	movwf	??_PWM
  1147  07DD  1003               	clrc
  1148  07DE  0CF5               	rrf	??_PWM+1,f
  1149  07DF  0CF4               	rrf	??_PWM,f
  1150  07E0  1003               	clrc
  1151  07E1  0CF5               	rrf	??_PWM+1,f
  1152  07E2  0CF4               	rrf	??_PWM,f
  1153  07E3  0874               	movf	??_PWM,w
  1154  07E4  009E               	movwf	30	;volatile
  1155  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  1156  07E6  019E               	clrf	30	;volatile
  1157  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  1158  07E8  081E               	movf	30,w	;volatile
  1159  07E9  0008               	return
  1160  07EA                     PL3:	
  1161  07EA  1683               	bsf	3,5	;RP0=1, select bank1
  1162  07EB  081E               	movf	30,w	;volatile
  1163  07EC  00F4               	movwf	??_PWM
  1164  07ED  1003               	clrc
  1165  07EE  0CF4               	rrf	??_PWM,f
  1166  07EF  1003               	clrc
  1167  07F0  0CF4               	rrf	??_PWM,f
  1168  07F1  0874               	movf	??_PWM,w
  1169  07F2  380C               	iorlw	12
  1170  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  1171  07F4  0008               	return
  1172  07F5                     PL4:	
  1173  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  1174  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  1175  07F7  300A               	movlw	10
  1176  07F8  1407               	bsf	7,0
  1177  07F9  1007               	bcf	7,0
  1178  07FA  00F0               	movwf	?_pause
  1179  07FB  01F1               	clrf	?_pause+1
  1180  07FC  0008               	return
  1181  07FD                     PL5:	
  1182  07FD  1283               	bcf	3,5	;RP0=0, select bank0
  1183  07FE  1303               	bcf	3,6	;RP1=0, select bank0
  1184  07FF  0008               	return
  1185                           
  1186                           	psect	text285
  1187  061C                     __ptext285:	
  1188 ;; =============== function _pause ends ============
  1189                           
  1190                           
  1191 ;; *************** function _printf *****************
  1192 ;; Defined at:
  1193 ;;		line 461 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  f               1    wreg     PTR const unsigned char 
  1196 ;;		 -> STR_2(4), STR_1(4), 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  f               1    4[BANK0 ] PTR const unsigned char 
  1199 ;;		 -> STR_2(4), STR_1(4), 
  1200 ;;  _val            4    6[BANK0 ] struct .
  1201 ;;  c               1   10[BANK0 ] char 
  1202 ;;  prec            1    5[BANK0 ] char 
  1203 ;;  flag            1    3[BANK0 ] unsigned char 
  1204 ;;  ap              1    2[BANK0 ] PTR void [1]
  1205 ;;		 -> ?_printf(2), 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  2   12[COMMON] int 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 17F/0
  1212 ;;		On exit  : 17F/0
  1213 ;;		Unchanged: FFE80/0
  1214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1215 ;;      Params:         2       0       0       0       0
  1216 ;;      Locals:         0       9       0       0       0
  1217 ;;      Temps:          0       2       0       0       0
  1218 ;;      Totals:         2      11       0       0       0
  1219 ;;Total ram usage:       13 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; Hardware stack levels required when called:    1
  1222 ;; This function calls:
  1223 ;;		_putch
  1224 ;;		___lwdiv
  1225 ;;		___lwmod
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230  061C                     _printf:	
  1231                           
  1232                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1233                           ;printf@f stored from wreg
  1234  061C  00A4               	movwf	printf@f
  1235  061D  307C               	movlw	?_printf& (0+255)
  1236  061E  00A2               	movwf	printf@ap
  1237  061F                     l2889:	
  1238  061F  0824               	movf	printf@f,w
  1239  0620  0AA4               	incf	printf@f,f
  1240  0621  0084               	movwf	4
  1241  0622  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1242  0627  00AA               	movwf	printf@c
  1243  0628  08AA               	movf	printf@c,f
  1244  0629  1903               	btfsc	3,2
  1245  062A  0008               	return
  1246  062B  3A25               	xorlw	37
  1247  062C  1903               	skipnz
  1248  062D  2E33               	goto	l2849
  1249  062E  082A               	movf	printf@c,w
  1250  062F  26AF  120A  118A   	fcall	_putch
  1251  0632  2E1F               	goto	l2889
  1252  0633                     l2849:	
  1253  0633  01A3               	clrf	printf@flag
  1254  0634  0824               	movf	printf@f,w
  1255  0635  0AA4               	incf	printf@f,f
  1256  0636  0084               	movwf	4
  1257  0637  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1258  063C  00AA               	movwf	printf@c
  1259                           
  1260                           ; Switch size 1, requested type "space"
  1261                           ; Number of cases is 3, Range of values is 0 to 105
  1262                           ; switch strategies available:
  1263                           ; Name         Instructions Cycles
  1264                           ; simple_byte           10     6 (average)
  1265                           ; jumptable            260     6 (fixed)
  1266                           ; rangetable           110     6 (fixed)
  1267                           ; spacedrange          218     9 (fixed)
  1268                           ; locatedrange         106     3 (fixed)
  1269                           ;	Chosen strategy is simple_byte
  1270  063D  3A00               	xorlw	0	; case 0
  1271  063E  1903               	skipnz
  1272  063F  2EAE               	goto	l1142
  1273  0640  3A64               	xorlw	100	; case 100
  1274  0641  1903               	skipnz
  1275  0642  2E47               	goto	l2855
  1276  0643  3A0D               	xorlw	13	; case 105
  1277  0644  1903               	skipnz
  1278  0645  2E47               	goto	l2855
  1279  0646  2E1F               	goto	l2889
  1280  0647                     l2855:	
  1281  0647  0822               	movf	printf@ap,w
  1282  0648  0084               	movwf	4
  1283  0649  0800               	movf	0,w
  1284  064A  00A6               	movwf	printf@_val
  1285  064B  0A84               	incf	4,f
  1286  064C  0800               	movf	0,w
  1287  064D  00A7               	movwf	printf@_val+1
  1288  064E  0AA2               	incf	printf@ap,f
  1289  064F  0AA2               	incf	printf@ap,f
  1290  0650  1FA7               	btfss	printf@_val+1,7
  1291  0651  2E59               	goto	l2865
  1292  0652  3003               	movlw	3
  1293  0653  04A3               	iorwf	printf@flag,f
  1294  0654  09A6               	comf	printf@_val,f
  1295  0655  09A7               	comf	printf@_val+1,f
  1296  0656  0AA6               	incf	printf@_val,f
  1297  0657  1903               	skipnz
  1298  0658  0AA7               	incf	printf@_val+1,f
  1299  0659                     l2865:	
  1300  0659  01AA               	clrf	printf@c
  1301  065A  0AAA               	incf	printf@c,f
  1302  065B                     l2869:	
  1303  065B  1003               	clrc
  1304  065C  0D2A               	rlf	printf@c,w
  1305  065D  3E01               	addlw	low (_dpowers-__stringbase)
  1306  065E  0084               	movwf	4
  1307  065F  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1308  0664  00A0               	movwf	??_printf
  1309  0665  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1310  066A  00A1               	movwf	??_printf+1
  1311  066B  0227               	subwf	printf@_val+1,w
  1312  066C  1D03               	skipz
  1313  066D  2E70               	goto	u375
  1314  066E  0820               	movf	??_printf,w
  1315  066F  0226               	subwf	printf@_val,w
  1316  0670                     u375:	
  1317  0670  1C03               	btfss	3,0
  1318  0671  2E77               	goto	l2877
  1319  0672  0AAA               	incf	printf@c,f
  1320  0673  082A               	movf	printf@c,w
  1321  0674  3A05               	xorlw	5
  1322  0675  1D03               	skipz
  1323  0676  2E5B               	goto	l2869
  1324  0677                     l2877:	
  1325  0677  0823               	movf	printf@flag,w
  1326  0678  3903               	andlw	3
  1327  0679  1903               	btfsc	3,2
  1328  067A  2E7F               	goto	l2881
  1329  067B  302D               	movlw	45
  1330  067C  26AF  120A  118A   	fcall	_putch
  1331  067F                     l2881:	
  1332  067F  082A               	movf	printf@c,w
  1333  0680  00A5               	movwf	printf@prec
  1334  0681  2EAA               	goto	l2887
  1335  0682                     l2883:	
  1336  0682  300A               	movlw	10
  1337  0683  00F7               	movwf	?___lwmod
  1338  0684  01F8               	clrf	?___lwmod+1
  1339  0685  1003               	clrc
  1340  0686  0D25               	rlf	printf@prec,w
  1341  0687  3E01               	addlw	low (_dpowers-__stringbase)
  1342  0688  0084               	movwf	4
  1343  0689  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1344  068E  00F0               	movwf	?___lwdiv
  1345  068F  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1346  0694  00F1               	movwf	?___lwdiv+1
  1347  0695  0827               	movf	printf@_val+1,w
  1348  0696  00F3               	movwf	?___lwdiv+3
  1349  0697  0826               	movf	printf@_val,w
  1350  0698  00F2               	movwf	?___lwdiv+2
  1351  0699  26B5  120A  118A   	fcall	___lwdiv
  1352  069C  0871               	movf	?___lwdiv+1,w
  1353  069D  00FA               	movwf	?___lwmod+3
  1354  069E  0870               	movf	?___lwdiv,w
  1355  069F  00F9               	movwf	?___lwmod+2
  1356  06A0  26DF  120A  118A   	fcall	___lwmod
  1357  06A3  0877               	movf	?___lwmod,w
  1358  06A4  3E30               	addlw	48
  1359  06A5  00AA               	movwf	printf@c
  1360  06A6  082A               	movf	printf@c,w
  1361  06A7  26AF  120A  118A   	fcall	_putch
  1362  06AA                     l2887:	
  1363  06AA  03A5               	decf	printf@prec,f
  1364  06AB  0F25               	incfsz	printf@prec,w
  1365  06AC  2E82               	goto	l2883
  1366  06AD  2E1F               	goto	l2889
  1367  06AE                     l1142:	
  1368  06AE  0008               	return
  1369  06AF                     __end_of_printf:	
  1370  06AF                     __ptext291:	
  1371 ;; =============== function _getch ends ============
  1372                           
  1373                           
  1374 ;; *************** function _putch *****************
  1375 ;; Defined at:
  1376 ;;		line 36 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  byte            1    wreg     unsigned char 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  byte            1    0[COMMON] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;		None               void
  1383 ;; Registers used:
  1384 ;;		wreg
  1385 ;; Tracked objects:
  1386 ;;		On entry : 17F/0
  1387 ;;		On exit  : 17F/0
  1388 ;;		Unchanged: FFE80/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         1       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0
  1393 ;;      Totals:         1       0       0       0       0
  1394 ;;Total ram usage:        1 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_printf
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402  06AF                     _putch:	
  1403                           
  1404                           ; Regs used in _putch: [wreg]
  1405                           ;putch@byte stored from wreg
  1406  06AF  00F0               	movwf	putch@byte
  1407  06B0                     l1049:	
  1408                           ;GRAFPWM.c: 38: while(!TXIF)
  1409                           
  1410  06B0  1E0C               	btfss	12,4
  1411  06B1  2EB0               	goto	l1049
  1412                           
  1413                           ;GRAFPWM.c: 40: TXREG = byte;
  1414  06B2  0870               	movf	putch@byte,w
  1415  06B3  0099               	movwf	25	;volatile
  1416  06B4  0008               	return
  1417  06B5                     __end_of_putch:	
  1418  06B5                     __ptext287:	
  1419 ;; =============== function ___lwmod ends ============
  1420                           
  1421                           
  1422 ;; *************** function ___lwdiv *****************
  1423 ;; Defined at:
  1424 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwdiv.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  divisor         2    0[COMMON] unsigned int 
  1427 ;;  dividend        2    2[COMMON] unsigned int 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  quotient        2    4[COMMON] unsigned int 
  1430 ;;  counter         1    6[COMMON] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  2    0[COMMON] unsigned int 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 17F/0
  1437 ;;		On exit  : 17F/0
  1438 ;;		Unchanged: FFE80/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1440 ;;      Params:         4       0       0       0       0
  1441 ;;      Locals:         3       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0
  1443 ;;      Totals:         7       0       0       0       0
  1444 ;;Total ram usage:        7 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_printf
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452  06B5                     ___lwdiv:	
  1453                           
  1454                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1455  06B5  01F4               	clrf	___lwdiv@quotient
  1456  06B6  01F5               	clrf	___lwdiv@quotient+1
  1457  06B7  0871               	movf	___lwdiv@divisor+1,w
  1458  06B8  0470               	iorwf	___lwdiv@divisor,w
  1459  06B9  1903               	skipnz
  1460  06BA  2EDA               	goto	l2819
  1461  06BB  01F6               	clrf	___lwdiv@counter
  1462  06BC                     L3:	
  1463  06BC  0AF6               	incf	___lwdiv@counter,f
  1464  06BD  1BF1               	btfsc	___lwdiv@divisor+1,7
  1465  06BE  2EC3               	goto	l2807
  1466  06BF  1003               	clrc
  1467  06C0  0DF0               	rlf	___lwdiv@divisor,f
  1468  06C1  0DF1               	rlf	___lwdiv@divisor+1,f
  1469  06C2  2EBC               	goto	L3
  1470  06C3                     l2807:	
  1471  06C3  1003               	clrc
  1472  06C4  0DF4               	rlf	___lwdiv@quotient,f
  1473  06C5  0DF5               	rlf	___lwdiv@quotient+1,f
  1474  06C6  0871               	movf	___lwdiv@divisor+1,w
  1475  06C7  0273               	subwf	___lwdiv@dividend+1,w
  1476  06C8  1D03               	skipz
  1477  06C9  2ECC               	goto	u295
  1478  06CA  0870               	movf	___lwdiv@divisor,w
  1479  06CB  0272               	subwf	___lwdiv@dividend,w
  1480  06CC                     u295:	
  1481  06CC  1C03               	skipc
  1482  06CD  2ED6               	goto	L4
  1483  06CE  0870               	movf	___lwdiv@divisor,w
  1484  06CF  02F2               	subwf	___lwdiv@dividend,f
  1485  06D0  0871               	movf	___lwdiv@divisor+1,w
  1486  06D1  1C03               	skipc
  1487  06D2  03F3               	decf	___lwdiv@dividend+1,f
  1488  06D3  02F3               	subwf	___lwdiv@dividend+1,f
  1489  06D4  1474               	bsf	___lwdiv@quotient,0
  1490  06D5  1003               	clrc
  1491  06D6                     L4:	
  1492  06D6  0CF1               	rrf	___lwdiv@divisor+1,f
  1493  06D7  0CF0               	rrf	___lwdiv@divisor,f
  1494  06D8  0BF6               	decfsz	___lwdiv@counter,f
  1495  06D9  2EC3               	goto	l2807
  1496  06DA                     l2819:	
  1497  06DA  0875               	movf	___lwdiv@quotient+1,w
  1498  06DB  00F1               	movwf	?___lwdiv+1
  1499  06DC  0874               	movf	___lwdiv@quotient,w
  1500  06DD  00F0               	movwf	?___lwdiv
  1501  06DE  0008               	return
  1502  06DF                     __end_of___lwdiv:	
  1503  06DF                     __ptext286:	
  1504 ;; =============== function _printf ends ============
  1505                           
  1506                           
  1507 ;; *************** function ___lwmod *****************
  1508 ;; Defined at:
  1509 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwmod.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  divisor         2    7[COMMON] unsigned int 
  1512 ;;  dividend        2    9[COMMON] unsigned int 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  counter         1   11[COMMON] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2    7[COMMON] unsigned int 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 17F/0
  1521 ;;		On exit  : 17F/0
  1522 ;;		Unchanged: FFE80/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1524 ;;      Params:         4       0       0       0       0
  1525 ;;      Locals:         1       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0
  1527 ;;      Totals:         5       0       0       0       0
  1528 ;;Total ram usage:        5 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_printf
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536  06DF                     ___lwmod:	
  1537                           
  1538                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1539  06DF  0878               	movf	___lwmod@divisor+1,w
  1540  06E0  0477               	iorwf	___lwmod@divisor,w
  1541  06E1  1903               	skipnz
  1542  06E2  2EFE               	goto	l2839
  1543  06E3  01FB               	clrf	___lwmod@counter
  1544  06E4                     L1:	
  1545  06E4  0AFB               	incf	___lwmod@counter,f
  1546  06E5  1BF8               	btfsc	___lwmod@divisor+1,7
  1547  06E6  2EEB               	goto	l2831
  1548  06E7  1003               	clrc
  1549  06E8  0DF7               	rlf	___lwmod@divisor,f
  1550  06E9  0DF8               	rlf	___lwmod@divisor+1,f
  1551  06EA  2EE4               	goto	L1
  1552  06EB                     l2831:	
  1553  06EB  0878               	movf	___lwmod@divisor+1,w
  1554  06EC  027A               	subwf	___lwmod@dividend+1,w
  1555  06ED  1D03               	skipz
  1556  06EE  2EF1               	goto	u335
  1557  06EF  0877               	movf	___lwmod@divisor,w
  1558  06F0  0279               	subwf	___lwmod@dividend,w
  1559  06F1                     u335:	
  1560  06F1  1C03               	skipc
  1561  06F2  2EFA               	goto	L2
  1562  06F3  0877               	movf	___lwmod@divisor,w
  1563  06F4  02F9               	subwf	___lwmod@dividend,f
  1564  06F5  0878               	movf	___lwmod@divisor+1,w
  1565  06F6  1C03               	skipc
  1566  06F7  03FA               	decf	___lwmod@dividend+1,f
  1567  06F8  02FA               	subwf	___lwmod@dividend+1,f
  1568  06F9  1003               	clrc
  1569  06FA                     L2:	
  1570  06FA  0CF8               	rrf	___lwmod@divisor+1,f
  1571  06FB  0CF7               	rrf	___lwmod@divisor,f
  1572  06FC  0BFB               	decfsz	___lwmod@counter,f
  1573  06FD  2EEB               	goto	l2831
  1574  06FE                     l2839:	
  1575  06FE  087A               	movf	___lwmod@dividend+1,w
  1576  06FF  00F8               	movwf	?___lwmod+1
  1577  0700  0879               	movf	___lwmod@dividend,w
  1578  0701  00F7               	movwf	?___lwmod
  1579  0702  0008               	return
  1580  0703                     __end_of___lwmod:	
  1581                           
  1582                           	psect	text289
  1583  05C5                     __ptext289:	
  1584 ;; =============== function _msecbase ends ============
  1585                           
  1586                           
  1587 ;; *************** function _init_comms *****************
  1588 ;; Defined at:
  1589 ;;		line 50 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;		None               void
  1596 ;; Registers used:
  1597 ;;		wreg, status,2
  1598 ;; Tracked objects:
  1599 ;;		On entry : 17F/0
  1600 ;;		On exit  : 17F/60
  1601 ;;		Unchanged: FFE80/0
  1602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1603 ;;      Params:         0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615  05C5                     _init_comms:	
  1616                           
  1617                           ;GRAFPWM.c: 51: TRISC7 = 1;
  1618                           
  1619                           ; Regs used in _init_comms: [wreg+status,2]
  1620  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  1621  05C6  3019               	movlw	25
  1622  05C7  1787               	bsf	7,7
  1623                           
  1624                           ;GRAFPWM.c: 52: TRISC6 = 0;
  1625  05C8  1307               	bcf	7,6
  1626                           
  1627                           ;GRAFPWM.c: 53: SPBRG = 0x19;
  1628  05C9  0099               	movwf	25	;volatile
  1629                           
  1630                           ;GRAFPWM.c: 55: RCSTA = 0x90;
  1631  05CA  3090               	movlw	144
  1632  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  1633  05CC  0098               	movwf	24	;volatile
  1634                           
  1635                           ;GRAFPWM.c: 56: TXSTA = 0x26;
  1636  05CD  3026               	movlw	38
  1637  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  1638  05CF  0098               	movwf	24	;volatile
  1639                           
  1640                           ;GRAFPWM.c: 57: BAUDCTL = 0;
  1641  05D0  1703               	bsf	3,6	;RP1=1, select bank3
  1642  05D1  0187               	clrf	7	;volatile
  1643  05D2  0008               	return
  1644  05D3                     __end_of_init_comms:	
  1645                           
  1646                           	psect	text290
  1647  05B4                     __ptext290:	
  1648 ;; =============== function _init_comms ends ============
  1649                           
  1650                           
  1651 ;; *************** function _getch *****************
  1652 ;; Defined at:
  1653 ;;		line 43 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\GRAFPWM\GRAFPWM.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;		None
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      unsigned char 
  1660 ;; Registers used:
  1661 ;;		wreg
  1662 ;; Tracked objects:
  1663 ;;		On entry : 15F/20
  1664 ;;		On exit  : 17F/0
  1665 ;;		Unchanged: FFE80/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1667 ;;      Params:         0       0       0       0       0
  1668 ;;      Locals:         0       0       0       0       0
  1669 ;;      Temps:          0       0       0       0       0
  1670 ;;      Totals:         0       0       0       0       0
  1671 ;;Total ram usage:        0 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679  05B4                     _getch:	
  1680  05B4                     l1055:	
  1681                           ;GRAFPWM.c: 45: while(!RCIF)
  1682                           
  1683                           ; Regs used in _getch: [wreg]
  1684                           
  1685  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  1686  05B5  1E8C               	btfss	12,5
  1687  05B6  2DB4               	goto	l1055
  1688                           
  1689                           ;GRAFPWM.c: 47: return RCREG;
  1690                           ;	Return value of _getch is never used
  1691  05B7  081A               	movf	26,w	;volatile
  1692  05B8  0008               	return
  1693  05B9                     __end_of_getch:	
  1694                           
  1695                           	psect	text292
  1696  0000                     __ptext292:	
  1697 ;; =============== function _putch ends ============
  1698                           
  1699  007E                     btemp	set	126	;btemp
  1700  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Sat May 21 15:57:37 2022

                   pc 0002                    fsr 0004                   _ADC 0725                   _RC0 0038  
                 _RC3 003B                   _RC4 003C                   _PR2 0092                   u335 06F1  
                 u425 07AA                   u445 0737                   u295 06CC                   u375 0670  
                 u465 075C                   _PWM 0703                   fsr0 0004                   indf 0000  
                ?_ADC 0070                  ?_PWM 0070                  l1100 0000                  l1112 0000  
                l1106 0000                  l1052 0000                  l1061 0000                  l1109 07CF  
                l1142 06AE                  l1070 0728                  l1055 05B4                  l1049 06B0  
                l1073 074D                  l3001 0000                  l1058 0000                  l1082 0000  
                l3011 0000                  l3003 0000                  l1076 0000                  l1085 0000  
                l3021 05F6                  l3013 0000                  l3005 0000                  l1079 0000  
                l3023 0000                  l3015 0000                  l3007 0000                  l2144 0000  
                l3025 0000                  l3017 0000                  l3009 0000                  l2154 0000  
                l3027 0000                  l3019 0000                  l3029 0000                  l2813 0000  
                l2901 0000                  l2807 06C3                  l2831 06EB                  l2823 0000  
                l2911 0000                  l2817 0000                  l2809 0000                  l2921 0000  
                l2913 0000                  l2905 0000                  l2819 06DA                  l2843 0000  
                l2907 0000                  l2931 0000                  l2923 0000                  l2837 0000  
                l2853 0000                  l2917 0000                  l2909 0000                  l2933 0000  
                l2925 0000                  l2941 0000                  l2783 0000                  l2791 0000  
                l2839 06FE                  l2863 0000                  l2855 0647                  l2919 0000  
                l2935 0000                  l2927 0000                  l2951 0000                  l2943 0000  
                l2793 0000                  l2881 067F                  l2865 0659                  l2857 0000  
                l2849 0633                  l2937 0000                  l2929 0000                  l2953 0000  
                l2945 0000                  l2961 0000                  l2779 0000                  l2795 0000  
                l2883 0682                  l2875 0000                  l2859 0000                  l2891 07A2  
                l2939 0000                  l2947 0000                  l2955 0000                  l2971 0000  
                l2963 0000                  l2789 0000                  l2797 0000                  l2885 0000  
                l2877 0677                  l2869 065B                  l2949 0000                  l2957 0000  
                l2981 0000                  l2973 0000                  l2965 0000                  l2799 0000  
                l2887 06AA                  l2895 0000                  l2991 0000                  l2983 0000  
                l2975 0000                  l2967 0000                  l2959 0000                  l2889 061F  
                l2897 07A4                  l2993 0000                  l2985 0000                  l2977 0000  
                l2969 0000                  l2899 0000                  l2995 0000                  l2987 0000  
                l2979 0000                  l2997 0000                  l2989 0000                  l2999 0000  
                _ADFM 04FF                  STR_1 0013                  STR_2 0013                  _T0IF 005A  
                _RCIF 0065                  _TMR0 0001                  _TXIF 0064                  _main 05D3  
                _pwm1 002B                  _pwm2 002D                  btemp 007E                  start 0000  
               ??_ADC 0074                 ??_PWM 0074                 ?_main 0070                 _ANSEL 0188  
               _T2CON 0012       __end_of___lwdiv 06DF       __end_of___lwmod 0703                 _RCREG 001A  
               _RCSTA 0018                 _SPBRG 0099                 _PORTD 0008                 _TRISA 0085  
               _TRISB 0086                 _TRISC 0087                 _TRISD 0088                 _TRISE 0089  
               _TXREG 0019                 _TXSTA 0098                 _getch 05B4                 _vadc1 002F  
               _vadc2 0031                 _pause 07A2                 _putch 06AF                 pclath 000A  
               status 0003                 wtemp0 007E          __end_of_main 061C                ??_main 007E  
              ?_getch 0070                _ADCON0 001F                _ADRESH 001E                _ADRESL 009E  
              _CCPR1L 0015                ?_pause 0070                _CCPR2L 001B                ?_putch 0070  
              _ANSELH 0189                _TRISC6 043E                _TRISC7 043F      __end_of_lcd_init 07A2  
           ??___lwdiv 0074             ??___lwmod 007B                _printf 061C      __end_of_msecbase 07D3  
              pause@x 0072        __pcstackCOMMON 0070         __end_of_getch 05B9         __end_of_pause 07B3  
       __end_of_putch 06B5    __size_of_lcd_clear 0009               ??_getch 0070    __size_of_lcd_write 0013  
             ??_pause 0072               ??_putch 0070            __pbssBANK0 002B            __pmaintext 05D3  
             _CCP1CON 0017               _CCP2CON 001D               _BAUDCTL 0187               ?_printf 007C  
             _GO_DONE 00F9             ?_lcd_init 0070             ?_msecbase 0070     __end_of_lcd_clear 07DC  
   __end_of_lcd_write 07C6               ___lwdiv 06B5               ___lwmod 06DF            _init_comms 05C5  
     __size_of_printf 0093          __size_of_ADC 0047          __size_of_PWM 0022               _dpowers 0009  
          ??_lcd_init 0075  end_of_initialization 05C1            ??_msecbase 0070               printf@c 002A  
             printf@f 0024            lcd_write@c 0074           ?_init_comms 0070        __end_of_printf 06AF  
 start_initialization 05B9           __end_of_ADC 076C           __end_of_PWM 0725              ??_printf 0020  
        pause@usvalue 0070         __pcstackBANK0 0020   __size_of_init_comms 000E     __size_of_lcd_init 0036  
    ___lwdiv@dividend 0072     __size_of_msecbase 000D             __ptext280 07D3             __ptext281 07B3  
           __ptext290 05B4             __ptext282 0703             __ptext291 06AF             __ptext283 0725  
           __ptext292 0000             __ptext284 07A2             __ptext285 061C             __ptext286 06DF  
           __ptext287 06B5             __ptext279 076C             __ptext288 07C6             __ptext289 05C5  
            ?___lwdiv 0070              ?___lwmod 0077             _lcd_clear 07D3             __pstrings 0003  
           _lcd_write 07B3      ___lwdiv@quotient 0074        __size_of_getch 0005        __size_of_pause 0011  
      __size_of_putch 0006            ?_lcd_clear 0070           __stringbase 0008            ?_lcd_write 0070  
          printf@_val 0026            printf@flag 0023            printf@prec 0025          ??_init_comms 0070  
    __size_of___lwdiv 002A      __size_of___lwmod 0024       ___lwdiv@divisor 0070       ___lwdiv@counter 0076  
            _lcd_init 076C         __size_of_main 0049    __end_of_init_comms 05D3              _msecbase 07C6  
         ??_lcd_clear 0075           ??_lcd_write 0074             putch@byte 0070      ___lwmod@dividend 0079  
           stringcode 0003              printf@ap 0022            _OPTION_REG 0081       ___lwmod@divisor 0077  
     ___lwmod@counter 007B              stringdir 0003              stringtab 0003  



HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Fri May 20 11:57:19 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text413,local,class=CODE,delta=2
    13                           	psect	text418,local,class=CODE,delta=2
    14                           	psect	text421,local,class=CODE,delta=2
    15                           	psect	text427,local,class=CODE,delta=2
    16                           	psect	text428,local,class=CODE,delta=2
    17                           	psect	text429,local,class=CODE,delta=2
    18                           	psect	text430,local,class=CODE,delta=2
    19                           	psect	functab,global,reloc=256,class=CODE,delta=2
    20                           	psect	pa_nodes,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  000A                     	;#
    23                           
    24                           	psect	config
    25  2007  E0F4               	dw	57588	;#
    26  2008  FFFF               	dw	65535	;#
    27                           
    28                           	psect	strings
    29  0003                     __pstrings:	
    30  0003                     stringtab:	
    31                           ;	global	stringdir,stringtab,__stringbase
    32                           
    33                           
    34                           ;	String table - string pointers are 1 byte each
    35  0003  1BFF               	btfsc	btemp+1,7
    36  0004  280D               	ljmp	stringcode
    37  0005  1383               	bcf	3,7
    38  0006  187F               	btfsc	btemp+1,0
    39  0007  1783               	bsf	3,7
    40  0008  0800               	movf	0,w
    41  0009  0A84               	incf	4,f
    42  000A  1903               	skipnz
    43  000B  0AFF               	incf	btemp+1,f
    44  000C  0008               	return
    45  000D                     stringcode:	
    46  000D                     stringdir:	
    47  000D  3000               	movlw	high stringdir
    48  000E  008A               	movwf	10
    49  000F  0804               	movf	4,w
    50  0010  0A84               	incf	4,f
    51  0011  0782               	addwf	2,f
    52  0012                     __stringbase:	
    53  0012  3400               	retlw	0
    54  0013                     _dpowers:	
    55  0013  3401               	retlw	1
    56  0014  3400               	retlw	0
    57  0015  340A               	retlw	10
    58  0016  3400               	retlw	0
    59  0017  3464               	retlw	100
    60  0018  3400               	retlw	0
    61  0019  34E8               	retlw	232
    62  001A  3403               	retlw	3
    63  001B  3410               	retlw	16
    64  001C  3427               	retlw	39
    65  001F                     _ADCON0	set	31
    66  001E                     _ADRESH	set	30
    67  0017                     _CCP1CON	set	23
    68  001D                     _CCP2CON	set	29
    69  0015                     _CCPR1L	set	21
    70  001B                     _CCPR2L	set	27
    71  0005                     _PORTA	set	5
    72  0006                     _PORTB	set	6
    73  0008                     _PORTD	set	8
    74  001A                     _RCREG	set	26
    75  0018                     _RCSTA	set	24
    76  0012                     _T2CON	set	18
    77  0001                     _TMR0	set	1
    78  0019                     _TXREG	set	25
    79  00F9                     _GO_DONE	set	249
    80  0038                     _RC0	set	56
    81  003B                     _RC3	set	59
    82  003C                     _RC4	set	60
    83  0065                     _RCIF	set	101
    84  005A                     _T0IF	set	90
    85  0064                     _TXIF	set	100
    86  0081                     _OPTION_REG	set	129
    87  0092                     _PR2	set	146
    88  0099                     _SPBRG	set	153
    89  0085                     _TRISA	set	133
    90  0086                     _TRISB	set	134
    91  0087                     _TRISC	set	135
    92  0088                     _TRISD	set	136
    93  0089                     _TRISE	set	137
    94  0098                     _TXSTA	set	152
    95  04FF                     _ADFM	set	1279
    96  043E                     _TRISC6	set	1086
    97  043F                     _TRISC7	set	1087
    98  0188                     _ANSEL	set	392
    99  0189                     _ANSELH	set	393
   100  0187                     _BAUDCTL	set	391
   101  009E                     _ADRESL	set	158
   102  001D                     STR_5:	
   103  001D  3470               	retlw	112	;'p'
   104  001E  346F               	retlw	111	;'o'
   105  001F  3472               	retlw	114	;'r'
   106  0020  3474               	retlw	116	;'t'
   107  0021  3461               	retlw	97	;'a'
   108  0022  343A               	retlw	58	;':'
   109  0023  3400               	retlw	0
   110  0024                     STR_7:	
   111  0024  3470               	retlw	112	;'p'
   112  0025  3477               	retlw	119	;'w'
   113  0026  346D               	retlw	109	;'m'
   114  0027  3431               	retlw	49	;'1'
   115  0028  343A               	retlw	58	;':'
   116  0029  3400               	retlw	0
   117  002A                     STR_9:	
   118  002A  3470               	retlw	112	;'p'
   119  002B  3477               	retlw	119	;'w'
   120  002C  346D               	retlw	109	;'m'
   121  002D  3432               	retlw	50	;'2'
   122  002E  343A               	retlw	58	;':'
   123  002F  3400               	retlw	0
   124  0030                     STR_1:	
   125  0030  3425               	retlw	37	;'%'
   126  0031  3464               	retlw	100	;'d'
   127  0032  3420               	retlw	32	;' '
   128  0033  3400               	retlw	0
   129  0034                     STR_4:	
   130  0034  3425               	retlw	37	;'%'
   131  0035  3464               	retlw	100	;'d'
   132  0036  3400               	retlw	0
   133  0030                     
   134                           	psect	cinit
   135  07ED                     start_initialization:	
   136  07ED  3020               	movlw	low __pbssBANK0
   137                           
   138                           ; Clear objects allocated to BANK0
   139  07EE  1383               	bcf	3,7	;select IRP bank0
   140  07EF  0084               	movwf	4
   141  07F0  304A               	movlw	low (__pbssBANK0+42)
   142  07F1  120A  118A  27F8   	fcall	clear_ram
   143  07F4                     end_of_initialization:	
   144                           ;End of C runtime variable initialization code
   145                           
   146  07F4  0183               	clrf	3
   147  07F5  120A  118A  2D9F   	ljmp	_main	;jump to C main() function
   148                           
   149                           	psect	bssBANK0
   150  0020                     __pbssBANK0:	
   151  0020                     _op:	
   152  0020                     	ds	2
   153  0022                     _pwm1:	
   154  0022                     	ds	2
   155  0024                     _pwm2:	
   156  0024                     	ds	2
   157  0026                     _vadc1:	
   158  0026                     	ds	2
   159  0028                     _vadc2:	
   160  0028                     	ds	2
   161  002A                     _vporta:	
   162  002A                     	ds	2
   163  002C                     _vportb:	
   164  002C                     	ds	2
   165  002E                     _PA1:	
   166  002E                     	ds	5
   167  0033                     _PA2:	
   168  0033                     	ds	5
   169  0038                     _carac2:	
   170  0038                     	ds	5
   171  003D                     _carac3:	
   172  003D                     	ds	5
   173  0042                     _PA:	
   174  0042                     	ds	4
   175  0046                     _carac1:	
   176  0046                     	ds	4
   177                           
   178                           	psect	clrtext
   179  07F8                     clear_ram:	
   180                           ;	Called with FSR containing the base address, and
   181                           ;	W with the last address+1
   182                           
   183  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   184  07F9                     clrloop:	
   185  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   186  07FA  0A84               	incf	4,f	;increment pointer
   187  07FB  0604               	xorwf	4,w	;XOR with final address
   188  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   189  07FD  3400               	retlw	0	;all done for this memory range, return
   190  07FE  0604               	xorwf	4,w	;XOR again to restore value
   191  07FF  2FF9               	goto	clrloop	;do the next byte
   192                           
   193                           	psect	cstackCOMMON
   194  0070                     __pcstackCOMMON:	
   195  0070                     ?_lcd_init:	
   196  0070                     ?_ADC:	
   197                           ; 0 bytes @ 0x0
   198                           
   199  0070                     ??_ADC:	
   200                           ; 0 bytes @ 0x0
   201                           
   202  0070                     ?_lcd_clear:	
   203                           ; 0 bytes @ 0x0
   204                           
   205  0070                     ?_lcd_goto:	
   206                           ; 0 bytes @ 0x0
   207                           
   208  0070                     ?_PWM:	
   209                           ; 0 bytes @ 0x0
   210                           
   211  0070                     ?_pause:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0070                     ?_msecbase:	
   215                           ; 0 bytes @ 0x0
   216                           
   217  0070                     ??_msecbase:	
   218                           ; 0 bytes @ 0x0
   219                           
   220  0070                     ?_isdigit:	
   221                           ; 0 bytes @ 0x0
   222                           
   223  0070                     ??_isdigit:	
   224                           ; 1 bit 
   225                           
   226  0070                     ?_putch:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ??_getch:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_init_comms:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ??_init_comms:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_main:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_lcd_write:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_getch:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?___wmul:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?___lwdiv:	
   251                           ; 2 bytes @ 0x0
   252                           
   253  0070                     putch@byte:	
   254                           ; 2 bytes @ 0x0
   255                           
   256  0070                     _isdigit$2431:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     pause@usvalue:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ___wmul@multiplier:	
   263                           ; 2 bytes @ 0x0
   264                           
   265  0070                     ___lwdiv@divisor:	
   266                           ; 2 bytes @ 0x0
   267                           
   268                           
   269                           ; 2 bytes @ 0x0
   270  0070                     	ds	1
   271  0071                     ??_putch:	
   272  0071                     isdigit@c:	
   273                           ; 0 bytes @ 0x1
   274                           
   275                           
   276                           ; 1 bytes @ 0x1
   277  0071                     	ds	1
   278  0072                     ??_pause:	
   279  0072                     pause@x:	
   280                           ; 0 bytes @ 0x2
   281                           
   282  0072                     ___wmul@multiplicand:	
   283                           ; 2 bytes @ 0x2
   284                           
   285  0072                     ___lwdiv@dividend:	
   286                           ; 2 bytes @ 0x2
   287                           
   288                           
   289                           ; 2 bytes @ 0x2
   290  0072                     	ds	2
   291  0074                     ??_PWM:	
   292  0074                     ??_lcd_write:	
   293                           ; 0 bytes @ 0x4
   294                           
   295  0074                     ??___wmul:	
   296                           ; 0 bytes @ 0x4
   297                           
   298  0074                     ??___lwdiv:	
   299                           ; 0 bytes @ 0x4
   300                           
   301  0074                     lcd_write@c:	
   302                           ; 0 bytes @ 0x4
   303                           
   304  0074                     ___wmul@product:	
   305                           ; 1 bytes @ 0x4
   306                           
   307  0074                     ___lwdiv@quotient:	
   308                           ; 2 bytes @ 0x4
   309                           
   310                           
   311                           ; 2 bytes @ 0x4
   312  0074                     	ds	1
   313  0075                     ??_lcd_init:	
   314  0075                     ??_lcd_clear:	
   315                           ; 0 bytes @ 0x5
   316                           
   317  0075                     ??_lcd_goto:	
   318                           ; 0 bytes @ 0x5
   319                           
   320  0075                     ?_lcd_puts:	
   321                           ; 0 bytes @ 0x5
   322                           
   323  0075                     lcd_goto@pos:	
   324                           ; 0 bytes @ 0x5
   325                           
   326  0075                     lcd_puts@s:	
   327                           ; 1 bytes @ 0x5
   328                           
   329                           
   330                           ; 2 bytes @ 0x5
   331  0075                     	ds	1
   332  0076                     ?_atoi:	
   333  0076                     ___lwdiv@counter:	
   334                           ; 2 bytes @ 0x6
   335                           
   336                           
   337                           ; 1 bytes @ 0x6
   338  0076                     	ds	1
   339  0077                     ??_lcd_puts:	
   340  0077                     ?___lwmod:	
   341                           ; 0 bytes @ 0x7
   342                           
   343  0077                     ___lwmod@divisor:	
   344                           ; 2 bytes @ 0x7
   345                           
   346                           
   347                           ; 2 bytes @ 0x7
   348  0077                     	ds	1
   349  0078                     ??_atoi:	
   350                           
   351                           ; 0 bytes @ 0x8
   352  0078                     	ds	1
   353  0079                     ___lwmod@dividend:	
   354                           
   355                           ; 2 bytes @ 0x9
   356  0079                     	ds	1
   357  007A                     atoi@sign:	
   358                           
   359                           ; 1 bytes @ 0xA
   360  007A                     	ds	1
   361  007B                     ??___lwmod:	
   362  007B                     ___lwmod@counter:	
   363                           ; 0 bytes @ 0xB
   364                           
   365  007B                     atoi@a:	
   366                           ; 1 bytes @ 0xB
   367                           
   368                           
   369                           ; 2 bytes @ 0xB
   370  007B                     	ds	1
   371  007C                     ?__doprnt:	
   372  007C                     __doprnt@f:	
   373                           ; 2 bytes @ 0xC
   374                           
   375                           
   376                           ; 1 bytes @ 0xC
   377  007C                     	ds	1
   378  007D                     __doprnt@ap:	
   379  007D                     atoi@s:	
   380                           ; 1 bytes @ 0xD
   381                           
   382                           
   383                           ; 1 bytes @ 0xD
   384  007D                     	ds	1
   385  007E                     ??_printf:	
   386  007E                     ??_sprintf:	
   387                           ; 0 bytes @ 0xE
   388                           
   389  007E                     ??_main:	
   390                           ; 0 bytes @ 0xE
   391                           
   392                           
   393                           	psect	cstackBANK0
   394  004A                     __pcstackBANK0:	
   395                           ; 0 bytes @ 0xE
   396                           
   397  004A                     ??__doprnt:	
   398                           
   399                           ; 0 bytes @ 0x0
   400  004A                     	ds	2
   401  004C                     __doprnt@flag:	
   402                           
   403                           ; 1 bytes @ 0x2
   404  004C                     	ds	1
   405  004D                     __doprnt@prec:	
   406                           
   407                           ; 1 bytes @ 0x3
   408  004D                     	ds	1
   409  004E                     __doprnt@_val:	
   410                           
   411                           ; 4 bytes @ 0x4
   412  004E                     	ds	4
   413  0052                     __doprnt@c:	
   414                           
   415                           ; 1 bytes @ 0x8
   416  0052                     	ds	1
   417  0053                     __doprnt@pb:	
   418                           
   419                           ; 1 bytes @ 0x9
   420  0053                     	ds	1
   421  0054                     ?_printf:	
   422  0054                     ?_sprintf:	
   423                           ; 2 bytes @ 0xA
   424                           
   425  0054                     sprintf@f:	
   426                           ; 2 bytes @ 0xA
   427                           
   428                           
   429                           ; 1 bytes @ 0xA
   430  0054                     	ds	2
   431  0056                     printf@f:	
   432                           
   433                           ; 1 bytes @ 0xC
   434  0056                     	ds	1
   435  0057                     printf@ap:	
   436  0057                     sprintf@wh:	
   437                           ; 1 bytes @ 0xD
   438                           
   439                           
   440                           ; 1 bytes @ 0xD
   441  0057                     	ds	1
   442  0058                     sprintf@ap:	
   443  0058                     printf@pb:	
   444                           ; 1 bytes @ 0xE
   445                           
   446                           
   447                           ; 2 bytes @ 0xE
   448  0058                     	ds	1
   449  0059                     sprintf@pb:	
   450                           
   451                           ; 2 bytes @ 0xF
   452  0059                     	ds	2
   453  005B                     main@i:	
   454                           
   455                           ; 2 bytes @ 0x11
   456  005B                     	ds	2
   457  005D                     main@i_1853:	
   458                           
   459                           ; 2 bytes @ 0x13
   460  005D                     	ds	2
   461  005F                     main@i_1854:	
   462                           
   463                           ; 2 bytes @ 0x15
   464  005F                     	ds	2
   465                           
   466                           	psect	maintext
   467  059F                     __pmaintext:	
   468 ;;Data sizes: Strings 26, constant 10, data 0, bss 42, persistent 0 stack 0
   469 ;;Auto spaces:   Size  Autos    Used
   470 ;; COMMON          14     14      14
   471 ;; BANK0           80     23      65
   472 ;; BANK1           80      0       0
   473 ;; BANK3           96      0       0
   474 ;; BANK2           96      0       0
   475 ;;
   476 ;; Pointer list with targets:
   477 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   478 ;;
   479 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   480 ;;
   481 ;; ?___lwmod	unsigned int  size(1) Largest target is 2
   482 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   483 ;;
   484 ;; ?_atoi	int  size(1) Largest target is 0
   485 ;;
   486 ;; sprintf@f	PTR const unsigned char  size(1) Largest target is 3
   487 ;;		 -> STR_8(CODE[3]), STR_6(CODE[3]), STR_4(CODE[3]), 
   488 ;;
   489 ;; ?_sprintf	int  size(1) Largest target is 5
   490 ;;		 -> NULL(NULL[0]), carac3(BANK0[5]), carac2(BANK0[5]), carac1(BANK0[4]), 
   491 ;;
   492 ;; sprintf@ap	PTR void [1] size(1) Largest target is 2
   493 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   494 ;;
   495 ;; sprintf@wh	PTR unsigned char  size(1) Largest target is 5
   496 ;;		 -> carac3(BANK0[5]), carac2(BANK0[5]), carac1(BANK0[4]), 
   497 ;;
   498 ;; pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   499 ;;		 -> Absolute function(), putch(), 
   500 ;;
   501 ;; pb.ptr	PTR unsigned char  size(1) Largest target is 5
   502 ;;		 -> NULL(NULL[0]), carac3(BANK0[5]), carac2(BANK0[5]), carac1(BANK0[4]), 
   503 ;;
   504 ;; printf@f	PTR const unsigned char  size(1) Largest target is 4
   505 ;;		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 
   506 ;;
   507 ;; ?_printf	int  size(1) Largest target is 0
   508 ;;
   509 ;; printf@ap	PTR void [1] size(1) Largest target is 2
   510 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   511 ;;
   512 ;; pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   513 ;;		 -> Absolute function(), putch(), 
   514 ;;
   515 ;; pb.ptr	PTR unsigned char  size(1) Largest target is 5
   516 ;;		 -> NULL(NULL[0]), carac3(BANK0[5]), carac2(BANK0[5]), carac1(BANK0[4]), 
   517 ;;
   518 ;; atoi@s	PTR const unsigned char  size(1) Largest target is 5
   519 ;;		 -> PA2(BANK0[5]), PA1(BANK0[5]), PA(BANK0[4]), 
   520 ;;
   521 ;; _doprnt@ap	PTR PTR void  size(1) Largest target is 2
   522 ;;		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 
   523 ;;
   524 ;; _doprnt@f	PTR const unsigned char  size(1) Largest target is 4
   525 ;;		 -> STR_8(CODE[3]), STR_6(CODE[3]), STR_4(CODE[3]), STR_3(CODE[4]), 
   526 ;;		 -> STR_2(CODE[4]), STR_1(CODE[4]), 
   527 ;;
   528 ;; S1878__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   529 ;;		 -> Absolute function(), putch(), 
   530 ;;
   531 ;; _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   532 ;;		 -> Absolute function(), putch(), 
   533 ;;
   534 ;; S1878__prbuf$ptr	PTR unsigned char  size(1) Largest target is 5
   535 ;;		 -> NULL(NULL[0]), carac3(BANK0[5]), carac2(BANK0[5]), carac1(BANK0[4]), 
   536 ;;
   537 ;; _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 5
   538 ;;		 -> NULL(NULL[0]), carac3(BANK0[5]), carac2(BANK0[5]), carac1(BANK0[4]), 
   539 ;;
   540 ;; _doprnt@pb	PTR struct __prbuf size(1) Largest target is 3
   541 ;;		 -> sprintf@pb(BANK0[2]), printf@pb(BANK0[2]), 
   542 ;;
   543 ;; S1897$_cp	PTR const unsigned char  size(1) Largest target is 0
   544 ;;
   545 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   546 ;;
   547 ;; lcd_puts@s	PTR const unsigned char  size(2) Largest target is 7
   548 ;;		 -> STR_9(CODE[6]), carac3(BANK0[5]), STR_7(CODE[6]), carac2(BANK0[5]), 
   549 ;;		 -> STR_5(CODE[7]), carac1(BANK0[4]), 
   550 ;;
   551 ;;
   552 ;; Critical Paths under _main in COMMON
   553 ;;
   554 ;;   _main->_atoi
   555 ;;   _lcd_init->_lcd_write
   556 ;;   _lcd_puts->_lcd_write
   557 ;;   _lcd_goto->_lcd_write
   558 ;;   _lcd_clear->_lcd_write
   559 ;;   _lcd_write->_pause
   560 ;;   _PWM->_pause
   561 ;;   _sprintf->__doprnt
   562 ;;   _printf->__doprnt
   563 ;;   __doprnt->___lwmod
   564 ;;   _atoi->___wmul
   565 ;;   ___lwmod->___lwdiv
   566 ;;
   567 ;; Critical Paths under _main in BANK0
   568 ;;
   569 ;;   _main->_sprintf
   570 ;;   _sprintf->__doprnt
   571 ;;   _printf->__doprnt
   572 ;;
   573 ;; Critical Paths under _main in BANK1
   574 ;;
   575 ;;   None.
   576 ;;
   577 ;; Critical Paths under _main in BANK3
   578 ;;
   579 ;;   None.
   580 ;;
   581 ;; Critical Paths under _main in BANK2
   582 ;;
   583 ;;   None.
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   586 ;;
   587 ;;
   588 ;;Call Graph Tables:
   589 ;;
   590 ;; ---------------------------------------------------------------------------------
   591 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   592 ;; ---------------------------------------------------------------------------------
   593 ;; (0) _main                                                 6     6      0    3660
   594 ;;                                             17 BANK0      6     6      0
   595 ;;                           _lcd_init
   596 ;;                         _init_comms
   597 ;;                              _getch
   598 ;;                                _ADC
   599 ;;                             _printf
   600 ;;                               _atoi
   601 ;;                          _lcd_clear
   602 ;;                            _sprintf
   603 ;;                           _lcd_goto
   604 ;;                           _lcd_puts
   605 ;;                                _PWM
   606 ;; ---------------------------------------------------------------------------------
   607 ;; (1) _lcd_init                                             1     1      0     295
   608 ;;                                              5 COMMON     1     1      0
   609 ;;                              _pause
   610 ;;                          _lcd_write
   611 ;;                          _lcd_clear
   612 ;; ---------------------------------------------------------------------------------
   613 ;; (1) _lcd_puts                                             2     0      2     135
   614 ;;                                              5 COMMON     2     0      2
   615 ;;                          _lcd_write
   616 ;; ---------------------------------------------------------------------------------
   617 ;; (1) _lcd_goto                                             1     1      0     112
   618 ;;                                              5 COMMON     1     1      0
   619 ;;                          _lcd_write
   620 ;; ---------------------------------------------------------------------------------
   621 ;; (1) _lcd_clear                                            0     0      0     136
   622 ;;                          _lcd_write
   623 ;;                              _pause
   624 ;; ---------------------------------------------------------------------------------
   625 ;; (2) _lcd_write                                            1     1      0      90
   626 ;;                                              4 COMMON     1     1      0
   627 ;;                              _pause
   628 ;; ---------------------------------------------------------------------------------
   629 ;; (1) _PWM                                                  2     2      0      46
   630 ;;                                              4 COMMON     2     2      0
   631 ;;                              _pause
   632 ;; ---------------------------------------------------------------------------------
   633 ;; (1) _sprintf                                              7     4      3    1200
   634 ;;                                             10 BANK0      7     4      3
   635 ;;                            __doprnt
   636 ;; ---------------------------------------------------------------------------------
   637 ;; (1) _printf                                               6     4      2    1144
   638 ;;                                             10 BANK0      6     4      2
   639 ;;                            __doprnt
   640 ;; ---------------------------------------------------------------------------------
   641 ;; (2) __doprnt                                             12    10      2    1035
   642 ;;                                             12 COMMON     2     0      2
   643 ;;                                              0 BANK0     10    10      0
   644 ;;                   Absolute function
   645 ;;                              _putch
   646 ;;                            ___lwdiv
   647 ;;                            ___lwmod
   648 ;; ---------------------------------------------------------------------------------
   649 ;; (2) _pause                                                4     2      2      46
   650 ;;                                              0 COMMON     4     2      2
   651 ;;                           _msecbase
   652 ;; ---------------------------------------------------------------------------------
   653 ;; (1) _atoi                                                 8     6      2     388
   654 ;;                                              6 COMMON     8     6      2
   655 ;;                             ___wmul
   656 ;;                            _isdigit
   657 ;; ---------------------------------------------------------------------------------
   658 ;; (3) ___lwmod                                              5     1      4     159
   659 ;;                                              7 COMMON     5     1      4
   660 ;;                            ___lwdiv (ARG)
   661 ;; ---------------------------------------------------------------------------------
   662 ;; (3) ___lwdiv                                              7     3      4     162
   663 ;;                                              0 COMMON     7     3      4
   664 ;; ---------------------------------------------------------------------------------
   665 ;; (2) ___wmul                                               6     2      4      92
   666 ;;                                              0 COMMON     6     2      4
   667 ;; ---------------------------------------------------------------------------------
   668 ;; (2) _isdigit                                              2     2      0      68
   669 ;;                                              0 COMMON     2     2      0
   670 ;; ---------------------------------------------------------------------------------
   671 ;; (3) Absolute function(Fake)                               1     0      1       0
   672 ;;                                              0 COMMON     1     0      1
   673 ;; ---------------------------------------------------------------------------------
   674 ;; (3) _msecbase                                             0     0      0       0
   675 ;; ---------------------------------------------------------------------------------
   676 ;; (1) _ADC                                                  1     1      0       0
   677 ;;                                              0 COMMON     1     1      0
   678 ;; ---------------------------------------------------------------------------------
   679 ;; (1) _init_comms                                           0     0      0       0
   680 ;; ---------------------------------------------------------------------------------
   681 ;; (1) _getch                                                0     0      0       0
   682 ;; ---------------------------------------------------------------------------------
   683 ;; (3) _putch                                                1     0      1      22
   684 ;;                                              0 COMMON     1     0      1
   685 ;; ---------------------------------------------------------------------------------
   686 ;; Estimated maximum stack depth 3
   687 ;; ---------------------------------------------------------------------------------
   688 ;; Call Graph Graphs:
   689 ;; _main (ROOT)
   690 ;;   _lcd_init
   691 ;;     _pause
   692 ;;       _msecbase
   693 ;;     _lcd_write
   694 ;;       _pause
   695 ;;         _msecbase
   696 ;;     _lcd_clear
   697 ;;       _lcd_write
   698 ;;         _pause
   699 ;;           _msecbase
   700 ;;       _pause
   701 ;;         _msecbase
   702 ;;   _init_comms
   703 ;;   _getch
   704 ;;   _ADC
   705 ;;   _printf
   706 ;;     __doprnt
   707 ;;       Absolute function(Fake)
   708 ;;       _putch
   709 ;;       ___lwdiv
   710 ;;       ___lwmod
   711 ;;         ___lwdiv (ARG)
   712 ;;   _atoi
   713 ;;     ___wmul
   714 ;;     _isdigit
   715 ;;   _lcd_clear
   716 ;;     _lcd_write
   717 ;;       _pause
   718 ;;         _msecbase
   719 ;;     _pause
   720 ;;       _msecbase
   721 ;;   _sprintf
   722 ;;     __doprnt
   723 ;;       Absolute function(Fake)
   724 ;;       _putch
   725 ;;       ___lwdiv
   726 ;;       ___lwmod
   727 ;;         ___lwdiv (ARG)
   728 ;;   _lcd_goto
   729 ;;     _lcd_write
   730 ;;       _pause
   731 ;;         _msecbase
   732 ;;   _lcd_puts
   733 ;;     _lcd_write
   734 ;;       _pause
   735 ;;         _msecbase
   736 ;;   _PWM
   737 ;;     _pause
   738 ;;       _msecbase
   739 ;;
   740 ;; Address spaces:
   741 ;;Name               Size   Autos  Total    Cost      Usage
   742 ;;BITCOMMON            E      0       0       0        0.0%
   743 ;;EEDATA             100      0       0       0        0.0%
   744 ;;NULL                 0      0       0       0        0.0%
   745 ;;CODE                 0      0       0       0        0.0%
   746 ;;COMMON               E      E       E       1      100.0%
   747 ;;BITSFR0              0      0       0       1        0.0%
   748 ;;SFR0                 0      0       0       1        0.0%
   749 ;;BITSFR1              0      0       0       2        0.0%
   750 ;;SFR1                 0      0       0       2        0.0%
   751 ;;STACK                0      0       5       2        0.0%
   752 ;;ABS                  0      0      4F       3        0.0%
   753 ;;BITBANK0            50      0       0       4        0.0%
   754 ;;BITSFR3              0      0       0       4        0.0%
   755 ;;SFR3                 0      0       0       4        0.0%
   756 ;;BANK0               50     17      41       5       81.3%
   757 ;;BITSFR2              0      0       0       5        0.0%
   758 ;;SFR2                 0      0       0       5        0.0%
   759 ;;BITBANK1            50      0       0       6        0.0%
   760 ;;BANK1               50      0       0       7        0.0%
   761 ;;BITBANK3            60      0       0       8        0.0%
   762 ;;BANK3               60      0       0       9        0.0%
   763 ;;BITBANK2            60      0       0      10        0.0%
   764 ;;BANK2               60      0       0      11        0.0%
   765 ;;DATA                 0      0      54      12        0.0%
   766                           
   767                           
   768 ;; *************** function _main *****************
   769 ;; Defined at:
   770 ;;		line 82 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  i               2   21[BANK0 ] int 
   775 ;;  i               2   19[BANK0 ] int 
   776 ;;  i               2   17[BANK0 ] int 
   777 ;; Return value:  Size  Location     Type
   778 ;;		None               void
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 17F/0
   783 ;;		On exit  : 60/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   786 ;;      Params:         0       0       0       0       0
   787 ;;      Locals:         0       6       0       0       0
   788 ;;      Temps:          0       0       0       0       0
   789 ;;      Totals:         0       6       0       0       0
   790 ;;Total ram usage:        6 bytes
   791 ;; Hardware stack levels required when called:    5
   792 ;; This function calls:
   793 ;;		_lcd_init
   794 ;;		_init_comms
   795 ;;		_getch
   796 ;;		_ADC
   797 ;;		_printf
   798 ;;		_atoi
   799 ;;		_lcd_clear
   800 ;;		_sprintf
   801 ;;		_lcd_goto
   802 ;;		_lcd_puts
   803 ;;		_PWM
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808  059F                     _main:	
   809                           
   810                           ;DATACOM.c: 84: ANSEL = 0x60;
   811                           
   812                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   813  059F  3060               	movlw	96
   814  05A0  1683               	bsf	3,5	;RP0=1, select bank3
   815  05A1  1703               	bsf	3,6	;RP1=1, select bank3
   816  05A2  0088               	movwf	8	;volatile
   817                           
   818                           ;DATACOM.c: 85: ANSELH = 0x00;
   819  05A3  0189               	clrf	9	;volatile
   820                           
   821                           ;DATACOM.c: 86: TRISB = 0xFF;
   822  05A4  30FF               	movlw	255
   823  05A5  1303               	bcf	3,6	;RP1=0, select bank1
   824  05A6  0086               	movwf	6	;volatile
   825                           
   826                           ;DATACOM.c: 87: TRISA = 0x00;
   827  05A7  0185               	clrf	5	;volatile
   828                           
   829                           ;DATACOM.c: 89: TRISD = 0x00;
   830  05A8  0188               	clrf	8	;volatile
   831                           
   832                           ;DATACOM.c: 90: TRISC = 0x00;
   833  05A9  0187               	clrf	7	;volatile
   834                           
   835                           ;DATACOM.c: 91: TRISE = 0x07;
   836  05AA  3007               	movlw	7
   837  05AB  0089               	movwf	9	;volatile
   838                           
   839                           ;DATACOM.c: 92: T2CON = 0x07;
   840  05AC  1283               	bcf	3,5	;RP0=0, select bank0
   841  05AD  0092               	movwf	18	;volatile
   842                           
   843                           ;DATACOM.c: 93: PR2 = 0xFF;
   844  05AE  30FF               	movlw	255
   845  05AF  1683               	bsf	3,5	;RP0=1, select bank1
   846  05B0  0092               	movwf	18	;volatile
   847                           
   848                           ;DATACOM.c: 95: CCPR1L = 0x80;
   849  05B1  3080               	movlw	128
   850  05B2  1283               	bcf	3,5	;RP0=0, select bank0
   851  05B3  0095               	movwf	21	;volatile
   852                           
   853                           ;DATACOM.c: 96: CCP1CON = 0x0C;
   854  05B4  300C               	movlw	12
   855  05B5  0097               	movwf	23	;volatile
   856                           
   857                           ;DATACOM.c: 98: lcd_init();
   858  05B6  120A  118A  274B   	fcall	_lcd_init
      +       120A  118A         
   859                           
   860                           ;DATACOM.c: 100: init_comms();
   861  05BB  120A  118A  27DF   	fcall	_init_comms
      +       120A  118A         
   862                           
   863                           ;DATACOM.c: 102: ADFM = 0;
   864  05C0  1303               	bcf	3,6	;RP1=0, select bank1
   865  05C1  30FF               	movlw	255
   866  05C2  139F               	bcf	31,7
   867                           
   868                           ;DATACOM.c: 104: PORTA=0xFF;
   869  05C3  1283               	bcf	3,5	;RP0=0, select bank0
   870  05C4  0085               	movwf	5	;volatile
   871                           
   872                           ;DATACOM.c: 110: switch(op){
   873  05C5  2EE6               	goto	l3468
   874  05C6                     l3470:	
   875                           
   876                           ;DATACOM.c: 114: vportb = PORTB;
   877  05C6  0806               	movf	6,w	;volatile
   878  05C7  00AC               	movwf	_vportb
   879  05C8  01AD               	clrf	_vportb+1
   880                           
   881                           ;DATACOM.c: 116: ADC();
   882  05C9  120A  118A  239C   	fcall	_ADC
      +       120A  118A         
   883                           
   884                           ;DATACOM.c: 118: printf("%d ",vadc1);
   885  05CE  0827               	movf	_vadc1+1,w
   886  05CF  00D5               	movwf	?_printf+1
   887  05D0  0826               	movf	_vadc1,w
   888  05D1  00D4               	movwf	?_printf
   889  05D2  301E               	movlw	(STR_1-__stringbase)& (0+255)
   890  05D3  120A  118A  2453   	fcall	_printf
      +       120A  118A         
   891                           
   892                           ;DATACOM.c: 119: printf("%d ",vadc2);
   893  05D8  0829               	movf	_vadc2+1,w
   894  05D9  00D5               	movwf	?_printf+1
   895  05DA  0828               	movf	_vadc2,w
   896  05DB  00D4               	movwf	?_printf
   897  05DC  301E               	movlw	(STR_1-__stringbase)& (0+255)
   898  05DD  120A  118A  2453   	fcall	_printf
      +       120A  118A         
   899                           
   900                           ;DATACOM.c: 120: printf("%d ",vportb);
   901  05E2  082D               	movf	_vportb+1,w
   902  05E3  00D5               	movwf	?_printf+1
   903  05E4  082C               	movf	_vportb,w
   904  05E5  00D4               	movwf	?_printf
   905  05E6  301E               	movlw	(STR_1-__stringbase)& (0+255)
   906  05E7  120A  118A  2453   	fcall	_printf
      +       120A  118A         
   907                           
   908                           ;DATACOM.c: 121: break;
   909  05EC  2EE6               	goto	l3468
   910  05ED                     l3480:	
   911                           
   912                           ;DATACOM.c: 125: for(int i=0;i<=2;i++){
   913  05ED  01DB               	clrf	main@i
   914  05EE  01DC               	clrf	main@i+1
   915  05EF                     l3486:	
   916                           
   917                           ;DATACOM.c: 126: PA[i]=getch();}
   918  05EF  1283               	bcf	3,5	;RP0=0, select bank0
   919  05F0  1303               	bcf	3,6	;RP1=0, select bank0
   920  05F1  085B               	movf	main@i,w
   921  05F2  3E42               	addlw	_PA& (0+255)
   922  05F3  0084               	movwf	4
   923  05F4  120A  118A  2396   	fcall	_getch
      +       120A  118A         
   924  05F9  1383               	bcf	3,7	;select IRP bank0
   925  05FA  0080               	movwf	0
   926  05FB  0ADB               	incf	main@i,f
   927  05FC  1903               	skipnz
   928  05FD  0ADC               	incf	main@i+1,f
   929  05FE  085C               	movf	main@i+1,w
   930  05FF  3A80               	xorlw	128
   931  0600  00FF               	movwf	127
   932  0601  3080               	movlw	128
   933  0602  027F               	subwf	127,w
   934  0603  1D03               	skipz
   935  0604  2E07               	goto	u785
   936  0605  3003               	movlw	3
   937  0606  025B               	subwf	main@i,w
   938  0607                     u785:	
   939  0607  1C03               	skipc
   940  0608  2DEF               	goto	l3486
   941                           
   942                           ;DATACOM.c: 127: vporta=atoi(PA);
   943  0609  3042               	movlw	_PA& (0+255)
   944  060A  120A  118A  23D1   	fcall	_atoi
      +       120A  118A         
   945  060F  0877               	movf	?_atoi+1,w
   946  0610  1283               	bcf	3,5	;RP0=0, select bank0
   947  0611  1303               	bcf	3,6	;RP1=0, select bank0
   948  0612  00AB               	movwf	_vporta+1
   949  0613  0876               	movf	?_atoi,w
   950  0614  00AA               	movwf	_vporta
   951                           
   952                           ;DATACOM.c: 129: PORTA=0x00;
   953  0615  0185               	clrf	5	;volatile
   954                           
   955                           ;DATACOM.c: 130: PORTA = vporta;
   956  0616  0085               	movwf	5	;volatile
   957                           
   958                           ;DATACOM.c: 132: lcd_clear();
   959  0617  120A  118A  27B2   	fcall	_lcd_clear
      +       120A  118A         
   960                           
   961                           ;DATACOM.c: 134: sprintf(carac1, "%d",vporta);
   962  061C  3022               	movlw	(STR_4-__stringbase)& (0+255)
   963  061D  1283               	bcf	3,5	;RP0=0, select bank0
   964  061E  1303               	bcf	3,6	;RP1=0, select bank0
   965  061F  00D4               	movwf	?_sprintf
   966  0620  082B               	movf	_vporta+1,w
   967  0621  00D6               	movwf	?_sprintf+2
   968  0622  082A               	movf	_vporta,w
   969  0623  00D5               	movwf	?_sprintf+1
   970  0624  3046               	movlw	_carac1& (0+255)
   971  0625  120A  118A  245F   	fcall	_sprintf
      +       120A  118A         
   972                           
   973                           ;DATACOM.c: 135: lcd_goto(0x00);
   974  062A  3000               	movlw	0
   975  062B  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
   976                           
   977                           ;DATACOM.c: 136: lcd_puts("porta:");
   978  0630  300B               	movlw	low (STR_5-__stringbase)
   979  0631  00F5               	movwf	?_lcd_puts
   980  0632  3080               	movlw	128
   981  0633  00F6               	movwf	?_lcd_puts+1
   982  0634  120A  118A  272E   	fcall	_lcd_puts
      +       120A  118A         
   983                           
   984                           ;DATACOM.c: 137: lcd_puts(carac1);
   985  0639  3046               	movlw	_carac1& (0+255)
   986  063A  00F5               	movwf	?_lcd_puts
   987  063B  3000               	movlw	0
   988  063C  00F6               	movwf	?_lcd_puts+1
   989  063D  120A  118A  272E   	fcall	_lcd_puts
      +       120A  118A         
   990                           
   991                           ;DATACOM.c: 139: break;
   992  0642  2EE6               	goto	l3468
   993  0643                     l3508:	
   994                           
   995                           ;DATACOM.c: 145: for(int i=0;i<=3;i++){
   996  0643  01DD               	clrf	main@i_1853
   997  0644  01DE               	clrf	main@i_1853+1
   998  0645                     l3514:	
   999                           
  1000                           ;DATACOM.c: 146: PA1[i]=getch();}
  1001  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1002  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1003  0647  085D               	movf	main@i_1853,w
  1004  0648  3E2E               	addlw	_PA1& (0+255)
  1005  0649  0084               	movwf	4
  1006  064A  120A  118A  2396   	fcall	_getch
      +       120A  118A         
  1007  064F  1383               	bcf	3,7	;select IRP bank0
  1008  0650  0080               	movwf	0
  1009  0651  0ADD               	incf	main@i_1853,f
  1010  0652  1903               	skipnz
  1011  0653  0ADE               	incf	main@i_1853+1,f
  1012  0654  085E               	movf	main@i_1853+1,w
  1013  0655  3A80               	xorlw	128
  1014  0656  00FF               	movwf	127
  1015  0657  3080               	movlw	128
  1016  0658  027F               	subwf	127,w
  1017  0659  1D03               	skipz
  1018  065A  2E5D               	goto	u795
  1019  065B  3004               	movlw	4
  1020  065C  025D               	subwf	main@i_1853,w
  1021  065D                     u795:	
  1022  065D  1C03               	skipc
  1023  065E  2E45               	goto	l3514
  1024                           
  1025                           ;DATACOM.c: 147: pwm1=atoi(PA1);
  1026  065F  302E               	movlw	_PA1& (0+255)
  1027  0660  120A  118A  23D1   	fcall	_atoi
      +       120A  118A         
  1028  0665  0877               	movf	?_atoi+1,w
  1029  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1031  0668  00A3               	movwf	_pwm1+1
  1032  0669  0876               	movf	?_atoi,w
  1033  066A  00A2               	movwf	_pwm1
  1034                           
  1035                           ;DATACOM.c: 149: for(int i=0;i<=3;i++){
  1036  066B  01DF               	clrf	main@i_1854
  1037  066C  01E0               	clrf	main@i_1854+1
  1038  066D                     l3528:	
  1039                           
  1040                           ;DATACOM.c: 150: PA2[i]=getch();}
  1041  066D  1283               	bcf	3,5	;RP0=0, select bank0
  1042  066E  1303               	bcf	3,6	;RP1=0, select bank0
  1043  066F  085F               	movf	main@i_1854,w
  1044  0670  3E33               	addlw	_PA2& (0+255)
  1045  0671  0084               	movwf	4
  1046  0672  120A  118A  2396   	fcall	_getch
      +       120A  118A         
  1047  0677  1383               	bcf	3,7	;select IRP bank0
  1048  0678  0080               	movwf	0
  1049  0679  0ADF               	incf	main@i_1854,f
  1050  067A  1903               	skipnz
  1051  067B  0AE0               	incf	main@i_1854+1,f
  1052  067C  0860               	movf	main@i_1854+1,w
  1053  067D  3A80               	xorlw	128
  1054  067E  00FF               	movwf	127
  1055  067F  3080               	movlw	128
  1056  0680  027F               	subwf	127,w
  1057  0681  1D03               	skipz
  1058  0682  2E85               	goto	u805
  1059  0683  3004               	movlw	4
  1060  0684  025F               	subwf	main@i_1854,w
  1061  0685                     u805:	
  1062  0685  1C03               	skipc
  1063  0686  2E6D               	goto	l3528
  1064                           
  1065                           ;DATACOM.c: 151: pwm2=atoi(PA2);
  1066  0687  3033               	movlw	_PA2& (0+255)
  1067  0688  120A  118A  23D1   	fcall	_atoi
      +       120A  118A         
  1068  068D  0877               	movf	?_atoi+1,w
  1069  068E  1283               	bcf	3,5	;RP0=0, select bank0
  1070  068F  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0690  00A5               	movwf	_pwm2+1
  1072  0691  0876               	movf	?_atoi,w
  1073  0692  00A4               	movwf	_pwm2
  1074                           
  1075                           ;DATACOM.c: 153: lcd_clear();
  1076  0693  120A  118A  27B2   	fcall	_lcd_clear
      +       120A  118A         
  1077                           
  1078                           ;DATACOM.c: 155: sprintf(carac2, "%d",pwm1);
  1079  0698  3022               	movlw	(STR_4-__stringbase)& (0+255)
  1080  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1081  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1082  069B  00D4               	movwf	?_sprintf
  1083  069C  0823               	movf	_pwm1+1,w
  1084  069D  00D6               	movwf	?_sprintf+2
  1085  069E  0822               	movf	_pwm1,w
  1086  069F  00D5               	movwf	?_sprintf+1
  1087  06A0  3038               	movlw	_carac2& (0+255)
  1088  06A1  120A  118A  245F   	fcall	_sprintf
      +       120A  118A         
  1089                           
  1090                           ;DATACOM.c: 156: lcd_goto(0x00);
  1091  06A6  3000               	movlw	0
  1092  06A7  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
  1093                           
  1094                           ;DATACOM.c: 157: lcd_puts("pwm1:");
  1095  06AC  3012               	movlw	low (STR_7-__stringbase)
  1096  06AD  00F5               	movwf	?_lcd_puts
  1097  06AE  3080               	movlw	128
  1098  06AF  00F6               	movwf	?_lcd_puts+1
  1099  06B0  120A  118A  272E   	fcall	_lcd_puts
      +       120A  118A         
  1100                           
  1101                           ;DATACOM.c: 158: lcd_puts(carac2);
  1102  06B5  3038               	movlw	_carac2& (0+255)
  1103  06B6  00F5               	movwf	?_lcd_puts
  1104  06B7  01F6               	clrf	?_lcd_puts+1
  1105  06B8  120A  118A  272E   	fcall	_lcd_puts
      +       120A  118A         
  1106                           
  1107                           ;DATACOM.c: 160: sprintf(carac3, "%d",pwm2);
  1108  06BD  3022               	movlw	(STR_4-__stringbase)& (0+255)
  1109  06BE  00D4               	movwf	?_sprintf
  1110  06BF  0825               	movf	_pwm2+1,w
  1111  06C0  00D6               	movwf	?_sprintf+2
  1112  06C1  0824               	movf	_pwm2,w
  1113  06C2  00D5               	movwf	?_sprintf+1
  1114  06C3  303D               	movlw	_carac3& (0+255)
  1115  06C4  120A  118A  245F   	fcall	_sprintf
      +       120A  118A         
  1116                           
  1117                           ;DATACOM.c: 161: lcd_goto(0x40);
  1118  06C9  3040               	movlw	64
  1119  06CA  120A  118A  2709   	fcall	_lcd_goto
      +       120A  118A         
  1120                           
  1121                           ;DATACOM.c: 162: lcd_puts("pwm2:");
  1122  06CF  3018               	movlw	low (STR_9-__stringbase)
  1123  06D0  00F5               	movwf	?_lcd_puts
  1124  06D1  3080               	movlw	128
  1125  06D2  00F6               	movwf	?_lcd_puts+1
  1126  06D3  120A  118A  272E   	fcall	_lcd_puts
      +       120A  118A         
  1127                           
  1128                           ;DATACOM.c: 163: lcd_puts(carac3);
  1129  06D8  303D               	movlw	_carac3& (0+255)
  1130  06D9  00F5               	movwf	?_lcd_puts
  1131  06DA  3000               	movlw	0
  1132  06DB  00F6               	movwf	?_lcd_puts+1
  1133  06DC  120A  118A  272E   	fcall	_lcd_puts
      +       120A  118A         
  1134                           
  1135                           ;DATACOM.c: 165: PWM();
  1136  06E1  120A  118A  270D   	fcall	_PWM
      +       120A  118A         
  1137  06E6                     l3468:	
  1138                           ;DATACOM.c: 167: break;
  1139                           
  1140                           
  1141                           ;DATACOM.c: 108: op=getch();
  1142  06E6  120A  118A  2396   	fcall	_getch
      +       120A  118A         
  1143  06EB  00A0               	movwf	_op
  1144  06EC  01A1               	clrf	_op+1
  1145                           
  1146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1147                           ; Switch size 1, requested type "space"
  1148                           ; Number of cases is 1, Range of values is 0 to 0
  1149                           ; switch strategies available:
  1150                           ; Name         Instructions Cycles
  1151                           ; simple_byte            4     3 (average)
  1152                           ; direct_byte           11     8 (fixed)
  1153                           ; jumptable            260     6 (fixed)
  1154                           ; rangetable             5     6 (fixed)
  1155                           ; spacedrange            8     9 (fixed)
  1156                           ; locatedrange           1     3 (fixed)
  1157                           ;	Chosen strategy is simple_byte
  1158  06ED  0821               	movf	_op+1,w
  1159  06EE  3A00               	xorlw	0	; case 0
  1160  06EF  1903               	skipnz
  1161  06F0  2EF2               	goto	l3608
  1162  06F1  2EE6               	goto	l3468
  1163  06F2                     l3608:	
  1164                           
  1165                           ; Switch size 1, requested type "space"
  1166                           ; Number of cases is 3, Range of values is 49 to 51
  1167                           ; switch strategies available:
  1168                           ; Name         Instructions Cycles
  1169                           ; simple_byte           10     6 (average)
  1170                           ; direct_byte           20    11 (fixed)
  1171                           ; jumptable            263     9 (fixed)
  1172                           ;	Chosen strategy is simple_byte
  1173  06F2  0820               	movf	_op,w
  1174  06F3  3A31               	xorlw	49	; case 49
  1175  06F4  1903               	skipnz
  1176  06F5  2DC6               	goto	l3470
  1177  06F6  3A03               	xorlw	3	; case 50
  1178  06F7  1903               	skipnz
  1179  06F8  2DED               	goto	l3480
  1180  06F9  3A01               	xorlw	1	; case 51
  1181  06FA  1903               	skipnz
  1182  06FB  2E43               	goto	l3508
  1183  06FC  2EE6               	goto	l3468
  1184  06FD  120A  118A  2800   	ljmp	start
  1185  0700                     __end_of_main:	
  1186                           
  1187                           	psect	text413
  1188  0709                     __ptext413:	
  1189 ;; =============== function _lcd_puts ends ============
  1190                           
  1191                           
  1192 ;; *************** function _lcd_goto *****************
  1193 ;; Defined at:
  1194 ;;		line 228 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  pos             1    wreg     unsigned char 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  pos             1    5[COMMON] unsigned char 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, pclath, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 160/0
  1205 ;;		On exit  : 160/0
  1206 ;;		Unchanged: FFE9F/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       0       0       0       0
  1209 ;;      Locals:         1       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0
  1211 ;;      Totals:         1       0       0       0       0
  1212 ;;Total ram usage:        1 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    3
  1215 ;; This function calls:
  1216 ;;		_lcd_write
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221  0709                     _lcd_goto:	
  1222                           
  1223                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  1224                           ;lcd_goto@pos stored from wreg
  1225  0709  00F5               	movwf	lcd_goto@pos
  1226                           
  1227                           ;DATACOM.c: 229: RC3 = 0;
  1228  070A  1187               	bcf	7,3
  1229                           
  1230                           ;DATACOM.c: 230: lcd_write(0x80 + pos);
  1231  070B  3E80               	addlw	128
  1232  070C  2F92               	ljmp	_lcd_write
  1233  070D                     __end_of_lcd_goto:	
  1234  070D                     __ptext416:	
  1235 ;; =============== function _lcd_write ends ============
  1236                           
  1237                           
  1238 ;; *************** function _PWM *****************
  1239 ;; Defined at:
  1240 ;;		line 187 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;		None               void
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0, pclath, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 60/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: FFF9F/0
  1253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1254 ;;      Params:         0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0
  1256 ;;      Temps:          2       0       0       0       0
  1257 ;;      Totals:         2       0       0       0       0
  1258 ;;Total ram usage:        2 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    2
  1261 ;; This function calls:
  1262 ;;		_pause
  1263 ;; This function is called by:
  1264 ;;		_main
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267  070D                     _PWM:	
  1268                           
  1269                           ;DATACOM.c: 188: ADRESH=pwm1>>2;
  1270                           
  1271                           ; Regs used in _PWM: [wreg+status,2+status,0+pclath+cstack]
  1272  070D  0823               	movf	_pwm1+1,w
  1273  070E  00F5               	movwf	??_PWM+1
  1274  070F  0822               	movf	_pwm1,w
  1275                           
  1276                           ;DATACOM.c: 189: ADRESL=pwm1<<8;
  1277                           
  1278                           ;DATACOM.c: 190: CCPR1L=ADRESH;
  1279  0710  27BB  120A  118A   	fcall	PL2	;call to abstracted procedure
  1280  0713  0095               	movwf	21	;volatile
  1281                           
  1282                           ;DATACOM.c: 191: CCP1CON=0X0C|(ADRESL>>2);
  1283  0714  27C9  120A  118A   	fcall	PL3	;call to abstracted procedure
  1284  0717  0097               	movwf	23	;volatile
  1285                           
  1286                           ;DATACOM.c: 192: pause(1);
  1287  0718  01F0               	clrf	?_pause
  1288  0719  0AF0               	incf	?_pause,f
  1289  071A  01F1               	clrf	?_pause+1
  1290  071B  2781  120A  118A   	fcall	_pause
  1291  071E  27DC               	call	PL7	;select bank 0
  1292                           
  1293                           ;DATACOM.c: 194: ADRESH=pwm2>>2;
  1294  071F  0825               	movf	_pwm2+1,w
  1295  0720  00F5               	movwf	??_PWM+1
  1296  0721  0824               	movf	_pwm2,w
  1297                           
  1298                           ;DATACOM.c: 195: ADRESL=pwm2<<8;
  1299                           
  1300                           ;DATACOM.c: 196: CCPR2L=ADRESH;
  1301  0722  27BB  120A  118A   	fcall	PL2	;call to abstracted procedure
  1302  0725  009B               	movwf	27	;volatile
  1303                           
  1304                           ;DATACOM.c: 197: CCP2CON=0X0C|(ADRESL>>2);
  1305  0726  27C9  120A  118A   	fcall	PL3	;call to abstracted procedure
  1306  0729  009D               	movwf	29	;volatile
  1307                           
  1308                           ;DATACOM.c: 198: pause(1);
  1309  072A  01F0               	clrf	?_pause
  1310  072B  0AF0               	incf	?_pause,f
  1311  072C  01F1               	clrf	?_pause+1
  1312  072D  2F81               	ljmp	l3258
  1313  072E                     __end_of_PWM:	
  1314  072E                     __ptext412:	
  1315 ;; =============== function _lcd_init ends ============
  1316                           
  1317                           
  1318 ;; *************** function _lcd_puts *****************
  1319 ;; Defined at:
  1320 ;;		line 217 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  s               2    5[COMMON] PTR const unsigned char 
  1323 ;;		 -> STR_9(6), carac3(5), STR_7(6), carac2(5), 
  1324 ;;		 -> STR_5(7), carac1(4), 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;		None               void
  1329 ;; Registers used:
  1330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 60/0
  1333 ;;		On exit  : 60/0
  1334 ;;		Unchanged: FFE9F/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1336 ;;      Params:         2       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0
  1339 ;;      Totals:         2       0       0       0       0
  1340 ;;Total ram usage:        2 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    3
  1343 ;; This function calls:
  1344 ;;		_lcd_write
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349  072E                     _lcd_puts:	
  1350                           
  1351                           ;DATACOM.c: 218: RC3 = 1;
  1352                           
  1353                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1354  072E  1587               	bsf	7,3
  1355  072F                     l3402:	
  1356                           ;DATACOM.c: 219: while(*s)
  1357                           
  1358  072F  0876               	movf	lcd_puts@s+1,w
  1359  0730  00FF               	movwf	127
  1360  0731  0875               	movf	lcd_puts@s,w
  1361  0732  0084               	movwf	4
  1362  0733  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1363  0738  3800               	iorlw	0
  1364  0739  1903               	btfsc	3,2
  1365  073A  0008               	return
  1366                           
  1367                           ;DATACOM.c: 220: lcd_write(*s++);
  1368  073B  0876               	movf	lcd_puts@s+1,w
  1369  073C  00FF               	movwf	127
  1370  073D  0875               	movf	lcd_puts@s,w
  1371  073E  0084               	movwf	4
  1372  073F  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1373  0744  2792  120A  118A   	fcall	_lcd_write
  1374  0747  0AF5               	incf	lcd_puts@s,f
  1375  0748  1903               	skipnz
  1376  0749  0AF6               	incf	lcd_puts@s+1,f
  1377  074A  2F2F               	goto	l3402
  1378  074B                     __end_of_lcd_puts:	
  1379  074B                     __ptext411:	
  1380 ;; =============== function _main ends ============
  1381                           
  1382                           
  1383 ;; *************** function _lcd_init *****************
  1384 ;; Defined at:
  1385 ;;		line 233 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  init_value      1    0        unsigned char 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;		None               void
  1392 ;; Registers used:
  1393 ;;		wreg, status,2, status,0, pclath, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 17F/0
  1396 ;;		On exit  : 17F/0
  1397 ;;		Unchanged: FFE80/0
  1398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1399 ;;      Params:         0       0       0       0       0
  1400 ;;      Locals:         1       0       0       0       0
  1401 ;;      Temps:          0       0       0       0       0
  1402 ;;      Totals:         1       0       0       0       0
  1403 ;;Total ram usage:        1 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    4
  1406 ;; This function calls:
  1407 ;;		_pause
  1408 ;;		_lcd_write
  1409 ;;		_lcd_clear
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414  074B                     _lcd_init:	
  1415  074B  300F               	movlw	15
  1416                           
  1417                           ;DATACOM.c: 238: RC3 = 0;
  1418                           
  1419                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1420  074C  1187               	bcf	7,3
  1421                           
  1422                           ;DATACOM.c: 239: RC0 = 0;
  1423  074D  1007               	bcf	7,0
  1424                           
  1425                           ;DATACOM.c: 240: RC4 = 0;
  1426  074E  1207               	bcf	7,4
  1427                           
  1428                           ;DATACOM.c: 242: pause(15);
  1429  074F  00F0               	movwf	?_pause
  1430  0750  01F1               	clrf	?_pause+1
  1431  0751  2781  120A  118A   	fcall	_pause
  1432                           
  1433                           ;DATACOM.c: 243: PORTD = init_value;
  1434  0754  3003               	movlw	3
  1435  0755  27DC               	call	PL7	;select bank 0
  1436  0756  0088               	movwf	8	;volatile
  1437  0757  300A               	movlw	10
  1438                           
  1439                           ;DATACOM.c: 244: ((RC0 = 1),(RC0=0));
  1440  0758  1407               	bsf	7,0
  1441  0759  1007               	bcf	7,0
  1442                           
  1443                           ;DATACOM.c: 245: pause(10);
  1444  075A  00F0               	movwf	?_pause
  1445  075B  01F1               	clrf	?_pause+1
  1446  075C  2781  120A  118A   	fcall	_pause
  1447                           
  1448                           ;DATACOM.c: 246: ((RC0 = 1),(RC0=0));
  1449                           
  1450                           ;DATACOM.c: 247: pause(10);
  1451  075F  27D4  120A  118A   	fcall	PL4	;call to abstracted procedure
  1452  0762  2781  120A  118A   	fcall	_pause
  1453                           
  1454                           ;DATACOM.c: 248: ((RC0 = 1),(RC0=0));
  1455                           
  1456                           ;DATACOM.c: 249: pause(10);
  1457  0765  27D4  120A  118A   	fcall	PL4	;call to abstracted procedure
  1458  0768  2781  120A  118A   	fcall	_pause
  1459                           
  1460                           ;DATACOM.c: 250: PORTD= 2;
  1461  076B  3002               	movlw	2
  1462  076C  27DC               	call	PL7	;select bank 0
  1463  076D  0088               	movwf	8	;volatile
  1464  076E  3028               	movlw	40
  1465                           
  1466                           ;DATACOM.c: 251: ((RC0 = 1),(RC0=0));
  1467  076F  1407               	bsf	7,0
  1468  0770  1007               	bcf	7,0
  1469                           
  1470                           ;DATACOM.c: 253: lcd_write(0x28);
  1471  0771  2792  120A  118A   	fcall	_lcd_write
  1472                           
  1473                           ;DATACOM.c: 254: lcd_write(0x0C);
  1474  0774  300C               	movlw	12
  1475  0775  2792  120A  118A   	fcall	_lcd_write
  1476                           
  1477                           ;DATACOM.c: 255: lcd_write(0x0F);
  1478  0778  300F               	movlw	15
  1479  0779  2792  120A  118A   	fcall	_lcd_write
  1480                           
  1481                           ;DATACOM.c: 256: lcd_clear();
  1482  077C  27B2  120A  118A   	fcall	_lcd_clear
  1483                           
  1484                           ;DATACOM.c: 257: lcd_write(0x06);
  1485  077F  3006               	movlw	6
  1486  0780  2F92               	ljmp	_lcd_write
  1487  0781                     __end_of_lcd_init:	
  1488  0781                     __ptext420:	
  1489 ;; =============== function __doprnt ends ============
  1490                           
  1491                           
  1492 ;; *************** function _pause *****************
  1493 ;; Defined at:
  1494 ;;		line 260 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  usvalue         2    0[COMMON] unsigned short 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  x               2    2[COMMON] unsigned short 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;		None               void
  1501 ;; Registers used:
  1502 ;;		wreg, status,2, status,0, pclath, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: FFF9F/0
  1507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1508 ;;      Params:         2       0       0       0       0
  1509 ;;      Locals:         2       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0
  1511 ;;      Totals:         4       0       0       0       0
  1512 ;;Total ram usage:        4 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    1
  1515 ;; This function calls:
  1516 ;;		_msecbase
  1517 ;; This function is called by:
  1518 ;;		_PWM
  1519 ;;		_lcd_write
  1520 ;;		_lcd_clear
  1521 ;;		_lcd_init
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524  0781                     _pause:	
  1525  0781                     l3258:	
  1526                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
  1527                           
  1528                           
  1529                           ;DATACOM.c: 261: unsigned short x;
  1530                           ;DATACOM.c: 262: for (x=0; x<=usvalue; x++)
  1531  0781  01F2               	clrf	pause@x
  1532  0782  01F3               	clrf	pause@x+1
  1533  0783                     l3264:	
  1534  0783  0873               	movf	pause@x+1,w
  1535  0784  0271               	subwf	pause@usvalue+1,w
  1536  0785  1D03               	skipz
  1537  0786  2F89               	goto	u665
  1538  0787  0872               	movf	pause@x,w
  1539  0788  0270               	subwf	pause@usvalue,w
  1540  0789                     u665:	
  1541  0789  1C03               	btfss	3,0
  1542  078A  0008               	return
  1543                           
  1544                           ;DATACOM.c: 263: {
  1545                           ;DATACOM.c: 264: msecbase();
  1546  078B  27A5  120A  118A   	fcall	_msecbase
  1547  078E  0AF2               	incf	pause@x,f
  1548  078F  1903               	skipnz
  1549  0790  0AF3               	incf	pause@x+1,f
  1550  0791  2F83               	goto	l3264
  1551  0792                     __end_of_pause:	
  1552  0792                     __ptext415:	
  1553 ;; =============== function _lcd_clear ends ============
  1554                           
  1555                           
  1556 ;; *************** function _lcd_write *****************
  1557 ;; Defined at:
  1558 ;;		line 203 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  c               1    wreg     unsigned char 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  c               1    4[COMMON] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0, pclath, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 60/0
  1570 ;;		Unchanged: FFF9F/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1572 ;;      Params:         0       0       0       0       0
  1573 ;;      Locals:         1       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0
  1575 ;;      Totals:         1       0       0       0       0
  1576 ;;Total ram usage:        1 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    2
  1579 ;; This function calls:
  1580 ;;		_pause
  1581 ;; This function is called by:
  1582 ;;		_lcd_clear
  1583 ;;		_lcd_puts
  1584 ;;		_lcd_goto
  1585 ;;		_lcd_init
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588  0792                     _lcd_write:	
  1589                           
  1590                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1591                           ;lcd_write@c stored from wreg
  1592  0792  00F4               	movwf	lcd_write@c
  1593                           
  1594                           ;DATACOM.c: 204: pause(1);
  1595  0793  01F0               	clrf	?_pause
  1596  0794  0AF0               	incf	?_pause,f
  1597  0795  01F1               	clrf	?_pause+1
  1598  0796  2781  120A  118A   	fcall	_pause
  1599                           
  1600                           ;DATACOM.c: 205: PORTD = ( ( c >> 4) & 0x0F);
  1601  0799  0E74               	swapf	lcd_write@c,w
  1602  079A  390F               	andlw	15
  1603  079B  27DC               	call	PL7	;select bank 0
  1604  079C  0088               	movwf	8	;volatile
  1605                           
  1606                           ;DATACOM.c: 206: ((RC0 = 1),(RC0=0));
  1607  079D  1407               	bsf	7,0
  1608  079E  1007               	bcf	7,0
  1609                           
  1610                           ;DATACOM.c: 207: PORTD = (c & 0x0F);
  1611  079F  0874               	movf	lcd_write@c,w
  1612  07A0  390F               	andlw	15
  1613  07A1  0088               	movwf	8	;volatile
  1614                           
  1615                           ;DATACOM.c: 208: ((RC0 = 1),(RC0=0));
  1616  07A2  1407               	bsf	7,0
  1617  07A3  1007               	bcf	7,0
  1618  07A4  0008               	return
  1619  07A5                     __end_of_lcd_write:	
  1620  07A5                     __ptext426:	
  1621 ;; =============== function _isdigit ends ============
  1622                           
  1623                           
  1624 ;; *************** function _msecbase *****************
  1625 ;; Defined at:
  1626 ;;		line 268 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;		None
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;		None               void
  1633 ;; Registers used:
  1634 ;;		wreg
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: FFF9F/0
  1639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1640 ;;      Params:         0       0       0       0       0
  1641 ;;      Locals:         0       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0
  1643 ;;      Totals:         0       0       0       0       0
  1644 ;;Total ram usage:        0 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_pause
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652  07A5                     _msecbase:	
  1653                           
  1654                           ;DATACOM.c: 269: OPTION_REG = 0b11010001;
  1655                           
  1656                           ; Regs used in _msecbase: [wreg]
  1657  07A5  30D1               	movlw	209
  1658  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  1659  07A7  1303               	bcf	3,6	;RP1=0, select bank1
  1660  07A8  0081               	movwf	1	;volatile
  1661                           
  1662                           ;DATACOM.c: 270: TMR0 = 0x0E;
  1663  07A9  300E               	movlw	14
  1664  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  1665  07AB  0081               	movwf	1	;volatile
  1666                           
  1667                           ;DATACOM.c: 271: TMR0 = 0x8E;
  1668  07AC  308E               	movlw	142
  1669  07AD  0081               	movwf	1	;volatile
  1670  07AE                     l1144:	
  1671                           ;DATACOM.c: 272: while(!T0IF);
  1672                           
  1673  07AE  1D0B               	btfss	11,2
  1674  07AF  2FAE               	goto	l1144
  1675                           
  1676                           ;DATACOM.c: 273: T0IF = 0;
  1677  07B0  110B               	bcf	11,2
  1678  07B1  0008               	return
  1679  07B2                     __end_of_msecbase:	
  1680  07B2                     __ptext414:	
  1681 ;; =============== function _lcd_goto ends ============
  1682                           
  1683                           
  1684 ;; *************** function _lcd_clear *****************
  1685 ;; Defined at:
  1686 ;;		line 211 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;		None
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;		None
  1691 ;; Return value:  Size  Location     Type
  1692 ;;		None               void
  1693 ;; Registers used:
  1694 ;;		wreg, status,2, status,0, pclath, cstack
  1695 ;; Tracked objects:
  1696 ;;		On entry : 160/0
  1697 ;;		On exit  : 100/0
  1698 ;;		Unchanged: FFE9F/0
  1699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1700 ;;      Params:         0       0       0       0       0
  1701 ;;      Locals:         0       0       0       0       0
  1702 ;;      Temps:          0       0       0       0       0
  1703 ;;      Totals:         0       0       0       0       0
  1704 ;;Total ram usage:        0 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    3
  1707 ;; This function calls:
  1708 ;;		_lcd_write
  1709 ;;		_pause
  1710 ;; This function is called by:
  1711 ;;		_main
  1712 ;;		_lcd_init
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715  07B2                     _lcd_clear:	
  1716  07B2  3001               	movlw	1
  1717                           
  1718                           ;DATACOM.c: 212: RC3 = 0;
  1719                           
  1720                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1721  07B3  1187               	bcf	7,3
  1722                           
  1723                           ;DATACOM.c: 213: lcd_write(0x01);
  1724  07B4  2792  120A  118A   	fcall	_lcd_write
  1725                           
  1726                           ;DATACOM.c: 214: pause (2);
  1727  07B7  3002               	movlw	2
  1728  07B8  00F0               	movwf	?_pause
  1729  07B9  01F1               	clrf	?_pause+1
  1730  07BA  2F81               	ljmp	l3258
  1731  07BB                     __end_of_lcd_clear:	
  1732  07BB                     PL2:	
  1733  07BB  00F4               	movwf	??_PWM
  1734  07BC  1003               	clrc
  1735  07BD  0CF5               	rrf	??_PWM+1,f
  1736  07BE  0CF4               	rrf	??_PWM,f
  1737  07BF  1003               	clrc
  1738  07C0  0CF5               	rrf	??_PWM+1,f
  1739  07C1  0CF4               	rrf	??_PWM,f
  1740  07C2  0874               	movf	??_PWM,w
  1741  07C3  009E               	movwf	30	;volatile
  1742  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  1743  07C5  019E               	clrf	30	;volatile
  1744  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  1745  07C7  081E               	movf	30,w	;volatile
  1746  07C8  0008               	return
  1747  07C9                     PL3:	
  1748  07C9  1683               	bsf	3,5	;RP0=1, select bank1
  1749  07CA  081E               	movf	30,w	;volatile
  1750  07CB  00F4               	movwf	??_PWM
  1751  07CC  1003               	clrc
  1752  07CD  0CF4               	rrf	??_PWM,f
  1753  07CE  1003               	clrc
  1754  07CF  0CF4               	rrf	??_PWM,f
  1755  07D0  0874               	movf	??_PWM,w
  1756  07D1  380C               	iorlw	12
  1757  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  1758  07D3  0008               	return
  1759  07D4                     PL4:	
  1760  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1761  07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1762  07D6  300A               	movlw	10
  1763  07D7  1407               	bsf	7,0
  1764  07D8  1007               	bcf	7,0
  1765  07D9  00F0               	movwf	?_pause
  1766  07DA  01F1               	clrf	?_pause+1
  1767  07DB  0008               	return
  1768  07DC                     PL7:	
  1769  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1770  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1771  07DE  0008               	return
  1772                           
  1773                           	psect	text418
  1774  0453                     __ptext418:	
  1775 ;; =============== function _sprintf ends ============
  1776                           
  1777                           
  1778 ;; *************** function _printf *****************
  1779 ;; Defined at:
  1780 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\printf.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  f               1    wreg     PTR const unsigned char 
  1783 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1786 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
  1787 ;;  pb              2   14[BANK0 ] struct __prbuf
  1788 ;;  ap              1   13[BANK0 ] PTR void [1]
  1789 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  2   10[BANK0 ] int 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 60/0
  1796 ;;		On exit  : 60/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1799 ;;      Params:         0       2       0       0       0
  1800 ;;      Locals:         0       4       0       0       0
  1801 ;;      Temps:          0       0       0       0       0
  1802 ;;      Totals:         0       6       0       0       0
  1803 ;;Total ram usage:        6 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    2
  1806 ;; This function calls:
  1807 ;;		__doprnt
  1808 ;; This function is called by:
  1809 ;;		_main
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812  0453                     _printf:	
  1813                           
  1814                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1815                           ;printf@f stored from wreg
  1816  0453  00D6               	movwf	printf@f
  1817  0454  3001               	movlw	(fp__putch-fpbase)& (0+255)
  1818  0455  01D8               	clrf	printf@pb
  1819  0456  00D9               	movwf	printf@pb+1
  1820  0457  3054               	movlw	?_printf& (0+255)
  1821  0458  00D7               	movwf	printf@ap
  1822                           
  1823                           ;	Return value of _printf is never used
  1824  0459  0856               	movf	printf@f,w
  1825  045A  00FC               	movwf	?__doprnt
  1826  045B  3057               	movlw	printf@ap& (0+255)
  1827  045C  00FD               	movwf	?__doprnt+1
  1828  045D  3058               	movlw	printf@pb& (0+255)
  1829  045E  2C6F               	ljmp	__doprnt
  1830  045F                     __end_of_printf:	
  1831  045F                     __ptext417:	
  1832 ;; =============== function _PWM ends ============
  1833                           
  1834                           
  1835 ;; *************** function _sprintf *****************
  1836 ;; Defined at:
  1837 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\sprintf.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  wh              1    wreg     PTR unsigned char 
  1840 ;;		 -> carac3(5), carac2(5), carac1(4), 
  1841 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  1842 ;;		 -> STR_8(3), STR_6(3), STR_4(3), 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  wh              1   13[BANK0 ] PTR unsigned char 
  1845 ;;		 -> carac3(5), carac2(5), carac1(4), 
  1846 ;;  pb              2   15[BANK0 ] struct __prbuf
  1847 ;;  ap              1   14[BANK0 ] PTR void [1]
  1848 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  2   10[BANK0 ] int 
  1851 ;; Registers used:
  1852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 60/0
  1855 ;;		On exit  : 160/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1858 ;;      Params:         0       3       0       0       0
  1859 ;;      Locals:         0       4       0       0       0
  1860 ;;      Temps:          0       0       0       0       0
  1861 ;;      Totals:         0       7       0       0       0
  1862 ;;Total ram usage:        7 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    2
  1865 ;; This function calls:
  1866 ;;		__doprnt
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871  045F                     _sprintf:	
  1872                           
  1873                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1874                           ;sprintf@wh stored from wreg
  1875  045F  00D7               	movwf	sprintf@wh
  1876  0460  00D9               	movwf	sprintf@pb
  1877  0461  3055               	movlw	(?_sprintf+1)& (0+255)
  1878  0462  01DA               	clrf	sprintf@pb+1
  1879  0463  00D8               	movwf	sprintf@ap
  1880  0464  0854               	movf	sprintf@f,w
  1881  0465  00FC               	movwf	?__doprnt
  1882  0466  3058               	movlw	sprintf@ap& (0+255)
  1883  0467  00FD               	movwf	?__doprnt+1
  1884  0468  3059               	movlw	sprintf@pb& (0+255)
  1885  0469  246F               	fcall	__doprnt
  1886  046A  0859               	movf	sprintf@pb,w
  1887  046B  0084               	movwf	4
  1888  046C  1383               	bcf	3,7	;select IRP bank0
  1889  046D  0180               	clrf	0
  1890  046E  0008               	return
  1891  046F                     __end_of_sprintf:	
  1892  046F                     __ptext419:	
  1893 ;; =============== function _printf ends ============
  1894                           
  1895                           
  1896 ;; *************** function __doprnt *****************
  1897 ;; Defined at:
  1898 ;;		line 455 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  pb              1    wreg     PTR struct __prbuf
  1901 ;;		 -> sprintf@pb(2), printf@pb(2), 
  1902 ;;  f               1   12[COMMON] PTR const unsigned char 
  1903 ;;		 -> STR_8(3), STR_6(3), STR_4(3), STR_3(4), 
  1904 ;;		 -> STR_2(4), STR_1(4), 
  1905 ;;  ap              1   13[COMMON] PTR PTR void 
  1906 ;;		 -> sprintf@ap(1), printf@ap(1), 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  pb              1    9[BANK0 ] PTR struct __prbuf
  1909 ;;		 -> sprintf@pb(2), printf@pb(2), 
  1910 ;;  _val            4    4[BANK0 ] struct .
  1911 ;;  c               1    8[BANK0 ] char 
  1912 ;;  prec            1    3[BANK0 ] char 
  1913 ;;  flag            1    2[BANK0 ] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  2   12[COMMON] int 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 60/0
  1920 ;;		On exit  : 60/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         2       0       0       0       0
  1924 ;;      Locals:         0       8       0       0       0
  1925 ;;      Temps:          0       2       0       0       0
  1926 ;;      Totals:         2      10       0       0       0
  1927 ;;Total ram usage:       12 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    1
  1930 ;; This function calls:
  1931 ;;		Absolute function
  1932 ;;		_putch
  1933 ;;		___lwdiv
  1934 ;;		___lwmod
  1935 ;; This function is called by:
  1936 ;;		_printf
  1937 ;;		_sprintf
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940  046F                     __doprnt:	
  1941                           
  1942                           ; Regs used in __doprnt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1943                           ;__doprnt@pb stored from wreg
  1944  046F  00D3               	movwf	__doprnt@pb
  1945  0470                     l3328:	
  1946  0470  087C               	movf	__doprnt@f,w
  1947  0471  0AFC               	incf	__doprnt@f,f
  1948  0472  0084               	movwf	4
  1949  0473  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1950  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1951  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1952  047A  00D2               	movwf	__doprnt@c
  1953  047B  08D2               	movf	__doprnt@c,f
  1954  047C  1903               	btfsc	3,2
  1955  047D  2D41               	goto	l3330
  1956  047E  0852               	movf	__doprnt@c,w
  1957  047F  3A25               	xorlw	37
  1958  0480  1903               	skipnz
  1959  0481  2C98               	goto	l3278
  1960  0482  0853               	movf	__doprnt@pb,w
  1961  0483  3E01               	addlw	1
  1962  0484  0084               	movwf	4
  1963  0485  1383               	bcf	3,7	;select IRP bank0
  1964  0486  0880               	movf	0,f
  1965  0487  1903               	skipnz
  1966  0488  2C91               	goto	l3274
  1967  0489  0852               	movf	__doprnt@c,w
  1968  048A  2599               	fcall	PL6	;call to abstracted procedure
  1969  048B  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1970  0490  2C70               	goto	l3328
  1971  0491                     l3274:	
  1972  0491  0853               	movf	__doprnt@pb,w
  1973  0492  0084               	movwf	4
  1974  0493  0800               	movf	0,w
  1975  0494  2592  120A  118A   	fcall	PL5	;call to abstracted procedure
  1976  0497  2C70               	goto	l3328
  1977  0498                     l3278:	
  1978  0498  01CC               	clrf	__doprnt@flag
  1979  0499  087C               	movf	__doprnt@f,w
  1980  049A  0AFC               	incf	__doprnt@f,f
  1981  049B  0084               	movwf	4
  1982  049C  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1983  04A1  00D2               	movwf	__doprnt@c
  1984                           
  1985                           ; Switch size 1, requested type "space"
  1986                           ; Number of cases is 3, Range of values is 0 to 105
  1987                           ; switch strategies available:
  1988                           ; Name         Instructions Cycles
  1989                           ; simple_byte           10     6 (average)
  1990                           ; jumptable            260     6 (fixed)
  1991                           ; rangetable           110     6 (fixed)
  1992                           ; spacedrange          218     9 (fixed)
  1993                           ; locatedrange         106     3 (fixed)
  1994                           ;	Chosen strategy is simple_byte
  1995  04A2  3A00               	xorlw	0	; case 0
  1996  04A3  1903               	skipnz
  1997  04A4  2D41               	goto	l3330
  1998  04A5  3A64               	xorlw	100	; case 100
  1999  04A6  1903               	skipnz
  2000  04A7  2CAC               	goto	l3284
  2001  04A8  3A0D               	xorlw	13	; case 105
  2002  04A9  1903               	skipnz
  2003  04AA  2CAC               	goto	l3284
  2004  04AB  2C70               	goto	l3328
  2005  04AC                     l3284:	
  2006  04AC  087D               	movf	__doprnt@ap,w
  2007  04AD  0084               	movwf	4
  2008  04AE  1383               	bcf	3,7	;select IRP bank0
  2009  04AF  0800               	movf	0,w
  2010  04B0  00CA               	movwf	??__doprnt
  2011  04B1  3002               	movlw	2
  2012  04B2  0780               	addwf	0,f
  2013  04B3  084A               	movf	??__doprnt,w
  2014  04B4  0084               	movwf	4
  2015  04B5  0800               	movf	0,w
  2016  04B6  00CE               	movwf	__doprnt@_val
  2017  04B7  0A84               	incf	4,f
  2018  04B8  0800               	movf	0,w
  2019  04B9  00CF               	movwf	__doprnt@_val+1
  2020  04BA  1FCF               	btfss	__doprnt@_val+1,7
  2021  04BB  2CC3               	goto	l3292
  2022  04BC  3003               	movlw	3
  2023  04BD  04CC               	iorwf	__doprnt@flag,f
  2024  04BE  09CE               	comf	__doprnt@_val,f
  2025  04BF  09CF               	comf	__doprnt@_val+1,f
  2026  04C0  0ACE               	incf	__doprnt@_val,f
  2027  04C1  1903               	skipnz
  2028  04C2  0ACF               	incf	__doprnt@_val+1,f
  2029  04C3                     l3292:	
  2030  04C3  01D2               	clrf	__doprnt@c
  2031  04C4  0AD2               	incf	__doprnt@c,f
  2032  04C5                     l3296:	
  2033  04C5  1003               	clrc
  2034  04C6  0D52               	rlf	__doprnt@c,w
  2035  04C7  3E01               	addlw	low (_dpowers-__stringbase)
  2036  04C8  0084               	movwf	4
  2037  04C9  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2038  04CE  00CA               	movwf	??__doprnt
  2039  04CF  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2040  04D4  00CB               	movwf	??__doprnt+1
  2041  04D5  024F               	subwf	__doprnt@_val+1,w
  2042  04D6  1D03               	skipz
  2043  04D7  2CDA               	goto	u705
  2044  04D8  084A               	movf	??__doprnt,w
  2045  04D9  024E               	subwf	__doprnt@_val,w
  2046  04DA                     u705:	
  2047  04DA  1C03               	btfss	3,0
  2048  04DB  2CE1               	goto	l3304
  2049  04DC  0AD2               	incf	__doprnt@c,f
  2050  04DD  0852               	movf	__doprnt@c,w
  2051  04DE  3A05               	xorlw	5
  2052  04DF  1D03               	skipz
  2053  04E0  2CC5               	goto	l3296
  2054  04E1                     l3304:	
  2055  04E1  084C               	movf	__doprnt@flag,w
  2056  04E2  3903               	andlw	3
  2057  04E3  1903               	btfsc	3,2
  2058  04E4  2CFD               	goto	l3314
  2059  04E5  0853               	movf	__doprnt@pb,w
  2060  04E6  3E01               	addlw	1
  2061  04E7  0084               	movwf	4
  2062  04E8  1383               	bcf	3,7	;select IRP bank0
  2063  04E9  0880               	movf	0,f
  2064  04EA  1903               	skipnz
  2065  04EB  2CF4               	goto	l3310
  2066  04EC  302D               	movlw	45
  2067  04ED  2599               	fcall	PL6	;call to abstracted procedure
  2068  04EE  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  2069  04F3  2CFD               	goto	l3314
  2070  04F4                     l3310:	
  2071  04F4  0853               	movf	__doprnt@pb,w
  2072  04F5  0084               	movwf	4
  2073  04F6  0800               	movf	0,w
  2074  04F7  0084               	movwf	4
  2075  04F8  302D               	movlw	45
  2076  04F9  0080               	movwf	0
  2077  04FA  0853               	movf	__doprnt@pb,w
  2078  04FB  0084               	movwf	4
  2079  04FC  0A80               	incf	0,f
  2080  04FD                     l3314:	
  2081  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  2082  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  2083  04FF  0852               	movf	__doprnt@c,w
  2084  0500  00CD               	movwf	__doprnt@prec
  2085  0501  2D3B               	goto	l3326
  2086  0502                     l3316:	
  2087  0502  300A               	movlw	10
  2088  0503  00F7               	movwf	?___lwmod
  2089  0504  01F8               	clrf	?___lwmod+1
  2090  0505  1003               	clrc
  2091  0506  0D4D               	rlf	__doprnt@prec,w
  2092  0507  3E01               	addlw	low (_dpowers-__stringbase)
  2093  0508  0084               	movwf	4
  2094  0509  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2095  050E  00F0               	movwf	?___lwdiv
  2096  050F  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2097  0514  00F1               	movwf	?___lwdiv+1
  2098  0515  084F               	movf	__doprnt@_val+1,w
  2099  0516  00F3               	movwf	?___lwdiv+3
  2100  0517  084E               	movf	__doprnt@_val,w
  2101  0518  00F2               	movwf	?___lwdiv+2
  2102  0519  2544  120A  118A   	fcall	___lwdiv
  2103  051C  0871               	movf	?___lwdiv+1,w
  2104  051D  00FA               	movwf	?___lwmod+3
  2105  051E  0870               	movf	?___lwdiv,w
  2106  051F  00F9               	movwf	?___lwmod+2
  2107  0520  256E  120A  118A   	fcall	___lwmod
  2108  0523  0877               	movf	?___lwmod,w
  2109  0524  3E30               	addlw	48
  2110  0525  00D2               	movwf	__doprnt@c
  2111  0526  0853               	movf	__doprnt@pb,w
  2112  0527  3E01               	addlw	1
  2113  0528  0084               	movwf	4
  2114  0529  1383               	bcf	3,7	;select IRP bank0
  2115  052A  0880               	movf	0,f
  2116  052B  1903               	skipnz
  2117  052C  2D35               	goto	l3322
  2118  052D  0852               	movf	__doprnt@c,w
  2119  052E  2599               	fcall	PL6	;call to abstracted procedure
  2120  052F  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  2121  0534  2D3B               	goto	l3326
  2122  0535                     l3322:	
  2123  0535  0853               	movf	__doprnt@pb,w
  2124  0536  0084               	movwf	4
  2125  0537  0800               	movf	0,w
  2126  0538  2592  120A  118A   	fcall	PL5	;call to abstracted procedure
  2127  053B                     l3326:	
  2128  053B  1283               	bcf	3,5	;RP0=0, select bank0
  2129  053C  1303               	bcf	3,6	;RP1=0, select bank0
  2130  053D  03CD               	decf	__doprnt@prec,f
  2131  053E  0F4D               	incfsz	__doprnt@prec,w
  2132  053F  2D02               	goto	l3316
  2133  0540  2C70               	goto	l3328
  2134  0541                     l3330:	
  2135  0541  01FC               	clrf	?__doprnt
  2136  0542  01FD               	clrf	?__doprnt+1
  2137  0543  0008               	return
  2138  0544                     __end_of__doprnt:	
  2139  0544                     __ptext423:	
  2140 ;; =============== function ___lwmod ends ============
  2141                           
  2142                           
  2143 ;; *************** function ___lwdiv *****************
  2144 ;; Defined at:
  2145 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwdiv.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  divisor         2    0[COMMON] unsigned int 
  2148 ;;  dividend        2    2[COMMON] unsigned int 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  quotient        2    4[COMMON] unsigned int 
  2151 ;;  counter         1    6[COMMON] unsigned char 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  2    0[COMMON] unsigned int 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 60/0
  2158 ;;		On exit  : 60/0
  2159 ;;		Unchanged: FFF9F/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2161 ;;      Params:         4       0       0       0       0
  2162 ;;      Locals:         3       0       0       0       0
  2163 ;;      Temps:          0       0       0       0       0
  2164 ;;      Totals:         7       0       0       0       0
  2165 ;;Total ram usage:        7 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		__doprnt
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173  0544                     ___lwdiv:	
  2174                           
  2175                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2176  0544  01F4               	clrf	___lwdiv@quotient
  2177  0545  01F5               	clrf	___lwdiv@quotient+1
  2178  0546  0871               	movf	___lwdiv@divisor+1,w
  2179  0547  0470               	iorwf	___lwdiv@divisor,w
  2180  0548  1903               	skipnz
  2181  0549  2D69               	goto	l3200
  2182  054A  01F6               	clrf	___lwdiv@counter
  2183  054B                     L3:	
  2184  054B  0AF6               	incf	___lwdiv@counter,f
  2185  054C  1BF1               	btfsc	___lwdiv@divisor+1,7
  2186  054D  2D52               	goto	l3188
  2187  054E  1003               	clrc
  2188  054F  0DF0               	rlf	___lwdiv@divisor,f
  2189  0550  0DF1               	rlf	___lwdiv@divisor+1,f
  2190  0551  2D4B               	goto	L3
  2191  0552                     l3188:	
  2192  0552  1003               	clrc
  2193  0553  0DF4               	rlf	___lwdiv@quotient,f
  2194  0554  0DF5               	rlf	___lwdiv@quotient+1,f
  2195  0555  0871               	movf	___lwdiv@divisor+1,w
  2196  0556  0273               	subwf	___lwdiv@dividend+1,w
  2197  0557  1D03               	skipz
  2198  0558  2D5B               	goto	u545
  2199  0559  0870               	movf	___lwdiv@divisor,w
  2200  055A  0272               	subwf	___lwdiv@dividend,w
  2201  055B                     u545:	
  2202  055B  1C03               	skipc
  2203  055C  2D65               	goto	L4
  2204  055D  0870               	movf	___lwdiv@divisor,w
  2205  055E  02F2               	subwf	___lwdiv@dividend,f
  2206  055F  0871               	movf	___lwdiv@divisor+1,w
  2207  0560  1C03               	skipc
  2208  0561  03F3               	decf	___lwdiv@dividend+1,f
  2209  0562  02F3               	subwf	___lwdiv@dividend+1,f
  2210  0563  1474               	bsf	___lwdiv@quotient,0
  2211  0564  1003               	clrc
  2212  0565                     L4:	
  2213  0565  0CF1               	rrf	___lwdiv@divisor+1,f
  2214  0566  0CF0               	rrf	___lwdiv@divisor,f
  2215  0567  0BF6               	decfsz	___lwdiv@counter,f
  2216  0568  2D52               	goto	l3188
  2217  0569                     l3200:	
  2218  0569  0875               	movf	___lwdiv@quotient+1,w
  2219  056A  00F1               	movwf	?___lwdiv+1
  2220  056B  0874               	movf	___lwdiv@quotient,w
  2221  056C  00F0               	movwf	?___lwdiv
  2222  056D  0008               	return
  2223  056E                     __end_of___lwdiv:	
  2224  056E                     __ptext422:	
  2225 ;; =============== function _atoi ends ============
  2226                           
  2227                           
  2228 ;; *************** function ___lwmod *****************
  2229 ;; Defined at:
  2230 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwmod.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  divisor         2    7[COMMON] unsigned int 
  2233 ;;  dividend        2    9[COMMON] unsigned int 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  counter         1   11[COMMON] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  2    7[COMMON] unsigned int 
  2238 ;; Registers used:
  2239 ;;		wreg, status,2, status,0
  2240 ;; Tracked objects:
  2241 ;;		On entry : 60/0
  2242 ;;		On exit  : 60/0
  2243 ;;		Unchanged: FFF9F/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         4       0       0       0       0
  2246 ;;      Locals:         1       0       0       0       0
  2247 ;;      Temps:          0       0       0       0       0
  2248 ;;      Totals:         5       0       0       0       0
  2249 ;;Total ram usage:        5 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; This function calls:
  2252 ;;		Nothing
  2253 ;; This function is called by:
  2254 ;;		__doprnt
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257  056E                     ___lwmod:	
  2258                           
  2259                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2260  056E  0878               	movf	___lwmod@divisor+1,w
  2261  056F  0477               	iorwf	___lwmod@divisor,w
  2262  0570  1903               	skipnz
  2263  0571  2D8D               	goto	l3220
  2264  0572  01FB               	clrf	___lwmod@counter
  2265  0573                     L1:	
  2266  0573  0AFB               	incf	___lwmod@counter,f
  2267  0574  1BF8               	btfsc	___lwmod@divisor+1,7
  2268  0575  2D7A               	goto	l3212
  2269  0576  1003               	clrc
  2270  0577  0DF7               	rlf	___lwmod@divisor,f
  2271  0578  0DF8               	rlf	___lwmod@divisor+1,f
  2272  0579  2D73               	goto	L1
  2273  057A                     l3212:	
  2274  057A  0878               	movf	___lwmod@divisor+1,w
  2275  057B  027A               	subwf	___lwmod@dividend+1,w
  2276  057C  1D03               	skipz
  2277  057D  2D80               	goto	u585
  2278  057E  0877               	movf	___lwmod@divisor,w
  2279  057F  0279               	subwf	___lwmod@dividend,w
  2280  0580                     u585:	
  2281  0580  1C03               	skipc
  2282  0581  2D89               	goto	L2
  2283  0582  0877               	movf	___lwmod@divisor,w
  2284  0583  02F9               	subwf	___lwmod@dividend,f
  2285  0584  0878               	movf	___lwmod@divisor+1,w
  2286  0585  1C03               	skipc
  2287  0586  03FA               	decf	___lwmod@dividend+1,f
  2288  0587  02FA               	subwf	___lwmod@dividend+1,f
  2289  0588  1003               	clrc
  2290  0589                     L2:	
  2291  0589  0CF8               	rrf	___lwmod@divisor+1,f
  2292  058A  0CF7               	rrf	___lwmod@divisor,f
  2293  058B  0BFB               	decfsz	___lwmod@counter,f
  2294  058C  2D7A               	goto	l3212
  2295  058D                     l3220:	
  2296  058D  087A               	movf	___lwmod@dividend+1,w
  2297  058E  00F8               	movwf	?___lwmod+1
  2298  058F  0879               	movf	___lwmod@dividend,w
  2299  0590  00F7               	movwf	?___lwmod
  2300  0591  0008               	return
  2301  0592                     __end_of___lwmod:	
  2302  0592                     PL5:	
  2303  0592  0084               	movwf	4
  2304  0593  0852               	movf	__doprnt@c,w
  2305  0594  0080               	movwf	0
  2306  0595  0853               	movf	__doprnt@pb,w
  2307  0596  0084               	movwf	4
  2308  0597  0A80               	incf	0,f
  2309  0598  0008               	return
  2310  0599                     PL6:	
  2311  0599  00F0               	movwf	?_putch
  2312  059A  0853               	movf	__doprnt@pb,w
  2313  059B  3E01               	addlw	1
  2314  059C  0084               	movwf	4
  2315  059D  0800               	movf	0,w
  2316  059E  0008               	return
  2317                           
  2318                           	psect	text421
  2319  03D1                     __ptext421:	
  2320 ;; =============== function _pause ends ============
  2321                           
  2322                           
  2323 ;; *************** function _atoi *****************
  2324 ;; Defined at:
  2325 ;;		line 6 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\atoi.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  s               1    wreg     PTR const unsigned char 
  2328 ;;		 -> PA2(5), PA1(5), PA(4), 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  s               1   13[COMMON] PTR const unsigned char 
  2331 ;;		 -> PA2(5), PA1(5), PA(4), 
  2332 ;;  a               2   11[COMMON] int 
  2333 ;;  sign            1   10[COMMON] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  2    6[COMMON] int 
  2336 ;; Registers used:
  2337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 100/0
  2341 ;;		Unchanged: FFEFF/0
  2342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2343 ;;      Params:         2       0       0       0       0
  2344 ;;      Locals:         4       0       0       0       0
  2345 ;;      Temps:          2       0       0       0       0
  2346 ;;      Totals:         8       0       0       0       0
  2347 ;;Total ram usage:        8 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    1
  2350 ;; This function calls:
  2351 ;;		___wmul
  2352 ;;		_isdigit
  2353 ;; This function is called by:
  2354 ;;		_main
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357  03D1                     _atoi:	
  2358                           
  2359                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2360                           ;atoi@s stored from wreg
  2361  03D1  00FD               	movwf	atoi@s
  2362  03D2                     l3228:	
  2363  03D2  087D               	movf	atoi@s,w
  2364  03D3  0084               	movwf	4
  2365  03D4  1383               	bcf	3,7	;select IRP bank0
  2366  03D5  0800               	movf	0,w
  2367  03D6  3A20               	xorlw	32
  2368  03D7  1D03               	btfss	3,2
  2369  03D8  2BDB               	goto	l3230
  2370  03D9                     l3226:	
  2371  03D9  0AFD               	incf	atoi@s,f
  2372  03DA  2BD2               	goto	l3228
  2373  03DB                     l3230:	
  2374  03DB  087D               	movf	atoi@s,w
  2375  03DC  0084               	movwf	4
  2376  03DD  0800               	movf	0,w
  2377  03DE  3A09               	xorlw	9
  2378  03DF  1903               	skipnz
  2379  03E0  2BD9               	goto	l3226
  2380  03E1  01FB               	clrf	atoi@a
  2381  03E2  01FC               	clrf	atoi@a+1
  2382  03E3  01FA               	clrf	atoi@sign
  2383  03E4  087D               	movf	atoi@s,w
  2384  03E5  0084               	movwf	4
  2385  03E6  0800               	movf	0,w
  2386  03E7  3A2D               	xorlw	45
  2387  03E8  1D03               	skipz
  2388  03E9  2BEC               	goto	l3238
  2389  03EA  0AFA               	incf	atoi@sign,f
  2390  03EB  2C16               	goto	l3240
  2391  03EC                     l3238:	
  2392  03EC  087D               	movf	atoi@s,w
  2393  03ED  0084               	movwf	4
  2394  03EE  0800               	movf	0,w
  2395  03EF  3A2B               	xorlw	43
  2396  03F0  1903               	btfsc	3,2
  2397  03F1  2C16               	goto	l3240
  2398  03F2                     l3246:	
  2399  03F2  087D               	movf	atoi@s,w
  2400  03F3  0084               	movwf	4
  2401  03F4  0800               	movf	0,w
  2402  03F5  242C  120A  118A   	fcall	_isdigit
  2403  03F8  1C03               	btfss	3,0
  2404  03F9  2C18               	goto	l3248
  2405  03FA  087D               	movf	atoi@s,w
  2406  03FB  0084               	movwf	4
  2407  03FC  087C               	movf	atoi@a+1,w
  2408  03FD  00F1               	movwf	?___wmul+1
  2409  03FE  087B               	movf	atoi@a,w
  2410  03FF  00F0               	movwf	?___wmul
  2411  0400  300A               	movlw	10
  2412  0401  00F2               	movwf	?___wmul+2
  2413  0402  01F3               	clrf	?___wmul+3
  2414  0403  243A  120A  118A   	fcall	___wmul
  2415  0406  0800               	movf	0,w
  2416  0407  0770               	addwf	?___wmul,w
  2417  0408  00F8               	movwf	??_atoi
  2418  0409  3000               	movlw	0
  2419  040A  1803               	skipnc
  2420  040B  3001               	movlw	1
  2421  040C  0771               	addwf	?___wmul+1,w
  2422  040D  00F9               	movwf	??_atoi+1
  2423  040E  0878               	movf	??_atoi,w
  2424  040F  3ED0               	addlw	208
  2425  0410  00FB               	movwf	atoi@a
  2426  0411  0879               	movf	??_atoi+1,w
  2427  0412  1803               	skipnc
  2428  0413  3E01               	addlw	1
  2429  0414  3EFF               	addlw	255
  2430  0415  00FC               	movwf	atoi@a+1
  2431  0416                     l3240:	
  2432  0416  0AFD               	incf	atoi@s,f
  2433  0417  2BF2               	goto	l3246
  2434  0418                     l3248:	
  2435  0418  087A               	movf	atoi@sign,w
  2436  0419  1903               	btfsc	3,2
  2437  041A  2C27               	goto	l3254
  2438  041B  097B               	comf	atoi@a,w
  2439  041C  00F8               	movwf	??_atoi
  2440  041D  097C               	comf	atoi@a+1,w
  2441  041E  00F9               	movwf	??_atoi+1
  2442  041F  0AF8               	incf	??_atoi,f
  2443  0420  1903               	skipnz
  2444  0421  0AF9               	incf	??_atoi+1,f
  2445  0422  0878               	movf	??_atoi,w
  2446  0423  00F6               	movwf	?_atoi
  2447  0424  0879               	movf	??_atoi+1,w
  2448  0425  00F7               	movwf	?_atoi+1
  2449  0426  0008               	return
  2450  0427                     l3254:	
  2451  0427  087C               	movf	atoi@a+1,w
  2452  0428  00F7               	movwf	?_atoi+1
  2453  0429  087B               	movf	atoi@a,w
  2454  042A  00F6               	movwf	?_atoi
  2455  042B  0008               	return
  2456  042C                     __end_of_atoi:	
  2457  042C                     __ptext425:	
  2458 ;; =============== function ___wmul ends ============
  2459                           
  2460                           
  2461 ;; *************** function _isdigit *****************
  2462 ;; Defined at:
  2463 ;;		line 13 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\isdigit.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  c               1    wreg     unsigned char 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  c               1    1[COMMON] unsigned char 
  2468 ;; Return value:  Size  Location     Type
  2469 ;;		None               void
  2470 ;; Registers used:
  2471 ;;		wreg, status,2, status,0
  2472 ;; Tracked objects:
  2473 ;;		On entry : 100/0
  2474 ;;		On exit  : 100/0
  2475 ;;		Unchanged: FFEFF/0
  2476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2477 ;;      Params:         0       0       0       0       0
  2478 ;;      Locals:         2       0       0       0       0
  2479 ;;      Temps:          0       0       0       0       0
  2480 ;;      Totals:         2       0       0       0       0
  2481 ;;Total ram usage:        2 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; This function calls:
  2484 ;;		Nothing
  2485 ;; This function is called by:
  2486 ;;		_atoi
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489  042C                     _isdigit:	
  2490                           
  2491                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2492                           ;isdigit@c stored from wreg
  2493  042C  00F1               	movwf	isdigit@c
  2494  042D  303A               	movlw	58
  2495  042E  01F0               	clrf	_isdigit$2431
  2496  042F  0271               	subwf	isdigit@c,w
  2497  0430  1803               	skipnc
  2498  0431  2C38               	goto	l3158
  2499  0432  3030               	movlw	48
  2500  0433  0271               	subwf	isdigit@c,w
  2501  0434  1C03               	skipc
  2502  0435  2C38               	goto	l3158
  2503  0436  01F0               	clrf	_isdigit$2431
  2504  0437  0AF0               	incf	_isdigit$2431,f
  2505  0438                     l3158:	
  2506  0438  0C70               	rrf	_isdigit$2431,w
  2507  0439  0008               	return
  2508  043A                     __end_of_isdigit:	
  2509  043A                     __ptext424:	
  2510 ;; =============== function ___lwdiv ends ============
  2511                           
  2512                           
  2513 ;; *************** function ___wmul *****************
  2514 ;; Defined at:
  2515 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  multiplier      2    0[COMMON] unsigned int 
  2518 ;;  multiplicand    2    2[COMMON] unsigned int 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  product         2    4[COMMON] unsigned int 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  2    0[COMMON] unsigned int 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 100/0
  2528 ;;		Unchanged: FFEFF/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2530 ;;      Params:         4       0       0       0       0
  2531 ;;      Locals:         2       0       0       0       0
  2532 ;;      Temps:          0       0       0       0       0
  2533 ;;      Totals:         6       0       0       0       0
  2534 ;;Total ram usage:        6 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_atoi
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542  043A                     ___wmul:	
  2543                           
  2544                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2545  043A  01F4               	clrf	___wmul@product
  2546  043B  01F5               	clrf	___wmul@product+1
  2547  043C                     l3164:	
  2548  043C  1C70               	btfss	___wmul@multiplier,0
  2549  043D  2C44               	goto	l3168
  2550  043E  0872               	movf	___wmul@multiplicand,w
  2551  043F  07F4               	addwf	___wmul@product,f
  2552  0440  1803               	skipnc
  2553  0441  0AF5               	incf	___wmul@product+1,f
  2554  0442  0873               	movf	___wmul@multiplicand+1,w
  2555  0443  07F5               	addwf	___wmul@product+1,f
  2556  0444                     l3168:	
  2557  0444  1003               	clrc
  2558  0445  0DF2               	rlf	___wmul@multiplicand,f
  2559  0446  0DF3               	rlf	___wmul@multiplicand+1,f
  2560  0447  1003               	clrc
  2561  0448  0CF1               	rrf	___wmul@multiplier+1,f
  2562  0449  0CF0               	rrf	___wmul@multiplier,f
  2563  044A  0871               	movf	___wmul@multiplier+1,w
  2564  044B  0470               	iorwf	___wmul@multiplier,w
  2565  044C  1D03               	skipz
  2566  044D  2C3C               	goto	l3164
  2567  044E  0875               	movf	___wmul@product+1,w
  2568  044F  00F1               	movwf	?___wmul+1
  2569  0450  0874               	movf	___wmul@product,w
  2570  0451  00F0               	movwf	?___wmul
  2571  0452  0008               	return
  2572  0453                     __end_of___wmul:	
  2573                           
  2574                           	psect	text427
  2575  039C                     __ptext427:	
  2576 ;; =============== function _msecbase ends ============
  2577                           
  2578                           
  2579 ;; *************** function _ADC *****************
  2580 ;; Defined at:
  2581 ;;		line 174 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;		None               void
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0
  2590 ;; Tracked objects:
  2591 ;;		On entry : 60/0
  2592 ;;		On exit  : 60/0
  2593 ;;		Unchanged: FFF9F/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2595 ;;      Params:         0       0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0
  2597 ;;      Temps:          1       0       0       0       0
  2598 ;;      Totals:         1       0       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607  039C                     _ADC:	
  2608                           
  2609                           ;DATACOM.c: 175: ADCON0=0xD5;
  2610                           
  2611                           ; Regs used in _ADC: [wreg+status,2+status,0]
  2612  039C  30D5               	movlw	213
  2613  039D  009F               	movwf	31	;volatile
  2614                           
  2615                           ;DATACOM.c: 176: GO_DONE=1;
  2616  039E  149F               	bsf	31,1
  2617  039F                     l1105:	
  2618                           ;DATACOM.c: 177: while(GO_DONE);
  2619                           
  2620  039F  189F               	btfsc	31,1
  2621  03A0  2B9F               	goto	l1105
  2622                           
  2623                           ;DATACOM.c: 178: vadc1=(ADRESH<<2)|(ADRESL>>6);
  2624  03A1  081E               	movf	30,w	;volatile
  2625  03A2  00A6               	movwf	_vadc1
  2626  03A3  01A7               	clrf	_vadc1+1
  2627  03A4  1003               	clrc
  2628  03A5  0DA6               	rlf	_vadc1,f
  2629  03A6  0DA7               	rlf	_vadc1+1,f
  2630  03A7  1003               	clrc
  2631  03A8  0DA6               	rlf	_vadc1,f
  2632  03A9  0DA7               	rlf	_vadc1+1,f
  2633  03AA  1683               	bsf	3,5	;RP0=1, select bank1
  2634  03AB  081E               	movf	30,w	;volatile
  2635  03AC  00F0               	movwf	??_ADC
  2636  03AD  3006               	movlw	6
  2637  03AE                     u445:	
  2638  03AE  1003               	clrc
  2639  03AF  0CF0               	rrf	??_ADC,f
  2640  03B0  3EFF               	addlw	-1
  2641  03B1  1D03               	skipz
  2642  03B2  2BAE               	goto	u445
  2643  03B3  0870               	movf	??_ADC,w
  2644  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2645  03B5  04A6               	iorwf	_vadc1,f
  2646                           
  2647                           ;DATACOM.c: 180: ADCON0=0xD9;
  2648  03B6  30D9               	movlw	217
  2649  03B7  009F               	movwf	31	;volatile
  2650                           
  2651                           ;DATACOM.c: 181: GO_DONE=1;
  2652  03B8  149F               	bsf	31,1
  2653  03B9                     l1108:	
  2654                           ;DATACOM.c: 182: while(GO_DONE);
  2655                           
  2656  03B9  189F               	btfsc	31,1
  2657  03BA  2BB9               	goto	l1108
  2658                           
  2659                           ;DATACOM.c: 183: vadc2=(ADRESH<<2)|(ADRESL>>6);
  2660  03BB  081E               	movf	30,w	;volatile
  2661  03BC  00A8               	movwf	_vadc2
  2662  03BD  01A9               	clrf	_vadc2+1
  2663  03BE  1003               	clrc
  2664  03BF  0DA8               	rlf	_vadc2,f
  2665  03C0  0DA9               	rlf	_vadc2+1,f
  2666  03C1  1003               	clrc
  2667  03C2  0DA8               	rlf	_vadc2,f
  2668  03C3  0DA9               	rlf	_vadc2+1,f
  2669  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  2670  03C5  081E               	movf	30,w	;volatile
  2671  03C6  00F0               	movwf	??_ADC
  2672  03C7  3006               	movlw	6
  2673  03C8                     u465:	
  2674  03C8  1003               	clrc
  2675  03C9  0CF0               	rrf	??_ADC,f
  2676  03CA  3EFF               	addlw	-1
  2677  03CB  1D03               	skipz
  2678  03CC  2BC8               	goto	u465
  2679  03CD  0870               	movf	??_ADC,w
  2680  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2681  03CF  04A8               	iorwf	_vadc2,f
  2682  03D0  0008               	return
  2683  03D1                     __end_of_ADC:	
  2684                           
  2685                           	psect	text428
  2686  07DF                     __ptext428:	
  2687 ;; =============== function _ADC ends ============
  2688                           
  2689                           
  2690 ;; *************** function _init_comms *****************
  2691 ;; Defined at:
  2692 ;;		line 50 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;		None               void
  2699 ;; Registers used:
  2700 ;;		wreg, status,2
  2701 ;; Tracked objects:
  2702 ;;		On entry : 17F/0
  2703 ;;		On exit  : 17F/60
  2704 ;;		Unchanged: FFE80/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2706 ;;      Params:         0       0       0       0       0
  2707 ;;      Locals:         0       0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0
  2709 ;;      Totals:         0       0       0       0       0
  2710 ;;Total ram usage:        0 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_main
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718  07DF                     _init_comms:	
  2719                           
  2720                           ;DATACOM.c: 51: TRISC7 = 1;
  2721                           
  2722                           ; Regs used in _init_comms: [wreg+status,2]
  2723  07DF  1683               	bsf	3,5	;RP0=1, select bank1
  2724  07E0  3019               	movlw	25
  2725  07E1  1787               	bsf	7,7
  2726                           
  2727                           ;DATACOM.c: 52: TRISC6 = 0;
  2728  07E2  1307               	bcf	7,6
  2729                           
  2730                           ;DATACOM.c: 53: SPBRG = 0x19;
  2731  07E3  0099               	movwf	25	;volatile
  2732                           
  2733                           ;DATACOM.c: 55: RCSTA = 0x90;
  2734  07E4  3090               	movlw	144
  2735  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  2736  07E6  0098               	movwf	24	;volatile
  2737                           
  2738                           ;DATACOM.c: 56: TXSTA = 0x26;
  2739  07E7  3026               	movlw	38
  2740  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  2741  07E9  0098               	movwf	24	;volatile
  2742                           
  2743                           ;DATACOM.c: 57: BAUDCTL = 0;
  2744  07EA  1703               	bsf	3,6	;RP1=1, select bank3
  2745  07EB  0187               	clrf	7	;volatile
  2746  07EC  0008               	return
  2747  07ED                     __end_of_init_comms:	
  2748                           
  2749                           	psect	text429
  2750  0396                     __ptext429:	
  2751 ;; =============== function _init_comms ends ============
  2752                           
  2753                           
  2754 ;; *************** function _getch *****************
  2755 ;; Defined at:
  2756 ;;		line 43 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      unsigned char 
  2763 ;; Registers used:
  2764 ;;		wreg
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 60/0
  2768 ;;		Unchanged: FFF9F/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2770 ;;      Params:         0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_main
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782  0396                     _getch:	
  2783  0396                     l1079:	
  2784                           ;DATACOM.c: 45: while(!RCIF)
  2785                           
  2786                           ; Regs used in _getch: [wreg]
  2787                           
  2788  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2789  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2790  0398  1E8C               	btfss	12,5
  2791  0399  2B96               	goto	l1079
  2792                           
  2793                           ;DATACOM.c: 47: return RCREG;
  2794  039A  081A               	movf	26,w	;volatile
  2795  039B  0008               	return
  2796  039C                     __end_of_getch:	
  2797                           
  2798                           	psect	text430
  2799  0391                     __ptext430:	
  2800 ;; =============== function _getch ends ============
  2801                           
  2802                           
  2803 ;; *************** function _putch *****************
  2804 ;; Defined at:
  2805 ;;		line 36 in file "C:\Users\Jorge\OneDrive\Escritorio\NEW GEN CODES\DATACOM\DATACOM.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  byte            1    0[COMMON] unsigned char 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;		None               void
  2812 ;; Registers used:
  2813 ;;		wreg
  2814 ;; Tracked objects:
  2815 ;;		On entry : 160/0
  2816 ;;		On exit  : 160/0
  2817 ;;		Unchanged: FFE9F/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2819 ;;      Params:         1       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0
  2822 ;;      Totals:         1       0       0       0       0
  2823 ;;Total ram usage:        1 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_printf
  2829 ;;		__doprnt
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832  0391                     _putch:	
  2833  0391                     l1073:	
  2834                           ;DATACOM.c: 38: while(!TXIF)
  2835                           
  2836                           ; Regs used in _putch: [wreg]
  2837                           
  2838  0391  1E0C               	btfss	12,4
  2839  0392  2B91               	goto	l1073
  2840                           
  2841                           ;DATACOM.c: 40: TXREG = byte;
  2842  0393  0870               	movf	putch@byte,w
  2843  0394  0099               	movwf	25	;volatile
  2844  0395  0008               	return
  2845  0396                     __end_of_putch:	
  2846                           
  2847 ;; =============== function _putch ends ============
  2848  0002                     
  2849                           	psect	functab
  2850  0700                     __pfunctab:	
  2851  0700                     fptable:	
  2852  0700  00FF               	movwf	(btemp+1)& (0+127)
  2853  0701  3007               	movlw	high fptable
  2854  0702  008A               	movwf	10
  2855  0703  087F               	movf	(btemp+1)& (0+127),w
  2856  0704  0782               	addwf	2,f
  2857  0705                     fpbase:	
  2858  0705  2F05               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  2859  0706                     fp__putch:	
  2860  0706  120A  118A  2B91   	ljmp	_putch
  2861  007E                     btemp	set	126	;btemp
  2862  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Fri May 20 11:57:19 2022

                   pc 0002                    _PA 0042                    _op 0020                    fsr 0004  
 ___wmul@multiplicand 0072                   _ADC 039C                   _PA1 002E                   _PA2 0033  
                 _RC0 0038                   _RC3 003B                   _RC4 003C                   _PR2 0092  
                 u445 03AE                   u465 03C8                   u545 055B                   u705 04DA  
                 u805 0685                   u585 0580                   u665 0789                   u785 0607  
                 u795 065D                   _PWM 070D                   fsr0 0004                   indf 0000  
         lcd_goto@pos 0075                  ?_ADC 0070                  ?_PWM 0070                  l1111 0000  
                l1120 0000                  l1105 039F                  l1114 0000                  l1108 03B9  
                l1132 0000                  l1141 0000                  l1117 0000                  l1126 0000  
                l1135 0000                  l1144 07AE                  l1073 0391                  l1082 0000  
                l1147 0000                  l1076 0000                  l1085 0000                  l1079 0396  
                l2207 0000                  l3120 0000                  l3200 0569                  l2217 0000  
                l3130 0000                  l2227 0000                  l1179 0000                  l3116 0000  
                l3140 0000                  l3132 0000                  l3212 057A                  l3220 058D  
                l3204 0000                  l3126 0000                  l3142 0000                  l3134 0000  
                l3150 0000                  l3230 03DB                  l3310 04F4                  l3302 0000  
                l3128 0000                  l3152 0000                  l3240 0416                  l3224 0000  
                l3312 0000                  l3304 04E1                  l3400 0000                  l3146 0000  
                l3138 0000                  l3170 0000                  l3162 0000                  l3218 0000  
                l3250 0000                  l3234 0000                  l3226 03D9                  l3322 0535  
                l3314 04FD                  l3330 0541                  l3402 072F                  l3410 0000  
                l2179 0000                  l2195 0000                  l3148 0000                  l3172 0000  
                l3164 043C                  l3180 0000                  l3228 03D2                  l3324 0000  
                l3316 0502                  l2188 0000                  l3340 0000                  l3420 0000  
                l3412 0000                  l3404 0000                  l3500 0000                  l3158 0438  
                l3190 0000                  l3254 0427                  l3246 03F2                  l3238 03EC  
                l3262 0000                  l3318 0000                  l3326 053B                  l3334 0000  
                l3350 0000                  l3430 0000                  l3422 0000                  l3414 0000  
                l3406 0000                  l3502 0000                  l3168 0444                  l3248 0418  
                l3264 0783                  l3328 0470                  l3336 0000                  l3352 0000  
                l3344 0000                  l3360 0000                  l3440 0000                  l3432 0000  
                l3424 0000                  l3416 0000                  l3408 0000                  l3504 0000  
                l3194 0000                  l3178 0000                  l3258 0781                  l3290 0000  
                l3282 0000                  l3274 0491                  l3266 0000                  l3338 0000  
                l3346 0000                  l3370 0000                  l3362 0000                  l3442 0000  
                l3434 0000                  l3426 0000                  l3418 0000                  l3530 0000  
                l3522 0000                  l3514 0645                  l3506 0000                  l3450 0000  
                l3188 0552                  l3292 04C3                  l3284 04AC                  l3276 0000  
                l3348 0000                  l3372 0000                  l3364 0000                  l3356 0000  
                l3380 0000                  l3436 0000                  l3428 0000                  l3540 0000  
                l3532 0000                  l3516 0000                  l3508 0643                  l3460 0000  
                l3452 0000                  l3444 0000                  l3198 0000                  l3286 0000  
                l3278 0498                  l3366 0000                  l3358 0000                  l3382 0000  
                l3374 0000                  l3390 0000                  l3438 0000                  l3550 0000  
                l3542 0000                  l3518 0000                  l3470 05C6                  l3462 0000  
                l3454 0000                  l3446 0000                  l3296 04C5                  l3368 0000  
                l3384 0000                  l3376 0000                  l3392 0000                  l3608 06F2  
                l3552 0000                  l3544 0000                  l3536 0000                  l3528 066D  
                l3480 05ED                  l3472 0000                  l3464 0000                  l3456 0000  
                l3448 0000                  l3386 0000                  l3378 0000                  l3394 0000  
                l3554 0000                  l3546 0000                  l3538 0000                  l3490 0000  
                l3474 0000                  l3466 0000                  l3458 0000                  l3388 0000  
                l3396 0000                  l3548 0000                  l3476 0000                  l3468 06E6  
                l3494 0000                  l3486 05EF                  l3478 0000                  l3496 0000  
                l3488 0000                  l3498 0000                  _ADFM 04FF                  STR_1 0030  
                STR_2 0030                  STR_3 0030                  STR_4 0034                  STR_5 001D  
                STR_6 0034                  STR_7 0024                  STR_8 0034                  STR_9 002A  
                _T0IF 005A                  _RCIF 0065                  _TMR0 0001                  _TXIF 0064  
                _atoi 03D1                  _main 059F                  _pwm1 0022                  _pwm2 0024  
                btemp 007E                  start 0000                 ??_ADC 0070                 ??_PWM 0074  
               ?_atoi 0076                 ?_main 0070                 _ANSEL 0188                 _T2CON 0012  
     __end_of___lwdiv 056E       __end_of___lwmod 0592                 _RCREG 001A                 _RCSTA 0018  
               _SPBRG 0099                 _PORTA 0005                 _PORTB 0006                 _PORTD 0008  
     __end_of__doprnt 0544                 _TRISA 0085                 _TRISB 0086                 _TRISC 0087  
               _TRISD 0088                 _TRISE 0089                 _TXREG 0019                 _TXSTA 0098  
               _getch 0396                 _vadc1 0026                 _vadc2 0028       __end_of_isdigit 043A  
               _pause 0781                 atoi@a 007B                 atoi@s 007D                 _putch 0391  
               main@i 005B                 fpbase 0705                 pclath 000A                 status 0003  
               wtemp0 007E       __end_of_sprintf 046F          __end_of_atoi 042C          __end_of_main 0700  
              ??_atoi 0078                ??_main 007E                ?_getch 0070                _ADCON0 001F  
              _ADRESH 001E                _ADRESL 009E                _CCPR1L 0015                ?_pause 0070  
              _CCPR2L 001B                ?_putch 0070                _ANSELH 0189                _TRISC6 043E  
              _TRISC7 043F      __end_of_lcd_init 0781      __end_of_lcd_goto 070D      __end_of_lcd_puts 074B  
              _carac1 0046                _carac2 0038                _carac3 003D                ___wmul 043A  
           ??___lwdiv 0074             ??___lwmod 007B             ??__doprnt 004A          __doprnt@_val 004E  
        __doprnt@flag 004C                _printf 0453          __doprnt@prec 004D      __end_of_msecbase 07B2  
              clrloop 07F9                _vporta 002A                _vportb 002C                fptable 0700  
              fptotal 0002             ??_isdigit 0070                pause@x 0072             ??_sprintf 007E  
      __pcstackCOMMON 0070         __end_of_getch 039C         __end_of_pause 0792         __end_of_putch 0396  
  __size_of_lcd_clear 0009            __doprnt@ap 007D            __doprnt@pb 0053               ??_getch 0070  
  __size_of_lcd_write 0013               ??_pause 0072               ??_putch 0071            __pbssBANK0 0020  
          __pmaintext 059F               ?___wmul 0070               _CCP1CON 0017               _CCP2CON 001D  
             _BAUDCTL 0187               ?_printf 0054               _GO_DONE 00F9             ?_lcd_init 0070  
           ?_lcd_goto 0070             ?_lcd_puts 0075             ?_msecbase 0070     __end_of_lcd_clear 07BB  
   __end_of_lcd_write 07A5       __size_of___wmul 0019               ___lwdiv 0544               ___lwmod 056E  
          _init_comms 07DF               __doprnt 046F       __size_of_printf 000C          __size_of_ADC 0035  
        __size_of_PWM 0021               _dpowers 0013               _isdigit 042C               _sprintf 045F  
          ??_lcd_init 0075            ??_lcd_goto 0075            ??_lcd_puts 0077  end_of_initialization 07F4  
          ??_msecbase 0070               printf@f 0056            main@i_1853 005D            main@i_1854 005F  
          lcd_write@c 0074           ?_init_comms 0070        __end_of___wmul 0453        __end_of_printf 045F  
 start_initialization 07ED           __end_of_ADC 03D1           __end_of_PWM 072E              ??___wmul 0074  
            ??_printf 007E          pause@usvalue 0070         __pcstackBANK0 004A          _isdigit$2431 0070  
 __size_of_init_comms 000E     __size_of_lcd_init 0036     __size_of_lcd_goto 0004             __doprnt@c 0052  
           __doprnt@f 007C     __size_of_lcd_puts 001D      ___lwdiv@dividend 0072             __pfunctab 0700  
   __size_of_msecbase 000D             __ptext411 074B             __ptext420 0781             __ptext412 072E  
           __ptext421 03D1             __ptext413 0709             __ptext430 0391             __ptext422 056E  
           __ptext414 07B2             __ptext423 0544             __ptext415 0792             __ptext424 043A  
           __ptext416 070D             __ptext425 042C             __ptext417 045F             __ptext426 07A5  
           __ptext418 0453             __ptext427 039C             __ptext419 046F             __ptext428 07DF  
           __ptext429 0396              ?___lwdiv 0070              ?___lwmod 0077              ?__doprnt 007C  
           _lcd_clear 07B2             __pstrings 0003             _lcd_write 0792              ?_isdigit 0070  
    ___lwdiv@quotient 0074        __size_of_getch 0006              ?_sprintf 0054        __size_of_pause 0011  
      __size_of_putch 0005        ___wmul@product 0074            ?_lcd_clear 0070           __stringbase 0012  
          ?_lcd_write 0070     ___wmul@multiplier 0070             lcd_puts@s 0075          ??_init_comms 0070  
    __size_of___lwdiv 002A      __size_of___lwmod 0024      __size_of__doprnt 00D5      __size_of_isdigit 000E  
     ___lwdiv@divisor 0070       ___lwdiv@counter 0076              _lcd_init 074B              _lcd_goto 0709  
            _lcd_puts 072E      __size_of_sprintf 0010         __size_of_atoi 005B         __size_of_main 0161  
  __end_of_init_comms 07ED              _msecbase 07A5              clear_ram 07F8              atoi@sign 007A  
            fp__putch 0706           ??_lcd_clear 0075           ??_lcd_write 0074             putch@byte 0070  
            isdigit@c 0071             sprintf@ap 0058             sprintf@pb 0059             sprintf@wh 0057  
    ___lwmod@dividend 0079             stringcode 000D              printf@ap 0057              printf@pb 0058  
          _OPTION_REG 0081              sprintf@f 0054       ___lwmod@divisor 0077       ___lwmod@counter 007B  
            stringdir 000D              stringtab 0003  

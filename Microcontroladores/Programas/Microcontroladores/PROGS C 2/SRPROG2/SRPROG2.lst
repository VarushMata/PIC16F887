

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Sat May 21 11:35:18 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,delta=2
    11                           	psect	text345,local,class=CODE,delta=2
    12                           	psect	text347,local,class=CODE,delta=2
    13                           	psect	text351,local,class=CODE,delta=2
    14                           	psect	text357,local,class=CODE,delta=2
    15                           	psect	text358,local,class=CODE,delta=2
    16                           	psect	text359,local,class=CODE,delta=2
    17                           	psect	functab,global,reloc=256,class=CODE,delta=2
    18                           	psect	pa_nodes,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  000A                     	;#
    21                           
    22                           	psect	config
    23  2007  E0F4               	dw	57588	;#
    24  2008  FFFF               	dw	65535	;#
    25                           
    26                           	psect	strings
    27  0003                     __pstrings:	
    28  0003                     stringtab:	
    29                           ;	global	stringdir,stringtab,__stringbase
    30                           
    31                           
    32                           ;	String table - string pointers are 1 byte each
    33  0003  1BFF               	btfsc	btemp+1,7
    34  0004  280D               	ljmp	stringcode
    35  0005  1383               	bcf	3,7
    36  0006  187F               	btfsc	btemp+1,0
    37  0007  1783               	bsf	3,7
    38  0008  0800               	movf	0,w
    39  0009  0A84               	incf	4,f
    40  000A  1903               	skipnz
    41  000B  0AFF               	incf	btemp+1,f
    42  000C  0008               	return
    43  000D                     stringcode:	
    44  000D                     stringdir:	
    45  000D  3000               	movlw	high stringdir
    46  000E  008A               	movwf	10
    47  000F  0804               	movf	4,w
    48  0010  0A84               	incf	4,f
    49  0011  0782               	addwf	2,f
    50  0012                     __stringbase:	
    51  0012  3400               	retlw	0
    52  0013                     _dpowers:	
    53  0013  3401               	retlw	1
    54  0014  3400               	retlw	0
    55  0015  340A               	retlw	10
    56  0016  3400               	retlw	0
    57  0017  3464               	retlw	100
    58  0018  3400               	retlw	0
    59  0019  34E8               	retlw	232
    60  001A  3403               	retlw	3
    61  001B  3410               	retlw	16
    62  001C  3427               	retlw	39
    63  0006                     _PORTB	set	6
    64  0008                     _PORTD	set	8
    65  001A                     _RCREG	set	26
    66  0018                     _RCSTA	set	24
    67  0010                     _T1CON	set	16
    68  0001                     _TMR0	set	1
    69  000F                     _TMR1H	set	15
    70  000E                     _TMR1L	set	14
    71  0019                     _TXREG	set	25
    72  0030                     _RB0	set	48
    73  0031                     _RB1	set	49
    74  0038                     _RC0	set	56
    75  003B                     _RC3	set	59
    76  003C                     _RC4	set	60
    77  0065                     _RCIF	set	101
    78  005A                     _T0IF	set	90
    79  0060                     _TMR1IF	set	96
    80  0080                     _TMR1ON	set	128
    81  0064                     _TXIF	set	100
    82  009F                     _ADCON1	set	159
    83  0081                     _OPTION_REG	set	129
    84  0099                     _SPBRG	set	153
    85  0085                     _TRISA	set	133
    86  0087                     _TRISC	set	135
    87  0088                     _TRISD	set	136
    88  0089                     _TRISE	set	137
    89  0098                     _TXSTA	set	152
    90  0431                     _TRISB1	set	1073
    91  043E                     _TRISC6	set	1086
    92  043F                     _TRISC7	set	1087
    93  0188                     _ANSEL	set	392
    94  0189                     _ANSELH	set	393
    95  0187                     _BAUDCTL	set	391
    96  001D                     STR_1:	
    97  001D  3449               	retlw	73	;'I'
    98  001E  344E               	retlw	78	;'N'
    99  001F  3449               	retlw	73	;'I'
   100  0020  3443               	retlw	67	;'C'
   101  0021  3449               	retlw	73	;'I'
   102  0022  3441               	retlw	65	;'A'
   103  0023  344E               	retlw	78	;'N'
   104  0024  3444               	retlw	68	;'D'
   105  0025  344F               	retlw	79	;'O'
   106  0026  342E               	retlw	46	;'.'
   107  0027  342E               	retlw	46	;'.'
   108  0028  342E               	retlw	46	;'.'
   109  0029  3400               	retlw	0
   110  002A                     STR_2:	
   111  002A  3453               	retlw	83	;'S'
   112  002B  3449               	retlw	73	;'I'
   113  002C  344E               	retlw	78	;'N'
   114  002D  3420               	retlw	32	;' '
   115  002E  3452               	retlw	82	;'R'
   116  002F  3441               	retlw	65	;'A'
   117  0030  344E               	retlw	78	;'N'
   118  0031  3447               	retlw	71	;'G'
   119  0032  344F               	retlw	79	;'O'
   120  0033  3400               	retlw	0
   121  0034                     STR_5:	
   122  0034  3444               	retlw	68	;'D'
   123  0035  3469               	retlw	105	;'i'
   124  0036  3473               	retlw	115	;'s'
   125  0037  3474               	retlw	116	;'t'
   126  0038  343A               	retlw	58	;':'
   127  0039  3400               	retlw	0
   128  003A                     STR_4:	
   129  003A  3420               	retlw	32	;' '
   130  003B  3425               	retlw	37	;'%'
   131  003C  3464               	retlw	100	;'d'
   132  003D  3420               	retlw	32	;' '
   133  003E  3400               	retlw	0
   134  003F                     STR_3:	
   135  003F  3425               	retlw	37	;'%'
   136  0040  3464               	retlw	100	;'d'
   137  0041  3400               	retlw	0
   138  0042                     STR_6:	
   139  0042  3463               	retlw	99	;'c'
   140  0043  346D               	retlw	109	;'m'
   141  0044  3400               	retlw	0
   142                           
   143                           	psect	cinit
   144  047B                     start_initialization:	
   145                           
   146                           ; Clear objects allocated to BANK0
   147  047B  01B4               	clrf	__pbssBANK0& (0+127)
   148  047C  01B5               	clrf	(__pbssBANK0+1)& (0+127)
   149  047D  01B6               	clrf	(__pbssBANK0+2)& (0+127)
   150  047E  01B7               	clrf	(__pbssBANK0+3)& (0+127)
   151  047F  01B8               	clrf	(__pbssBANK0+4)& (0+127)
   152  0480  01B9               	clrf	(__pbssBANK0+5)& (0+127)
   153  0481  01BA               	clrf	(__pbssBANK0+6)& (0+127)
   154  0482  01BB               	clrf	(__pbssBANK0+7)& (0+127)
   155  0483                     end_of_initialization:	
   156                           ;End of C runtime variable initialization code
   157                           
   158  0483  0183               	clrf	3
   159  0484  120A  118A  2F09   	ljmp	_main	;jump to C main() function
   160                           
   161                           	psect	bssBANK0
   162  0034                     __pbssBANK0:	
   163  0034                     _dato:	
   164  0034                     	ds	2
   165  0036                     _dist:	
   166  0036                     	ds	2
   167  0038                     _carac1:	
   168  0038                     	ds	4
   169                           
   170                           	psect	cstackCOMMON
   171  0070                     __pcstackCOMMON:	
   172  0070                     ?_lcd_init:	
   173  0070                     ?_lcd_goto:	
   174                           ; 0 bytes @ 0x0
   175                           
   176  0070                     ?_lcd_clear:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     ?_pause:	
   180                           ; 0 bytes @ 0x0
   181                           
   182  0070                     ?_msecbase:	
   183                           ; 0 bytes @ 0x0
   184                           
   185  0070                     ??_msecbase:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_isdigit:	
   189                           ; 0 bytes @ 0x0
   190                           
   191  0070                     ??_isdigit:	
   192                           ; 1 bit 
   193                           
   194  0070                     ?_putch:	
   195                           ; 0 bytes @ 0x0
   196                           
   197  0070                     ??_getch:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_init_comms:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ??_init_comms:	
   204                           ; 0 bytes @ 0x0
   205                           
   206  0070                     ?_main:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_lcd_write:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_getch:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?___wmul:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?___lwdiv:	
   219                           ; 2 bytes @ 0x0
   220                           
   221  0070                     putch@byte:	
   222                           ; 2 bytes @ 0x0
   223                           
   224  0070                     _isdigit$2410:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     pause@usvalue:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ___wmul@multiplier:	
   231                           ; 2 bytes @ 0x0
   232                           
   233  0070                     ___lwdiv@divisor:	
   234                           ; 2 bytes @ 0x0
   235                           
   236                           
   237                           ; 2 bytes @ 0x0
   238  0070                     	ds	1
   239  0071                     ??_putch:	
   240  0071                     isdigit@c:	
   241                           ; 0 bytes @ 0x1
   242                           
   243                           
   244                           ; 1 bytes @ 0x1
   245  0071                     	ds	1
   246  0072                     ??_pause:	
   247  0072                     pause@x:	
   248                           ; 0 bytes @ 0x2
   249                           
   250  0072                     ___wmul@multiplicand:	
   251                           ; 2 bytes @ 0x2
   252                           
   253  0072                     ___lwdiv@dividend:	
   254                           ; 2 bytes @ 0x2
   255                           
   256                           
   257                           ; 2 bytes @ 0x2
   258  0072                     	ds	2
   259  0074                     ??_lcd_write:	
   260  0074                     ??___wmul:	
   261                           ; 0 bytes @ 0x4
   262                           
   263  0074                     ??___lwdiv:	
   264                           ; 0 bytes @ 0x4
   265                           
   266  0074                     lcd_write@c:	
   267                           ; 0 bytes @ 0x4
   268                           
   269  0074                     ___wmul@product:	
   270                           ; 1 bytes @ 0x4
   271                           
   272  0074                     ___lwdiv@quotient:	
   273                           ; 2 bytes @ 0x4
   274                           
   275                           
   276                           ; 2 bytes @ 0x4
   277  0074                     	ds	1
   278  0075                     ??_lcd_init:	
   279  0075                     ??_lcd_goto:	
   280                           ; 0 bytes @ 0x5
   281                           
   282  0075                     ?_lcd_puts:	
   283                           ; 0 bytes @ 0x5
   284                           
   285  0075                     ??_lcd_clear:	
   286                           ; 0 bytes @ 0x5
   287                           
   288  0075                     lcd_goto@pos:	
   289                           ; 0 bytes @ 0x5
   290                           
   291  0075                     lcd_puts@s:	
   292                           ; 1 bytes @ 0x5
   293                           
   294                           
   295                           ; 2 bytes @ 0x5
   296  0075                     	ds	1
   297  0076                     ?_atoi:	
   298  0076                     ___lwdiv@counter:	
   299                           ; 2 bytes @ 0x6
   300                           
   301                           
   302                           ; 1 bytes @ 0x6
   303  0076                     	ds	1
   304  0077                     ??_lcd_puts:	
   305  0077                     ?___lwmod:	
   306                           ; 0 bytes @ 0x7
   307                           
   308  0077                     ___lwmod@divisor:	
   309                           ; 2 bytes @ 0x7
   310                           
   311                           
   312                           ; 2 bytes @ 0x7
   313  0077                     	ds	1
   314  0078                     ??_atoi:	
   315                           
   316                           ; 0 bytes @ 0x8
   317  0078                     	ds	1
   318  0079                     ___lwmod@dividend:	
   319                           
   320                           ; 2 bytes @ 0x9
   321  0079                     	ds	1
   322  007A                     atoi@sign:	
   323                           
   324                           ; 1 bytes @ 0xA
   325  007A                     	ds	1
   326  007B                     ??___lwmod:	
   327  007B                     ___lwmod@counter:	
   328                           ; 0 bytes @ 0xB
   329                           
   330  007B                     atoi@a:	
   331                           ; 1 bytes @ 0xB
   332                           
   333                           
   334                           ; 2 bytes @ 0xB
   335  007B                     	ds	1
   336  007C                     ?__doprnt:	
   337  007C                     __doprnt@f:	
   338                           ; 2 bytes @ 0xC
   339                           
   340                           
   341                           ; 1 bytes @ 0xC
   342  007C                     	ds	1
   343  007D                     __doprnt@ap:	
   344  007D                     atoi@s:	
   345                           ; 1 bytes @ 0xD
   346                           
   347                           
   348                           ; 1 bytes @ 0xD
   349  007D                     	ds	1
   350  007E                     ??_sprintf:	
   351  007E                     ??_printf:	
   352                           ; 0 bytes @ 0xE
   353                           
   354                           
   355                           	psect	cstackBANK0
   356  0020                     __pcstackBANK0:	
   357                           ; 0 bytes @ 0xE
   358                           
   359  0020                     ??__doprnt:	
   360                           
   361                           ; 0 bytes @ 0x0
   362  0020                     	ds	2
   363  0022                     __doprnt@flag:	
   364                           
   365                           ; 1 bytes @ 0x2
   366  0022                     	ds	1
   367  0023                     __doprnt@prec:	
   368                           
   369                           ; 1 bytes @ 0x3
   370  0023                     	ds	1
   371  0024                     __doprnt@_val:	
   372                           
   373                           ; 4 bytes @ 0x4
   374  0024                     	ds	4
   375  0028                     __doprnt@c:	
   376                           
   377                           ; 1 bytes @ 0x8
   378  0028                     	ds	1
   379  0029                     __doprnt@pb:	
   380                           
   381                           ; 1 bytes @ 0x9
   382  0029                     	ds	1
   383  002A                     ?_sprintf:	
   384  002A                     ?_printf:	
   385                           ; 2 bytes @ 0xA
   386                           
   387  002A                     sprintf@f:	
   388                           ; 2 bytes @ 0xA
   389                           
   390                           
   391                           ; 1 bytes @ 0xA
   392  002A                     	ds	2
   393  002C                     printf@f:	
   394                           
   395                           ; 1 bytes @ 0xC
   396  002C                     	ds	1
   397  002D                     printf@ap:	
   398  002D                     sprintf@wh:	
   399                           ; 1 bytes @ 0xD
   400                           
   401                           
   402                           ; 1 bytes @ 0xD
   403  002D                     	ds	1
   404  002E                     sprintf@ap:	
   405  002E                     printf@pb:	
   406                           ; 1 bytes @ 0xE
   407                           
   408                           
   409                           ; 2 bytes @ 0xE
   410  002E                     	ds	1
   411  002F                     sprintf@pb:	
   412                           
   413                           ; 2 bytes @ 0xF
   414  002F                     	ds	2
   415  0031                     ??_main:	
   416                           
   417                           ; 0 bytes @ 0x11
   418  0031                     	ds	3
   419                           
   420                           	psect	maintext
   421  0709                     __pmaintext:	
   422 ;;Data sizes: Strings 40, constant 10, data 0, bss 8, persistent 0 stack 0
   423 ;;Auto spaces:   Size  Autos    Used
   424 ;; COMMON          14     14      14
   425 ;; BANK0           80     20      28
   426 ;; BANK1           80      0       0
   427 ;; BANK3           96      0       0
   428 ;; BANK2           96      0       0
   429 ;;
   430 ;; Pointer list with targets:
   431 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   432 ;;
   433 ;; ?___lwmod	unsigned int  size(1) Largest target is 2
   434 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   435 ;;
   436 ;; ?_atoi	int  size(1) Largest target is 0
   437 ;;
   438 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   439 ;;
   440 ;; sprintf@f	PTR const unsigned char  size(1) Largest target is 3
   441 ;;		 -> STR_3(CODE[3]), 
   442 ;;
   443 ;; ?_sprintf	int  size(1) Largest target is 4
   444 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   445 ;;
   446 ;; sprintf@ap	PTR void [1] size(1) Largest target is 2
   447 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   448 ;;
   449 ;; sprintf@wh	PTR unsigned char  size(1) Largest target is 4
   450 ;;		 -> carac1(BANK0[4]), 
   451 ;;
   452 ;; pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   453 ;;		 -> Absolute function(), putch(), 
   454 ;;
   455 ;; pb.ptr	PTR unsigned char  size(1) Largest target is 4
   456 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   457 ;;
   458 ;; printf@f	PTR const unsigned char  size(1) Largest target is 5
   459 ;;		 -> STR_4(CODE[5]), 
   460 ;;
   461 ;; ?_printf	int  size(1) Largest target is 0
   462 ;;
   463 ;; printf@ap	PTR void [1] size(1) Largest target is 2
   464 ;;		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 
   465 ;;
   466 ;; pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   467 ;;		 -> Absolute function(), putch(), 
   468 ;;
   469 ;; pb.ptr	PTR unsigned char  size(1) Largest target is 4
   470 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   471 ;;
   472 ;; atoi@s	PTR const unsigned char  size(1) Largest target is 4
   473 ;;		 -> carac1(BANK0[4]), 
   474 ;;
   475 ;; _doprnt@ap	PTR PTR void  size(1) Largest target is 2
   476 ;;		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 
   477 ;;
   478 ;; _doprnt@f	PTR const unsigned char  size(1) Largest target is 5
   479 ;;		 -> STR_4(CODE[5]), STR_3(CODE[3]), 
   480 ;;
   481 ;; S1857__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   482 ;;		 -> Absolute function(), putch(), 
   483 ;;
   484 ;; _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
   485 ;;		 -> Absolute function(), putch(), 
   486 ;;
   487 ;; S1857__prbuf$ptr	PTR unsigned char  size(1) Largest target is 4
   488 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   489 ;;
   490 ;; _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 4
   491 ;;		 -> NULL(NULL[0]), carac1(BANK0[4]), 
   492 ;;
   493 ;; _doprnt@pb	PTR struct __prbuf size(1) Largest target is 3
   494 ;;		 -> sprintf@pb(BANK0[2]), printf@pb(BANK0[2]), 
   495 ;;
   496 ;; S1876$_cp	PTR const unsigned char  size(1) Largest target is 0
   497 ;;
   498 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   499 ;;
   500 ;; lcd_puts@s	PTR const unsigned char  size(2) Largest target is 13
   501 ;;		 -> STR_6(CODE[3]), STR_5(CODE[6]), carac1(BANK0[4]), STR_2(CODE[10]), 
   502 ;;		 -> STR_1(CODE[13]), 
   503 ;;
   504 ;;
   505 ;; Critical Paths under _main in COMMON
   506 ;;
   507 ;;   _main->_atoi
   508 ;;   _lcd_init->_lcd_write
   509 ;;   _lcd_clear->_lcd_write
   510 ;;   _lcd_puts->_lcd_write
   511 ;;   _lcd_goto->_lcd_write
   512 ;;   _lcd_write->_pause
   513 ;;   _printf->__doprnt
   514 ;;   _sprintf->__doprnt
   515 ;;   __doprnt->___lwmod
   516 ;;   _atoi->___wmul
   517 ;;   ___lwmod->___lwdiv
   518 ;;
   519 ;; Critical Paths under _main in BANK0
   520 ;;
   521 ;;   _main->_sprintf
   522 ;;   _printf->__doprnt
   523 ;;   _sprintf->__doprnt
   524 ;;
   525 ;; Critical Paths under _main in BANK1
   526 ;;
   527 ;;   None.
   528 ;;
   529 ;; Critical Paths under _main in BANK3
   530 ;;
   531 ;;   None.
   532 ;;
   533 ;; Critical Paths under _main in BANK2
   534 ;;
   535 ;;   None.
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   538 ;;
   539 ;;
   540 ;;Call Graph Tables:
   541 ;;
   542 ;; ---------------------------------------------------------------------------------
   543 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   544 ;; ---------------------------------------------------------------------------------
   545 ;; (0) _main                                                 3     3      0    3572
   546 ;;                                             17 BANK0      3     3      0
   547 ;;                           _lcd_init
   548 ;;                         _init_comms
   549 ;;                           _lcd_goto
   550 ;;                           _lcd_puts
   551 ;;                              _getch
   552 ;;                          _lcd_clear
   553 ;;                            ___lwdiv
   554 ;;                            _sprintf
   555 ;;                               _atoi
   556 ;;                             _printf
   557 ;; ---------------------------------------------------------------------------------
   558 ;; (1) _lcd_init                                             1     1      0     295
   559 ;;                                              5 COMMON     1     1      0
   560 ;;                              _pause
   561 ;;                          _lcd_write
   562 ;;                          _lcd_clear
   563 ;; ---------------------------------------------------------------------------------
   564 ;; (1) _lcd_clear                                            0     0      0     136
   565 ;;                          _lcd_write
   566 ;;                              _pause
   567 ;; ---------------------------------------------------------------------------------
   568 ;; (1) _lcd_puts                                             2     0      2     135
   569 ;;                                              5 COMMON     2     0      2
   570 ;;                          _lcd_write
   571 ;; ---------------------------------------------------------------------------------
   572 ;; (1) _lcd_goto                                             1     1      0     112
   573 ;;                                              5 COMMON     1     1      0
   574 ;;                          _lcd_write
   575 ;; ---------------------------------------------------------------------------------
   576 ;; (2) _lcd_write                                            1     1      0      90
   577 ;;                                              4 COMMON     1     1      0
   578 ;;                              _pause
   579 ;; ---------------------------------------------------------------------------------
   580 ;; (1) _printf                                               6     4      2    1144
   581 ;;                                             10 BANK0      6     4      2
   582 ;;                            __doprnt
   583 ;; ---------------------------------------------------------------------------------
   584 ;; (1) _sprintf                                              7     4      3    1200
   585 ;;                                             10 BANK0      7     4      3
   586 ;;                            __doprnt
   587 ;; ---------------------------------------------------------------------------------
   588 ;; (2) __doprnt                                             12    10      2    1035
   589 ;;                                             12 COMMON     2     0      2
   590 ;;                                              0 BANK0     10    10      0
   591 ;;                   Absolute function
   592 ;;                              _putch
   593 ;;                            ___lwdiv
   594 ;;                            ___lwmod
   595 ;; ---------------------------------------------------------------------------------
   596 ;; (2) _pause                                                4     2      2      46
   597 ;;                                              0 COMMON     4     2      2
   598 ;;                           _msecbase
   599 ;; ---------------------------------------------------------------------------------
   600 ;; (1) _atoi                                                 8     6      2     388
   601 ;;                                              6 COMMON     8     6      2
   602 ;;                             ___wmul
   603 ;;                            _isdigit
   604 ;; ---------------------------------------------------------------------------------
   605 ;; (3) ___lwmod                                              5     1      4     159
   606 ;;                                              7 COMMON     5     1      4
   607 ;;                            ___lwdiv (ARG)
   608 ;; ---------------------------------------------------------------------------------
   609 ;; (3) ___lwdiv                                              7     3      4     162
   610 ;;                                              0 COMMON     7     3      4
   611 ;; ---------------------------------------------------------------------------------
   612 ;; (2) ___wmul                                               6     2      4      92
   613 ;;                                              0 COMMON     6     2      4
   614 ;; ---------------------------------------------------------------------------------
   615 ;; (2) _isdigit                                              2     2      0      68
   616 ;;                                              0 COMMON     2     2      0
   617 ;; ---------------------------------------------------------------------------------
   618 ;; (3) Absolute function(Fake)                               1     0      1       0
   619 ;;                                              0 COMMON     1     0      1
   620 ;; ---------------------------------------------------------------------------------
   621 ;; (3) _msecbase                                             0     0      0       0
   622 ;; ---------------------------------------------------------------------------------
   623 ;; (1) _init_comms                                           0     0      0       0
   624 ;; ---------------------------------------------------------------------------------
   625 ;; (1) _getch                                                0     0      0       0
   626 ;; ---------------------------------------------------------------------------------
   627 ;; (3) _putch                                                1     0      1      22
   628 ;;                                              0 COMMON     1     0      1
   629 ;; ---------------------------------------------------------------------------------
   630 ;; Estimated maximum stack depth 3
   631 ;; ---------------------------------------------------------------------------------
   632 ;; Call Graph Graphs:
   633 ;; _main (ROOT)
   634 ;;   _lcd_init
   635 ;;     _pause
   636 ;;       _msecbase
   637 ;;     _lcd_write
   638 ;;       _pause
   639 ;;         _msecbase
   640 ;;     _lcd_clear
   641 ;;       _lcd_write
   642 ;;         _pause
   643 ;;           _msecbase
   644 ;;       _pause
   645 ;;         _msecbase
   646 ;;   _init_comms
   647 ;;   _lcd_goto
   648 ;;     _lcd_write
   649 ;;       _pause
   650 ;;         _msecbase
   651 ;;   _lcd_puts
   652 ;;     _lcd_write
   653 ;;       _pause
   654 ;;         _msecbase
   655 ;;   _getch
   656 ;;   _lcd_clear
   657 ;;     _lcd_write
   658 ;;       _pause
   659 ;;         _msecbase
   660 ;;     _pause
   661 ;;       _msecbase
   662 ;;   ___lwdiv
   663 ;;   _sprintf
   664 ;;     __doprnt
   665 ;;       Absolute function(Fake)
   666 ;;       _putch
   667 ;;       ___lwdiv
   668 ;;       ___lwmod
   669 ;;         ___lwdiv (ARG)
   670 ;;   _atoi
   671 ;;     ___wmul
   672 ;;     _isdigit
   673 ;;   _printf
   674 ;;     __doprnt
   675 ;;       Absolute function(Fake)
   676 ;;       _putch
   677 ;;       ___lwdiv
   678 ;;       ___lwmod
   679 ;;         ___lwdiv (ARG)
   680 ;;
   681 ;; Address spaces:
   682 ;;Name               Size   Autos  Total    Cost      Usage
   683 ;;BITCOMMON            E      0       0       0        0.0%
   684 ;;EEDATA             100      0       0       0        0.0%
   685 ;;NULL                 0      0       0       0        0.0%
   686 ;;CODE                 0      0       0       0        0.0%
   687 ;;COMMON               E      E       E       1      100.0%
   688 ;;BITSFR0              0      0       0       1        0.0%
   689 ;;SFR0                 0      0       0       1        0.0%
   690 ;;BITSFR1              0      0       0       2        0.0%
   691 ;;SFR1                 0      0       0       2        0.0%
   692 ;;STACK                0      0       5       2        0.0%
   693 ;;ABS                  0      0      2A       3        0.0%
   694 ;;BITBANK0            50      0       0       4        0.0%
   695 ;;BITSFR3              0      0       0       4        0.0%
   696 ;;SFR3                 0      0       0       4        0.0%
   697 ;;BANK0               50     14      1C       5       35.0%
   698 ;;BITSFR2              0      0       0       5        0.0%
   699 ;;SFR2                 0      0       0       5        0.0%
   700 ;;BITBANK1            50      0       0       6        0.0%
   701 ;;BANK1               50      0       0       7        0.0%
   702 ;;BITBANK3            60      0       0       8        0.0%
   703 ;;BANK3               60      0       0       9        0.0%
   704 ;;BITBANK2            60      0       0      10        0.0%
   705 ;;BANK2               60      0       0      11        0.0%
   706 ;;DATA                 0      0      2F      12        0.0%
   707                           
   708                           
   709 ;; *************** function _main *****************
   710 ;; Defined at:
   711 ;;		line 66 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;		None               void
   718 ;; Registers used:
   719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 17F/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   725 ;;      Params:         0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0
   727 ;;      Temps:          0       3       0       0       0
   728 ;;      Totals:         0       3       0       0       0
   729 ;;Total ram usage:        3 bytes
   730 ;; Hardware stack levels required when called:    5
   731 ;; This function calls:
   732 ;;		_lcd_init
   733 ;;		_init_comms
   734 ;;		_lcd_goto
   735 ;;		_lcd_puts
   736 ;;		_getch
   737 ;;		_lcd_clear
   738 ;;		___lwdiv
   739 ;;		_sprintf
   740 ;;		_atoi
   741 ;;		_printf
   742 ;; This function is called by:
   743 ;;		Startup code after reset
   744 ;; This function uses a non-reentrant model
   745 ;;
   746  0709                     _main:	
   747                           
   748                           ;SRPROG2.c: 68: ANSEL = 0x00;
   749                           
   750                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   751  0709  1683               	bsf	3,5	;RP0=1, select bank3
   752  070A  1703               	bsf	3,6	;RP1=1, select bank3
   753  070B  0188               	clrf	8	;volatile
   754                           
   755                           ;SRPROG2.c: 69: ANSELH = 0x00;
   756  070C  0189               	clrf	9	;volatile
   757                           
   758                           ;SRPROG2.c: 70: PORTB=0;
   759  070D  1283               	bcf	3,5	;RP0=0, select bank0
   760  070E  1303               	bcf	3,6	;RP1=0, select bank0
   761  070F  0186               	clrf	6	;volatile
   762                           
   763                           ;SRPROG2.c: 71: TRISB1=0;
   764  0710  1683               	bsf	3,5	;RP0=1, select bank1
   765  0711  1086               	bcf	6,1
   766                           
   767                           ;SRPROG2.c: 72: TRISA = 0x00;
   768  0712  0185               	clrf	5	;volatile
   769                           
   770                           ;SRPROG2.c: 73: TRISD = 0x00;
   771  0713  0188               	clrf	8	;volatile
   772                           
   773                           ;SRPROG2.c: 74: TRISC = 0x00;
   774  0714  0187               	clrf	7	;volatile
   775                           
   776                           ;SRPROG2.c: 75: TRISE = 0x00;
   777  0715  0189               	clrf	9	;volatile
   778                           
   779                           ;SRPROG2.c: 76: ADCON1 = 0xFF;
   780  0716  30FF               	movlw	255
   781  0717  009F               	movwf	31	;volatile
   782                           
   783                           ;SRPROG2.c: 77: T1CON = 0x00;
   784  0718  1283               	bcf	3,5	;RP0=0, select bank0
   785  0719  0190               	clrf	16	;volatile
   786                           
   787                           ;SRPROG2.c: 78: TMR1H=0x00;
   788  071A  018F               	clrf	15	;volatile
   789                           
   790                           ;SRPROG2.c: 79: TMR1L=0x00;
   791  071B  018E               	clrf	14	;volatile
   792                           
   793                           ;SRPROG2.c: 81: RB1=0;
   794  071C  1086               	bcf	6,1
   795                           
   796                           ;SRPROG2.c: 82: RB0=0;
   797  071D  1006               	bcf	6,0
   798                           
   799                           ;SRPROG2.c: 84: lcd_init();
   800  071E  120A  118A  2539   	fcall	_lcd_init
      +       120A  118A         
   801                           
   802                           ;SRPROG2.c: 86: init_comms();
   803  0723  120A  118A  2487   	fcall	_init_comms
      +       120A  118A         
   804                           
   805                           ;SRPROG2.c: 88: lcd_goto(0x00);
   806  0728  3000               	movlw	0
   807  0729  120A  118A  2516   	fcall	_lcd_goto
      +       120A  118A         
   808                           
   809                           ;SRPROG2.c: 89: lcd_puts("INICIANDO...");
   810  072E  300B               	movlw	low (STR_1-__stringbase)
   811  072F  00F5               	movwf	?_lcd_puts
   812  0730  3080               	movlw	128
   813  0731  00F6               	movwf	?_lcd_puts+1
   814  0732  120A  118A  251C   	fcall	_lcd_puts
      +       120A  118A         
   815                           
   816                           ;SRPROG2.c: 91: _delay((unsigned long)((1000)*(4000000/4000.0)));
   817  0737  3006               	movlw	6
   818  0738  00B3               	movwf	??_main+2
   819  0739  3013               	movlw	19
   820  073A  00B2               	movwf	??_main+1
   821  073B  30B1               	movlw	177
   822  073C  00B1               	movwf	??_main
   823  073D                     u837:	
   824  073D  0BB1               	decfsz	??_main,f
   825  073E  2F3D               	goto	u837
   826  073F  0BB2               	decfsz	??_main+1,f
   827  0740  2F3D               	goto	u837
   828  0741  0BB3               	decfsz	??_main+2,f
   829  0742  2F3D               	goto	u837
   830  0743  2F44               	nop2
   831  0744                     l3316:	
   832                           
   833                           ;SRPROG2.c: 95: TMR1H=0x00;
   834  0744  1283               	bcf	3,5	;RP0=0, select bank0
   835  0745  1303               	bcf	3,6	;RP1=0, select bank0
   836  0746  018F               	clrf	15	;volatile
   837                           
   838                           ;SRPROG2.c: 96: TMR1L=0x00;
   839  0747  018E               	clrf	14	;volatile
   840                           
   841                           ;SRPROG2.c: 98: dist=0;
   842  0748  01B6               	clrf	_dist
   843  0749  01B7               	clrf	_dist+1
   844                           
   845                           ;SRPROG2.c: 100: getch();
   846  074A  120A  118A  2472   	fcall	_getch
      +       120A  118A         
   847                           
   848                           ;SRPROG2.c: 102: lcd_clear();
   849  074F  120A  118A  25A0   	fcall	_lcd_clear
      +       120A  118A         
   850                           
   851                           ;SRPROG2.c: 104: RB1=0;
   852  0754  1283               	bcf	3,5	;RP0=0, select bank0
   853  0755  1303               	bcf	3,6	;RP1=0, select bank0
   854  0756  1086               	bcf	6,1
   855                           
   856                           ;SRPROG2.c: 106: _delay((unsigned long)((2)*(4000000/4000000.0)));
   857  0757  2F58               	nop2	;2 cycle nop
   858                           
   859                           ;SRPROG2.c: 108: RB1=1;
   860  0758  1283               	bcf	3,5	;RP0=0, select bank0
   861  0759  1303               	bcf	3,6	;RP1=0, select bank0
   862  075A  3003               	movlw	3
   863  075B  1486               	bsf	6,1
   864                           
   865                           ;SRPROG2.c: 110: _delay((unsigned long)((10)*(4000000/4000000.0)));
   866  075C  00B1               	movwf	??_main
   867  075D                     u847:	
   868  075D  0BB1               	decfsz	??_main,f
   869  075E  2F5D               	goto	u847
   870                           
   871                           ;SRPROG2.c: 112: RB1=0;
   872  075F  1283               	bcf	3,5	;RP0=0, select bank0
   873  0760  1303               	bcf	3,6	;RP1=0, select bank0
   874  0761  1086               	bcf	6,1
   875  0762                     l1067:	
   876                           ;SRPROG2.c: 114: while(!RB0);
   877                           
   878  0762  1C06               	btfss	6,0
   879  0763  2F62               	goto	l1067
   880                           
   881                           ;SRPROG2.c: 116: TMR1ON=1;
   882  0764  1410               	bsf	16,0
   883  0765  2F68               	goto	l1070
   884  0766                     l3336:	
   885  0766  180C               	btfsc	12,0
   886  0767  2F6A               	goto	l1074
   887  0768                     l1070:	
   888                           ;SRPROG2.c: 118: while(RB0 && !TMR1IF);
   889                           
   890  0768  1806               	btfsc	6,0
   891  0769  2F66               	goto	l3336
   892  076A                     l1074:	
   893                           
   894                           ;SRPROG2.c: 120: TMR1ON=0;
   895  076A  1010               	bcf	16,0
   896                           
   897                           ;SRPROG2.c: 122: if(!TMR1IF){
   898  076B  180C               	btfsc	12,0
   899  076C  2F73               	goto	l3340
   900                           
   901                           ;SRPROG2.c: 124: dist = (TMR1H<<8 | TMR1L);
   902  076D  080F               	movf	15,w	;volatile
   903  076E  00B7               	movwf	_dist+1
   904  076F  01B6               	clrf	_dist
   905  0770  080E               	movf	14,w	;volatile
   906  0771  04B6               	iorwf	_dist,f
   907                           
   908                           ;SRPROG2.c: 132: }else{
   909  0772  2F76               	goto	l3344
   910  0773                     l3340:	
   911                           
   912                           ;SRPROG2.c: 133: dist=0;
   913  0773  01B6               	clrf	_dist
   914  0774  01B7               	clrf	_dist+1
   915                           
   916                           ;SRPROG2.c: 134: TMR1IF=0;
   917  0775  100C               	bcf	12,0
   918  0776                     l3344:	
   919                           
   920                           ;SRPROG2.c: 135: }
   921                           ;SRPROG2.c: 137: dist = (dist)/58;
   922  0776  303A               	movlw	58
   923  0777  00F0               	movwf	?___lwdiv
   924  0778  01F1               	clrf	?___lwdiv+1
   925  0779  0837               	movf	_dist+1,w
   926  077A  00F3               	movwf	?___lwdiv+3
   927  077B  0836               	movf	_dist,w
   928  077C  00F2               	movwf	?___lwdiv+2
   929  077D  120A  118A  26A5   	fcall	___lwdiv
      +       120A  118A         
   930  0782  0871               	movf	?___lwdiv+1,w
   931  0783  00B7               	movwf	_dist+1
   932  0784  0870               	movf	?___lwdiv,w
   933  0785  00B6               	movwf	_dist
   934                           
   935                           ;SRPROG2.c: 139: if(dist<3 || 350<dist){
   936  0786  3000               	movlw	0
   937  0787  0237               	subwf	_dist+1,w
   938  0788  3003               	movlw	3
   939  0789  1903               	skipnz
   940  078A  0236               	subwf	_dist,w
   941  078B  1C03               	skipc
   942  078C  2F94               	goto	l3350
   943  078D  3001               	movlw	1
   944  078E  0237               	subwf	_dist+1,w
   945  078F  305F               	movlw	95
   946  0790  1903               	skipnz
   947  0791  0236               	subwf	_dist,w
   948  0792  1C03               	skipc
   949  0793  2F9C               	goto	l3354
   950  0794                     l3350:	
   951                           
   952                           ;SRPROG2.c: 140: lcd_goto(0x00);
   953  0794  3000               	movlw	0
   954  0795  120A  118A  2516   	fcall	_lcd_goto
      +       120A  118A         
   955                           
   956                           ;SRPROG2.c: 141: lcd_puts("SIN RANGO");
   957  079A  3018               	movlw	low (STR_2-__stringbase)
   958  079B  2FE9               	goto	L1
   959  079C                     l3354:	
   960                           ;SRPROG2.c: 142: }else if(3<dist || dist<350){
   961                           
   962  079C  3000               	movlw	0
   963  079D  0237               	subwf	_dist+1,w
   964  079E  3004               	movlw	4
   965  079F  1903               	skipnz
   966  07A0  0236               	subwf	_dist,w
   967  07A1  1803               	skipnc
   968  07A2  2FAA               	goto	l3358
   969  07A3  3001               	movlw	1
   970  07A4  0237               	subwf	_dist+1,w
   971  07A5  305E               	movlw	94
   972  07A6  1903               	skipnz
   973  07A7  0236               	subwf	_dist,w
   974  07A8  1803               	skipnc
   975  07A9  2FF1               	goto	l3374
   976  07AA                     l3358:	
   977                           
   978                           ;SRPROG2.c: 143: sprintf(carac1, "%d",dist);
   979  07AA  302D               	movlw	(STR_3-__stringbase)& (0+255)
   980  07AB  00AA               	movwf	?_sprintf
   981  07AC  0837               	movf	_dist+1,w
   982  07AD  00AC               	movwf	?_sprintf+2
   983  07AE  0836               	movf	_dist,w
   984  07AF  00AB               	movwf	?_sprintf+1
   985  07B0  3038               	movlw	_carac1& (0+255)
   986  07B1  120A  118A  25C0   	fcall	_sprintf
      +       120A  118A         
   987                           
   988                           ;SRPROG2.c: 145: dato = atoi(carac1);
   989  07B6  3038               	movlw	_carac1& (0+255)
   990  07B7  120A  118A  2495   	fcall	_atoi
      +       120A  118A         
   991  07BC  0877               	movf	?_atoi+1,w
   992  07BD  00B5               	movwf	_dato+1
   993  07BE  0876               	movf	?_atoi,w
   994  07BF  00B4               	movwf	_dato
   995                           
   996                           ;SRPROG2.c: 146: printf(" %d ",dato);
   997  07C0  0835               	movf	_dato+1,w
   998  07C1  00AB               	movwf	?_printf+1
   999  07C2  0834               	movf	_dato,w
  1000  07C3  00AA               	movwf	?_printf
  1001  07C4  3028               	movlw	(STR_4-__stringbase)& (0+255)
  1002  07C5  120A  118A  25B4   	fcall	_printf
      +       120A  118A         
  1003                           
  1004                           ;SRPROG2.c: 148: lcd_goto(0x00);
  1005  07CA  3000               	movlw	0
  1006  07CB  120A  118A  2516   	fcall	_lcd_goto
      +       120A  118A         
  1007                           
  1008                           ;SRPROG2.c: 149: lcd_puts("Dist:");
  1009  07D0  3022               	movlw	low (STR_5-__stringbase)
  1010  07D1  00F5               	movwf	?_lcd_puts
  1011  07D2  3080               	movlw	128
  1012  07D3  00F6               	movwf	?_lcd_puts+1
  1013  07D4  120A  118A  251C   	fcall	_lcd_puts
      +       120A  118A         
  1014                           
  1015                           ;SRPROG2.c: 150: lcd_puts(carac1);
  1016  07D9  3038               	movlw	_carac1& (0+255)
  1017  07DA  00F5               	movwf	?_lcd_puts
  1018  07DB  3000               	movlw	0
  1019  07DC  00F6               	movwf	?_lcd_puts+1
  1020  07DD  120A  118A  251C   	fcall	_lcd_puts
      +       120A  118A         
  1021                           
  1022                           ;SRPROG2.c: 151: lcd_goto(0x0A);
  1023  07E2  300A               	movlw	10
  1024  07E3  120A  118A  2516   	fcall	_lcd_goto
      +       120A  118A         
  1025                           
  1026                           ;SRPROG2.c: 152: lcd_puts("cm");
  1027  07E8  3030               	movlw	low (STR_6-__stringbase)
  1028  07E9                     L1:	
  1029  07E9  00F5               	movwf	?_lcd_puts
  1030  07EA  3080               	movlw	128
  1031  07EB  00F6               	movwf	?_lcd_puts+1
  1032  07EC  120A  118A  251C   	fcall	_lcd_puts
      +       120A  118A         
  1033  07F1                     l3374:	
  1034                           
  1035                           ;SRPROG2.c: 153: }
  1036                           ;SRPROG2.c: 155: _delay((unsigned long)((200)*(4000000/4000.0)));
  1037  07F1  3002               	movlw	2
  1038  07F2  00B3               	movwf	??_main+2
  1039  07F3  3004               	movlw	4
  1040  07F4  00B2               	movwf	??_main+1
  1041  07F5  30BA               	movlw	186
  1042  07F6  00B1               	movwf	??_main
  1043  07F7                     u857:	
  1044  07F7  0BB1               	decfsz	??_main,f
  1045  07F8  2FF7               	goto	u857
  1046  07F9  0BB2               	decfsz	??_main+1,f
  1047  07FA  2FF7               	goto	u857
  1048  07FB  0BB3               	decfsz	??_main+2,f
  1049  07FC  2FF7               	goto	u857
  1050  07FD  0064               	clrwdt
  1051  07FE  2F44               	goto	l3316
  1052  07FF                     __end_of_main:	
  1053                           
  1054                           	psect	text345
  1055  0516                     __ptext345:	
  1056 ;; =============== function _lcd_puts ends ============
  1057                           
  1058                           
  1059 ;; *************** function _lcd_goto *****************
  1060 ;; Defined at:
  1061 ;;		line 187 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  pos             1    wreg     unsigned char 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  pos             1    5[COMMON] unsigned char 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;		None               void
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0, pclath, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/60
  1072 ;;		On exit  : 60/0
  1073 ;;		Unchanged: FFF9F/0
  1074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1075 ;;      Params:         0       0       0       0       0
  1076 ;;      Locals:         1       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0
  1078 ;;      Totals:         1       0       0       0       0
  1079 ;;Total ram usage:        1 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; Hardware stack levels required when called:    3
  1082 ;; This function calls:
  1083 ;;		_lcd_write
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088  0516                     _lcd_goto:	
  1089                           
  1090                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  1091                           ;lcd_goto@pos stored from wreg
  1092  0516  00F5               	movwf	lcd_goto@pos
  1093  0517  25B1               	call	PL5	;select bank 0
  1094                           
  1095                           ;SRPROG2.c: 188: RC3 = 0;
  1096  0518  1187               	bcf	7,3
  1097                           
  1098                           ;SRPROG2.c: 189: lcd_write(0x80 + pos);
  1099  0519  0875               	movf	lcd_goto@pos,w
  1100  051A  3E80               	addlw	128
  1101  051B  2D80               	ljmp	_lcd_write
  1102  051C                     __end_of_lcd_goto:	
  1103  051C                     __ptext344:	
  1104 ;; =============== function _lcd_clear ends ============
  1105                           
  1106                           
  1107 ;; *************** function _lcd_puts *****************
  1108 ;; Defined at:
  1109 ;;		line 176 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;  s               2    5[COMMON] PTR const unsigned char 
  1112 ;;		 -> STR_6(3), STR_5(6), carac1(4), STR_2(10), 
  1113 ;;		 -> STR_1(13), 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;		None               void
  1118 ;; Registers used:
  1119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 60/0
  1122 ;;		On exit  : 60/0
  1123 ;;		Unchanged: FFE9F/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1125 ;;      Params:         2       0       0       0       0
  1126 ;;      Locals:         0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0
  1128 ;;      Totals:         2       0       0       0       0
  1129 ;;Total ram usage:        2 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    3
  1132 ;; This function calls:
  1133 ;;		_lcd_write
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138  051C                     _lcd_puts:	
  1139                           
  1140                           ;SRPROG2.c: 177: RC3 = 1;
  1141                           
  1142                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1143  051C  1587               	bsf	7,3
  1144  051D                     l3244:	
  1145                           ;SRPROG2.c: 178: while(*s)
  1146                           
  1147  051D  0876               	movf	lcd_puts@s+1,w
  1148  051E  00FF               	movwf	127
  1149  051F  0875               	movf	lcd_puts@s,w
  1150  0520  0084               	movwf	4
  1151  0521  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1152  0526  3800               	iorlw	0
  1153  0527  1903               	btfsc	3,2
  1154  0528  0008               	return
  1155                           
  1156                           ;SRPROG2.c: 179: lcd_write(*s++);
  1157  0529  0876               	movf	lcd_puts@s+1,w
  1158  052A  00FF               	movwf	127
  1159  052B  0875               	movf	lcd_puts@s,w
  1160  052C  0084               	movwf	4
  1161  052D  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1162  0532  2580  120A  118A   	fcall	_lcd_write
  1163  0535  0AF5               	incf	lcd_puts@s,f
  1164  0536  1903               	skipnz
  1165  0537  0AF6               	incf	lcd_puts@s+1,f
  1166  0538  2D1D               	goto	l3244
  1167  0539                     __end_of_lcd_puts:	
  1168  0539                     __ptext342:	
  1169 ;; =============== function _main ends ============
  1170                           
  1171                           
  1172 ;; *************** function _lcd_init *****************
  1173 ;; Defined at:
  1174 ;;		line 192 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  init_value      1    0        unsigned char 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;		None               void
  1181 ;; Registers used:
  1182 ;;		wreg, status,2, status,0, pclath, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 17F/0
  1185 ;;		On exit  : 17F/0
  1186 ;;		Unchanged: FFE80/0
  1187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1188 ;;      Params:         0       0       0       0       0
  1189 ;;      Locals:         1       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0
  1191 ;;      Totals:         1       0       0       0       0
  1192 ;;Total ram usage:        1 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    4
  1195 ;; This function calls:
  1196 ;;		_pause
  1197 ;;		_lcd_write
  1198 ;;		_lcd_clear
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203  0539                     _lcd_init:	
  1204  0539  300F               	movlw	15
  1205                           
  1206                           ;SRPROG2.c: 197: RC3 = 0;
  1207                           
  1208                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1209  053A  1187               	bcf	7,3
  1210                           
  1211                           ;SRPROG2.c: 198: RC0 = 0;
  1212  053B  1007               	bcf	7,0
  1213                           
  1214                           ;SRPROG2.c: 199: RC4 = 0;
  1215  053C  1207               	bcf	7,4
  1216                           
  1217                           ;SRPROG2.c: 201: pause(15);
  1218  053D  00F0               	movwf	?_pause
  1219  053E  01F1               	clrf	?_pause+1
  1220  053F  256F  120A  118A   	fcall	_pause
  1221                           
  1222                           ;SRPROG2.c: 202: PORTD = init_value;
  1223  0542  3003               	movlw	3
  1224  0543  25B1               	call	PL5	;select bank 0
  1225  0544  0088               	movwf	8	;volatile
  1226  0545  300A               	movlw	10
  1227                           
  1228                           ;SRPROG2.c: 203: ((RC0 = 1),(RC0=0));
  1229  0546  1407               	bsf	7,0
  1230  0547  1007               	bcf	7,0
  1231                           
  1232                           ;SRPROG2.c: 204: pause(10);
  1233  0548  00F0               	movwf	?_pause
  1234  0549  01F1               	clrf	?_pause+1
  1235  054A  256F  120A  118A   	fcall	_pause
  1236                           
  1237                           ;SRPROG2.c: 205: ((RC0 = 1),(RC0=0));
  1238                           
  1239                           ;SRPROG2.c: 206: pause(10);
  1240  054D  25A9  120A  118A   	fcall	PL2	;call to abstracted procedure
  1241  0550  256F  120A  118A   	fcall	_pause
  1242                           
  1243                           ;SRPROG2.c: 207: ((RC0 = 1),(RC0=0));
  1244                           
  1245                           ;SRPROG2.c: 208: pause(10);
  1246  0553  25A9  120A  118A   	fcall	PL2	;call to abstracted procedure
  1247  0556  256F  120A  118A   	fcall	_pause
  1248                           
  1249                           ;SRPROG2.c: 209: PORTD= 2;
  1250  0559  3002               	movlw	2
  1251  055A  25B1               	call	PL5	;select bank 0
  1252  055B  0088               	movwf	8	;volatile
  1253  055C  3028               	movlw	40
  1254                           
  1255                           ;SRPROG2.c: 210: ((RC0 = 1),(RC0=0));
  1256  055D  1407               	bsf	7,0
  1257  055E  1007               	bcf	7,0
  1258                           
  1259                           ;SRPROG2.c: 212: lcd_write(0x28);
  1260  055F  2580  120A  118A   	fcall	_lcd_write
  1261                           
  1262                           ;SRPROG2.c: 213: lcd_write(0x0C);
  1263  0562  300C               	movlw	12
  1264  0563  2580  120A  118A   	fcall	_lcd_write
  1265                           
  1266                           ;SRPROG2.c: 214: lcd_write(0x0F);
  1267  0566  300F               	movlw	15
  1268  0567  2580  120A  118A   	fcall	_lcd_write
  1269                           
  1270                           ;SRPROG2.c: 215: lcd_clear();
  1271  056A  25A0  120A  118A   	fcall	_lcd_clear
  1272                           
  1273                           ;SRPROG2.c: 216: lcd_write(0x06);
  1274  056D  3006               	movlw	6
  1275  056E  2D80               	ljmp	_lcd_write
  1276  056F                     __end_of_lcd_init:	
  1277  056F                     __ptext350:	
  1278 ;; =============== function __doprnt ends ============
  1279                           
  1280                           
  1281 ;; *************** function _pause *****************
  1282 ;; Defined at:
  1283 ;;		line 219 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  usvalue         2    0[COMMON] unsigned short 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  x               2    2[COMMON] unsigned short 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;		None               void
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0, pclath, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: FFF9F/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         2       0       0       0       0
  1298 ;;      Locals:         2       0       0       0       0
  1299 ;;      Temps:          0       0       0       0       0
  1300 ;;      Totals:         4       0       0       0       0
  1301 ;;Total ram usage:        4 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    1
  1304 ;; This function calls:
  1305 ;;		_msecbase
  1306 ;; This function is called by:
  1307 ;;		_lcd_write
  1308 ;;		_lcd_clear
  1309 ;;		_lcd_init
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312  056F                     _pause:	
  1313  056F                     l3122:	
  1314                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
  1315                           
  1316                           
  1317                           ;SRPROG2.c: 220: unsigned short x;
  1318                           ;SRPROG2.c: 221: for (x=0; x<=usvalue; x++)
  1319  056F  01F2               	clrf	pause@x
  1320  0570  01F3               	clrf	pause@x+1
  1321  0571                     l3128:	
  1322  0571  0873               	movf	pause@x+1,w
  1323  0572  0271               	subwf	pause@usvalue+1,w
  1324  0573  1D03               	skipz
  1325  0574  2D77               	goto	u635
  1326  0575  0872               	movf	pause@x,w
  1327  0576  0270               	subwf	pause@usvalue,w
  1328  0577                     u635:	
  1329  0577  1C03               	btfss	3,0
  1330  0578  0008               	return
  1331                           
  1332                           ;SRPROG2.c: 222: {
  1333                           ;SRPROG2.c: 223: msecbase();
  1334  0579  2593  120A  118A   	fcall	_msecbase
  1335  057C  0AF2               	incf	pause@x,f
  1336  057D  1903               	skipnz
  1337  057E  0AF3               	incf	pause@x+1,f
  1338  057F  2D71               	goto	l3128
  1339  0580                     __end_of_pause:	
  1340  0580                     __ptext346:	
  1341 ;; =============== function _lcd_goto ends ============
  1342                           
  1343                           
  1344 ;; *************** function _lcd_write *****************
  1345 ;; Defined at:
  1346 ;;		line 162 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  c               1    wreg     unsigned char 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  c               1    4[COMMON] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;		None               void
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0, pclath, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 60/0
  1358 ;;		Unchanged: FFF9F/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         0       0       0       0       0
  1361 ;;      Locals:         1       0       0       0       0
  1362 ;;      Temps:          0       0       0       0       0
  1363 ;;      Totals:         1       0       0       0       0
  1364 ;;Total ram usage:        1 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    2
  1367 ;; This function calls:
  1368 ;;		_pause
  1369 ;; This function is called by:
  1370 ;;		_lcd_clear
  1371 ;;		_lcd_puts
  1372 ;;		_lcd_goto
  1373 ;;		_lcd_init
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376  0580                     _lcd_write:	
  1377                           
  1378                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1379                           ;lcd_write@c stored from wreg
  1380  0580  00F4               	movwf	lcd_write@c
  1381                           
  1382                           ;SRPROG2.c: 163: pause(1);
  1383  0581  01F0               	clrf	?_pause
  1384  0582  0AF0               	incf	?_pause,f
  1385  0583  01F1               	clrf	?_pause+1
  1386  0584  256F  120A  118A   	fcall	_pause
  1387                           
  1388                           ;SRPROG2.c: 164: PORTD = ( ( c >> 4) & 0x0F);
  1389  0587  0E74               	swapf	lcd_write@c,w
  1390  0588  390F               	andlw	15
  1391  0589  25B1               	call	PL5	;select bank 0
  1392  058A  0088               	movwf	8	;volatile
  1393                           
  1394                           ;SRPROG2.c: 165: ((RC0 = 1),(RC0=0));
  1395  058B  1407               	bsf	7,0
  1396  058C  1007               	bcf	7,0
  1397                           
  1398                           ;SRPROG2.c: 166: PORTD = (c & 0x0F);
  1399  058D  0874               	movf	lcd_write@c,w
  1400  058E  390F               	andlw	15
  1401  058F  0088               	movwf	8	;volatile
  1402                           
  1403                           ;SRPROG2.c: 167: ((RC0 = 1),(RC0=0));
  1404  0590  1407               	bsf	7,0
  1405  0591  1007               	bcf	7,0
  1406  0592  0008               	return
  1407  0593                     __end_of_lcd_write:	
  1408  0593                     __ptext356:	
  1409 ;; =============== function _isdigit ends ============
  1410                           
  1411                           
  1412 ;; *************** function _msecbase *****************
  1413 ;; Defined at:
  1414 ;;		line 227 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;		None
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;		None
  1419 ;; Return value:  Size  Location     Type
  1420 ;;		None               void
  1421 ;; Registers used:
  1422 ;;		wreg
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: FFF9F/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1428 ;;      Params:         0       0       0       0       0
  1429 ;;      Locals:         0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0
  1431 ;;      Totals:         0       0       0       0       0
  1432 ;;Total ram usage:        0 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_pause
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440  0593                     _msecbase:	
  1441                           
  1442                           ;SRPROG2.c: 228: OPTION_REG = 0b11010010;
  1443                           
  1444                           ; Regs used in _msecbase: [wreg]
  1445  0593  30D2               	movlw	210
  1446  0594  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0595  1303               	bcf	3,6	;RP1=0, select bank1
  1448  0596  0081               	movwf	1	;volatile
  1449                           
  1450                           ;SRPROG2.c: 229: TMR0 = 0x0E;
  1451  0597  300E               	movlw	14
  1452  0598  1283               	bcf	3,5	;RP0=0, select bank0
  1453  0599  0081               	movwf	1	;volatile
  1454                           
  1455                           ;SRPROG2.c: 230: TMR0 = 0x8E;
  1456  059A  308E               	movlw	142
  1457  059B  0081               	movwf	1	;volatile
  1458  059C                     l1116:	
  1459                           ;SRPROG2.c: 231: while(!T0IF);
  1460                           
  1461  059C  1D0B               	btfss	11,2
  1462  059D  2D9C               	goto	l1116
  1463                           
  1464                           ;SRPROG2.c: 232: T0IF = 0;
  1465  059E  110B               	bcf	11,2
  1466  059F  0008               	return
  1467  05A0                     __end_of_msecbase:	
  1468  05A0                     __ptext343:	
  1469 ;; =============== function _lcd_init ends ============
  1470                           
  1471                           
  1472 ;; *************** function _lcd_clear *****************
  1473 ;; Defined at:
  1474 ;;		line 170 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;		None               void
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0, pclath, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 60/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: FFF9F/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1488 ;;      Params:         0       0       0       0       0
  1489 ;;      Locals:         0       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0
  1491 ;;      Totals:         0       0       0       0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    3
  1495 ;; This function calls:
  1496 ;;		_lcd_write
  1497 ;;		_pause
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;;		_lcd_init
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503  05A0                     _lcd_clear:	
  1504  05A0  3001               	movlw	1
  1505                           
  1506                           ;SRPROG2.c: 171: RC3 = 0;
  1507                           
  1508                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1509  05A1  1187               	bcf	7,3
  1510                           
  1511                           ;SRPROG2.c: 172: lcd_write(0x01);
  1512  05A2  2580  120A  118A   	fcall	_lcd_write
  1513                           
  1514                           ;SRPROG2.c: 173: pause (2);
  1515  05A5  3002               	movlw	2
  1516  05A6  00F0               	movwf	?_pause
  1517  05A7  01F1               	clrf	?_pause+1
  1518  05A8  2D6F               	ljmp	l3122
  1519  05A9                     __end_of_lcd_clear:	
  1520  05A9                     PL2:	
  1521  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  1522  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  1523  05AB  300A               	movlw	10
  1524  05AC  1407               	bsf	7,0
  1525  05AD  1007               	bcf	7,0
  1526  05AE  00F0               	movwf	?_pause
  1527  05AF  01F1               	clrf	?_pause+1
  1528  05B0  0008               	return
  1529  05B1                     PL5:	
  1530  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1531  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1532  05B3  0008               	return
  1533                           
  1534                           	psect	text347
  1535  05B4                     __ptext347:	
  1536 ;; =============== function _lcd_write ends ============
  1537                           
  1538                           
  1539 ;; *************** function _printf *****************
  1540 ;; Defined at:
  1541 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\printf.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  f               1    wreg     PTR const unsigned char 
  1544 ;;		 -> STR_4(5), 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1547 ;;		 -> STR_4(5), 
  1548 ;;  pb              2   14[BANK0 ] struct __prbuf
  1549 ;;  ap              1   13[BANK0 ] PTR void [1]
  1550 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  2   10[BANK0 ] int 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 160/0
  1557 ;;		On exit  : 60/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1560 ;;      Params:         0       2       0       0       0
  1561 ;;      Locals:         0       4       0       0       0
  1562 ;;      Temps:          0       0       0       0       0
  1563 ;;      Totals:         0       6       0       0       0
  1564 ;;Total ram usage:        6 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    2
  1567 ;; This function calls:
  1568 ;;		__doprnt
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573  05B4                     _printf:	
  1574                           
  1575                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1576                           ;printf@f stored from wreg
  1577  05B4  00AC               	movwf	printf@f
  1578  05B5  3001               	movlw	(fp__putch-fpbase)& (0+255)
  1579  05B6  01AE               	clrf	printf@pb
  1580  05B7  00AF               	movwf	printf@pb+1
  1581  05B8  302A               	movlw	?_printf& (0+255)
  1582  05B9  00AD               	movwf	printf@ap
  1583                           
  1584                           ;	Return value of _printf is never used
  1585  05BA  082C               	movf	printf@f,w
  1586  05BB  00FC               	movwf	?__doprnt
  1587  05BC  302D               	movlw	printf@ap& (0+255)
  1588  05BD  00FD               	movwf	?__doprnt+1
  1589  05BE  302E               	movlw	printf@pb& (0+255)
  1590  05BF  2DD0               	ljmp	__doprnt
  1591  05C0                     __end_of_printf:	
  1592  05C0                     __ptext348:	
  1593 ;; =============== function _printf ends ============
  1594                           
  1595                           
  1596 ;; *************** function _sprintf *****************
  1597 ;; Defined at:
  1598 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\sprintf.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  wh              1    wreg     PTR unsigned char 
  1601 ;;		 -> carac1(4), 
  1602 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  1603 ;;		 -> STR_3(3), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  wh              1   13[BANK0 ] PTR unsigned char 
  1606 ;;		 -> carac1(4), 
  1607 ;;  pb              2   15[BANK0 ] struct __prbuf
  1608 ;;  ap              1   14[BANK0 ] PTR void [1]
  1609 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  2   10[BANK0 ] int 
  1612 ;; Registers used:
  1613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 60/0
  1616 ;;		On exit  : 160/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1619 ;;      Params:         0       3       0       0       0
  1620 ;;      Locals:         0       4       0       0       0
  1621 ;;      Temps:          0       0       0       0       0
  1622 ;;      Totals:         0       7       0       0       0
  1623 ;;Total ram usage:        7 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:    2
  1626 ;; This function calls:
  1627 ;;		__doprnt
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632  05C0                     _sprintf:	
  1633                           
  1634                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1635                           ;sprintf@wh stored from wreg
  1636  05C0  00AD               	movwf	sprintf@wh
  1637  05C1  00AF               	movwf	sprintf@pb
  1638  05C2  302B               	movlw	(?_sprintf+1)& (0+255)
  1639  05C3  01B0               	clrf	sprintf@pb+1
  1640  05C4  00AE               	movwf	sprintf@ap
  1641  05C5  082A               	movf	sprintf@f,w
  1642  05C6  00FC               	movwf	?__doprnt
  1643  05C7  302E               	movlw	sprintf@ap& (0+255)
  1644  05C8  00FD               	movwf	?__doprnt+1
  1645  05C9  302F               	movlw	sprintf@pb& (0+255)
  1646  05CA  25D0               	fcall	__doprnt
  1647  05CB  082F               	movf	sprintf@pb,w
  1648  05CC  0084               	movwf	4
  1649  05CD  1383               	bcf	3,7	;select IRP bank0
  1650  05CE  0180               	clrf	0
  1651  05CF  0008               	return
  1652  05D0                     __end_of_sprintf:	
  1653  05D0                     __ptext349:	
  1654 ;; =============== function _sprintf ends ============
  1655                           
  1656                           
  1657 ;; *************** function __doprnt *****************
  1658 ;; Defined at:
  1659 ;;		line 455 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  pb              1    wreg     PTR struct __prbuf
  1662 ;;		 -> sprintf@pb(2), printf@pb(2), 
  1663 ;;  f               1   12[COMMON] PTR const unsigned char 
  1664 ;;		 -> STR_4(5), STR_3(3), 
  1665 ;;  ap              1   13[COMMON] PTR PTR void 
  1666 ;;		 -> sprintf@ap(1), printf@ap(1), 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  pb              1    9[BANK0 ] PTR struct __prbuf
  1669 ;;		 -> sprintf@pb(2), printf@pb(2), 
  1670 ;;  _val            4    4[BANK0 ] struct .
  1671 ;;  c               1    8[BANK0 ] char 
  1672 ;;  prec            1    3[BANK0 ] char 
  1673 ;;  flag            1    2[BANK0 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2   12[COMMON] int 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 60/0
  1680 ;;		On exit  : 60/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1683 ;;      Params:         2       0       0       0       0
  1684 ;;      Locals:         0       8       0       0       0
  1685 ;;      Temps:          0       2       0       0       0
  1686 ;;      Totals:         2      10       0       0       0
  1687 ;;Total ram usage:       12 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    1
  1690 ;; This function calls:
  1691 ;;		Absolute function
  1692 ;;		_putch
  1693 ;;		___lwdiv
  1694 ;;		___lwmod
  1695 ;; This function is called by:
  1696 ;;		_printf
  1697 ;;		_sprintf
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700  05D0                     __doprnt:	
  1701                           
  1702                           ; Regs used in __doprnt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1703                           ;__doprnt@pb stored from wreg
  1704  05D0  00A9               	movwf	__doprnt@pb
  1705  05D1                     l3192:	
  1706  05D1  087C               	movf	__doprnt@f,w
  1707  05D2  0AFC               	incf	__doprnt@f,f
  1708  05D3  0084               	movwf	4
  1709  05D4  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1710  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  1711  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  1712  05DB  00A8               	movwf	__doprnt@c
  1713  05DC  08A8               	movf	__doprnt@c,f
  1714  05DD  1903               	btfsc	3,2
  1715  05DE  2EA2               	goto	l3194
  1716  05DF  0828               	movf	__doprnt@c,w
  1717  05E0  3A25               	xorlw	37
  1718  05E1  1903               	skipnz
  1719  05E2  2DF9               	goto	l3142
  1720  05E3  0829               	movf	__doprnt@pb,w
  1721  05E4  3E01               	addlw	1
  1722  05E5  0084               	movwf	4
  1723  05E6  1383               	bcf	3,7	;select IRP bank0
  1724  05E7  0880               	movf	0,f
  1725  05E8  1903               	skipnz
  1726  05E9  2DF2               	goto	l3138
  1727  05EA  0828               	movf	__doprnt@c,w
  1728  05EB  26FA               	fcall	PL4	;call to abstracted procedure
  1729  05EC  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1730  05F1  2DD1               	goto	l3192
  1731  05F2                     l3138:	
  1732  05F2  0829               	movf	__doprnt@pb,w
  1733  05F3  0084               	movwf	4
  1734  05F4  0800               	movf	0,w
  1735  05F5  26F3  120A  118A   	fcall	PL3	;call to abstracted procedure
  1736  05F8  2DD1               	goto	l3192
  1737  05F9                     l3142:	
  1738  05F9  01A2               	clrf	__doprnt@flag
  1739  05FA  087C               	movf	__doprnt@f,w
  1740  05FB  0AFC               	incf	__doprnt@f,f
  1741  05FC  0084               	movwf	4
  1742  05FD  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1743  0602  00A8               	movwf	__doprnt@c
  1744                           
  1745                           ; Switch size 1, requested type "space"
  1746                           ; Number of cases is 3, Range of values is 0 to 105
  1747                           ; switch strategies available:
  1748                           ; Name         Instructions Cycles
  1749                           ; simple_byte           10     6 (average)
  1750                           ; jumptable            260     6 (fixed)
  1751                           ; rangetable           110     6 (fixed)
  1752                           ; spacedrange          218     9 (fixed)
  1753                           ; locatedrange         106     3 (fixed)
  1754                           ;	Chosen strategy is simple_byte
  1755  0603  3A00               	xorlw	0	; case 0
  1756  0604  1903               	skipnz
  1757  0605  2EA2               	goto	l3194
  1758  0606  3A64               	xorlw	100	; case 100
  1759  0607  1903               	skipnz
  1760  0608  2E0D               	goto	l3148
  1761  0609  3A0D               	xorlw	13	; case 105
  1762  060A  1903               	skipnz
  1763  060B  2E0D               	goto	l3148
  1764  060C  2DD1               	goto	l3192
  1765  060D                     l3148:	
  1766  060D  087D               	movf	__doprnt@ap,w
  1767  060E  0084               	movwf	4
  1768  060F  1383               	bcf	3,7	;select IRP bank0
  1769  0610  0800               	movf	0,w
  1770  0611  00A0               	movwf	??__doprnt
  1771  0612  3002               	movlw	2
  1772  0613  0780               	addwf	0,f
  1773  0614  0820               	movf	??__doprnt,w
  1774  0615  0084               	movwf	4
  1775  0616  0800               	movf	0,w
  1776  0617  00A4               	movwf	__doprnt@_val
  1777  0618  0A84               	incf	4,f
  1778  0619  0800               	movf	0,w
  1779  061A  00A5               	movwf	__doprnt@_val+1
  1780  061B  1FA5               	btfss	__doprnt@_val+1,7
  1781  061C  2E24               	goto	l3156
  1782  061D  3003               	movlw	3
  1783  061E  04A2               	iorwf	__doprnt@flag,f
  1784  061F  09A4               	comf	__doprnt@_val,f
  1785  0620  09A5               	comf	__doprnt@_val+1,f
  1786  0621  0AA4               	incf	__doprnt@_val,f
  1787  0622  1903               	skipnz
  1788  0623  0AA5               	incf	__doprnt@_val+1,f
  1789  0624                     l3156:	
  1790  0624  01A8               	clrf	__doprnt@c
  1791  0625  0AA8               	incf	__doprnt@c,f
  1792  0626                     l3160:	
  1793  0626  1003               	clrc
  1794  0627  0D28               	rlf	__doprnt@c,w
  1795  0628  3E01               	addlw	low (_dpowers-__stringbase)
  1796  0629  0084               	movwf	4
  1797  062A  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1798  062F  00A0               	movwf	??__doprnt
  1799  0630  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1800  0635  00A1               	movwf	??__doprnt+1
  1801  0636  0225               	subwf	__doprnt@_val+1,w
  1802  0637  1D03               	skipz
  1803  0638  2E3B               	goto	u675
  1804  0639  0820               	movf	??__doprnt,w
  1805  063A  0224               	subwf	__doprnt@_val,w
  1806  063B                     u675:	
  1807  063B  1C03               	btfss	3,0
  1808  063C  2E42               	goto	l3168
  1809  063D  0AA8               	incf	__doprnt@c,f
  1810  063E  0828               	movf	__doprnt@c,w
  1811  063F  3A05               	xorlw	5
  1812  0640  1D03               	skipz
  1813  0641  2E26               	goto	l3160
  1814  0642                     l3168:	
  1815  0642  0822               	movf	__doprnt@flag,w
  1816  0643  3903               	andlw	3
  1817  0644  1903               	btfsc	3,2
  1818  0645  2E5E               	goto	l3178
  1819  0646  0829               	movf	__doprnt@pb,w
  1820  0647  3E01               	addlw	1
  1821  0648  0084               	movwf	4
  1822  0649  1383               	bcf	3,7	;select IRP bank0
  1823  064A  0880               	movf	0,f
  1824  064B  1903               	skipnz
  1825  064C  2E55               	goto	l3174
  1826  064D  302D               	movlw	45
  1827  064E  26FA               	fcall	PL4	;call to abstracted procedure
  1828  064F  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1829  0654  2E5E               	goto	l3178
  1830  0655                     l3174:	
  1831  0655  0829               	movf	__doprnt@pb,w
  1832  0656  0084               	movwf	4
  1833  0657  0800               	movf	0,w
  1834  0658  0084               	movwf	4
  1835  0659  302D               	movlw	45
  1836  065A  0080               	movwf	0
  1837  065B  0829               	movf	__doprnt@pb,w
  1838  065C  0084               	movwf	4
  1839  065D  0A80               	incf	0,f
  1840  065E                     l3178:	
  1841  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1842  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1843  0660  0828               	movf	__doprnt@c,w
  1844  0661  00A3               	movwf	__doprnt@prec
  1845  0662  2E9C               	goto	l3190
  1846  0663                     l3180:	
  1847  0663  300A               	movlw	10
  1848  0664  00F7               	movwf	?___lwmod
  1849  0665  01F8               	clrf	?___lwmod+1
  1850  0666  1003               	clrc
  1851  0667  0D23               	rlf	__doprnt@prec,w
  1852  0668  3E01               	addlw	low (_dpowers-__stringbase)
  1853  0669  0084               	movwf	4
  1854  066A  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1855  066F  00F0               	movwf	?___lwdiv
  1856  0670  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1857  0675  00F1               	movwf	?___lwdiv+1
  1858  0676  0825               	movf	__doprnt@_val+1,w
  1859  0677  00F3               	movwf	?___lwdiv+3
  1860  0678  0824               	movf	__doprnt@_val,w
  1861  0679  00F2               	movwf	?___lwdiv+2
  1862  067A  26A5  120A  118A   	fcall	___lwdiv
  1863  067D  0871               	movf	?___lwdiv+1,w
  1864  067E  00FA               	movwf	?___lwmod+3
  1865  067F  0870               	movf	?___lwdiv,w
  1866  0680  00F9               	movwf	?___lwmod+2
  1867  0681  26CF  120A  118A   	fcall	___lwmod
  1868  0684  0877               	movf	?___lwmod,w
  1869  0685  3E30               	addlw	48
  1870  0686  00A8               	movwf	__doprnt@c
  1871  0687  0829               	movf	__doprnt@pb,w
  1872  0688  3E01               	addlw	1
  1873  0689  0084               	movwf	4
  1874  068A  1383               	bcf	3,7	;select IRP bank0
  1875  068B  0880               	movf	0,f
  1876  068C  1903               	skipnz
  1877  068D  2E96               	goto	l3186
  1878  068E  0828               	movf	__doprnt@c,w
  1879  068F  26FA               	fcall	PL4	;call to abstracted procedure
  1880  0690  120A  118A  2700   	fcall	fptable
      +       120A  118A         
  1881  0695  2E9C               	goto	l3190
  1882  0696                     l3186:	
  1883  0696  0829               	movf	__doprnt@pb,w
  1884  0697  0084               	movwf	4
  1885  0698  0800               	movf	0,w
  1886  0699  26F3  120A  118A   	fcall	PL3	;call to abstracted procedure
  1887  069C                     l3190:	
  1888  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1889  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1890  069E  03A3               	decf	__doprnt@prec,f
  1891  069F  0F23               	incfsz	__doprnt@prec,w
  1892  06A0  2E63               	goto	l3180
  1893  06A1  2DD1               	goto	l3192
  1894  06A2                     l3194:	
  1895  06A2  01FC               	clrf	?__doprnt
  1896  06A3  01FD               	clrf	?__doprnt+1
  1897  06A4  0008               	return
  1898  06A5                     __end_of__doprnt:	
  1899  06A5                     __ptext353:	
  1900 ;; =============== function ___lwmod ends ============
  1901                           
  1902                           
  1903 ;; *************** function ___lwdiv *****************
  1904 ;; Defined at:
  1905 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwdiv.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  divisor         2    0[COMMON] unsigned int 
  1908 ;;  dividend        2    2[COMMON] unsigned int 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  quotient        2    4[COMMON] unsigned int 
  1911 ;;  counter         1    6[COMMON] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  2    0[COMMON] unsigned int 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0
  1916 ;; Tracked objects:
  1917 ;;		On entry : 60/0
  1918 ;;		On exit  : 60/0
  1919 ;;		Unchanged: FFF9F/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         4       0       0       0       0
  1922 ;;      Locals:         3       0       0       0       0
  1923 ;;      Temps:          0       0       0       0       0
  1924 ;;      Totals:         7       0       0       0       0
  1925 ;;Total ram usage:        7 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;;		__doprnt
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934  06A5                     ___lwdiv:	
  1935                           
  1936                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1937  06A5  01F4               	clrf	___lwdiv@quotient
  1938  06A6  01F5               	clrf	___lwdiv@quotient+1
  1939  06A7  0871               	movf	___lwdiv@divisor+1,w
  1940  06A8  0470               	iorwf	___lwdiv@divisor,w
  1941  06A9  1903               	skipnz
  1942  06AA  2ECA               	goto	l3064
  1943  06AB  01F6               	clrf	___lwdiv@counter
  1944  06AC                     L4:	
  1945  06AC  0AF6               	incf	___lwdiv@counter,f
  1946  06AD  1BF1               	btfsc	___lwdiv@divisor+1,7
  1947  06AE  2EB3               	goto	l3052
  1948  06AF  1003               	clrc
  1949  06B0  0DF0               	rlf	___lwdiv@divisor,f
  1950  06B1  0DF1               	rlf	___lwdiv@divisor+1,f
  1951  06B2  2EAC               	goto	L4
  1952  06B3                     l3052:	
  1953  06B3  1003               	clrc
  1954  06B4  0DF4               	rlf	___lwdiv@quotient,f
  1955  06B5  0DF5               	rlf	___lwdiv@quotient+1,f
  1956  06B6  0871               	movf	___lwdiv@divisor+1,w
  1957  06B7  0273               	subwf	___lwdiv@dividend+1,w
  1958  06B8  1D03               	skipz
  1959  06B9  2EBC               	goto	u515
  1960  06BA  0870               	movf	___lwdiv@divisor,w
  1961  06BB  0272               	subwf	___lwdiv@dividend,w
  1962  06BC                     u515:	
  1963  06BC  1C03               	skipc
  1964  06BD  2EC6               	goto	L5
  1965  06BE  0870               	movf	___lwdiv@divisor,w
  1966  06BF  02F2               	subwf	___lwdiv@dividend,f
  1967  06C0  0871               	movf	___lwdiv@divisor+1,w
  1968  06C1  1C03               	skipc
  1969  06C2  03F3               	decf	___lwdiv@dividend+1,f
  1970  06C3  02F3               	subwf	___lwdiv@dividend+1,f
  1971  06C4  1474               	bsf	___lwdiv@quotient,0
  1972  06C5  1003               	clrc
  1973  06C6                     L5:	
  1974  06C6  0CF1               	rrf	___lwdiv@divisor+1,f
  1975  06C7  0CF0               	rrf	___lwdiv@divisor,f
  1976  06C8  0BF6               	decfsz	___lwdiv@counter,f
  1977  06C9  2EB3               	goto	l3052
  1978  06CA                     l3064:	
  1979  06CA  0875               	movf	___lwdiv@quotient+1,w
  1980  06CB  00F1               	movwf	?___lwdiv+1
  1981  06CC  0874               	movf	___lwdiv@quotient,w
  1982  06CD  00F0               	movwf	?___lwdiv
  1983  06CE  0008               	return
  1984  06CF                     __end_of___lwdiv:	
  1985  06CF                     __ptext352:	
  1986 ;; =============== function _atoi ends ============
  1987                           
  1988                           
  1989 ;; *************** function ___lwmod *****************
  1990 ;; Defined at:
  1991 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwmod.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  divisor         2    7[COMMON] unsigned int 
  1994 ;;  dividend        2    9[COMMON] unsigned int 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  counter         1   11[COMMON] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  2    7[COMMON] unsigned int 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 60/0
  2003 ;;		On exit  : 60/0
  2004 ;;		Unchanged: FFF9F/0
  2005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2006 ;;      Params:         4       0       0       0       0
  2007 ;;      Locals:         1       0       0       0       0
  2008 ;;      Temps:          0       0       0       0       0
  2009 ;;      Totals:         5       0       0       0       0
  2010 ;;Total ram usage:        5 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		__doprnt
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018  06CF                     ___lwmod:	
  2019                           
  2020                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2021  06CF  0878               	movf	___lwmod@divisor+1,w
  2022  06D0  0477               	iorwf	___lwmod@divisor,w
  2023  06D1  1903               	skipnz
  2024  06D2  2EEE               	goto	l3084
  2025  06D3  01FB               	clrf	___lwmod@counter
  2026  06D4                     L2:	
  2027  06D4  0AFB               	incf	___lwmod@counter,f
  2028  06D5  1BF8               	btfsc	___lwmod@divisor+1,7
  2029  06D6  2EDB               	goto	l3076
  2030  06D7  1003               	clrc
  2031  06D8  0DF7               	rlf	___lwmod@divisor,f
  2032  06D9  0DF8               	rlf	___lwmod@divisor+1,f
  2033  06DA  2ED4               	goto	L2
  2034  06DB                     l3076:	
  2035  06DB  0878               	movf	___lwmod@divisor+1,w
  2036  06DC  027A               	subwf	___lwmod@dividend+1,w
  2037  06DD  1D03               	skipz
  2038  06DE  2EE1               	goto	u555
  2039  06DF  0877               	movf	___lwmod@divisor,w
  2040  06E0  0279               	subwf	___lwmod@dividend,w
  2041  06E1                     u555:	
  2042  06E1  1C03               	skipc
  2043  06E2  2EEA               	goto	L3
  2044  06E3  0877               	movf	___lwmod@divisor,w
  2045  06E4  02F9               	subwf	___lwmod@dividend,f
  2046  06E5  0878               	movf	___lwmod@divisor+1,w
  2047  06E6  1C03               	skipc
  2048  06E7  03FA               	decf	___lwmod@dividend+1,f
  2049  06E8  02FA               	subwf	___lwmod@dividend+1,f
  2050  06E9  1003               	clrc
  2051  06EA                     L3:	
  2052  06EA  0CF8               	rrf	___lwmod@divisor+1,f
  2053  06EB  0CF7               	rrf	___lwmod@divisor,f
  2054  06EC  0BFB               	decfsz	___lwmod@counter,f
  2055  06ED  2EDB               	goto	l3076
  2056  06EE                     l3084:	
  2057  06EE  087A               	movf	___lwmod@dividend+1,w
  2058  06EF  00F8               	movwf	?___lwmod+1
  2059  06F0  0879               	movf	___lwmod@dividend,w
  2060  06F1  00F7               	movwf	?___lwmod
  2061  06F2  0008               	return
  2062  06F3                     __end_of___lwmod:	
  2063  06F3                     PL3:	
  2064  06F3  0084               	movwf	4
  2065  06F4  0828               	movf	__doprnt@c,w
  2066  06F5  0080               	movwf	0
  2067  06F6  0829               	movf	__doprnt@pb,w
  2068  06F7  0084               	movwf	4
  2069  06F8  0A80               	incf	0,f
  2070  06F9  0008               	return
  2071  06FA                     PL4:	
  2072  06FA  00F0               	movwf	?_putch
  2073  06FB  0829               	movf	__doprnt@pb,w
  2074  06FC  3E01               	addlw	1
  2075  06FD  0084               	movwf	4
  2076  06FE  0800               	movf	0,w
  2077  06FF  0008               	return
  2078                           
  2079                           	psect	text351
  2080  0495                     __ptext351:	
  2081 ;; =============== function _pause ends ============
  2082                           
  2083                           
  2084 ;; *************** function _atoi *****************
  2085 ;; Defined at:
  2086 ;;		line 6 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\atoi.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  s               1    wreg     PTR const unsigned char 
  2089 ;;		 -> carac1(4), 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;  s               1   13[COMMON] PTR const unsigned char 
  2092 ;;		 -> carac1(4), 
  2093 ;;  a               2   11[COMMON] int 
  2094 ;;  sign            1   10[COMMON] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  2    6[COMMON] int 
  2097 ;; Registers used:
  2098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 160/0
  2101 ;;		On exit  : 160/0
  2102 ;;		Unchanged: FFE9F/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2104 ;;      Params:         2       0       0       0       0
  2105 ;;      Locals:         4       0       0       0       0
  2106 ;;      Temps:          2       0       0       0       0
  2107 ;;      Totals:         8       0       0       0       0
  2108 ;;Total ram usage:        8 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    1
  2111 ;; This function calls:
  2112 ;;		___wmul
  2113 ;;		_isdigit
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118  0495                     _atoi:	
  2119                           
  2120                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2121                           ;atoi@s stored from wreg
  2122  0495  00FD               	movwf	atoi@s
  2123  0496                     l3092:	
  2124  0496  087D               	movf	atoi@s,w
  2125  0497  0084               	movwf	4
  2126  0498  0800               	movf	0,w
  2127  0499  3A20               	xorlw	32
  2128  049A  1D03               	btfss	3,2
  2129  049B  2C9E               	goto	l3094
  2130  049C                     l3090:	
  2131  049C  0AFD               	incf	atoi@s,f
  2132  049D  2C96               	goto	l3092
  2133  049E                     l3094:	
  2134  049E  087D               	movf	atoi@s,w
  2135  049F  0084               	movwf	4
  2136  04A0  0800               	movf	0,w
  2137  04A1  3A09               	xorlw	9
  2138  04A2  1903               	skipnz
  2139  04A3  2C9C               	goto	l3090
  2140  04A4  01FB               	clrf	atoi@a
  2141  04A5  01FC               	clrf	atoi@a+1
  2142  04A6  01FA               	clrf	atoi@sign
  2143  04A7  087D               	movf	atoi@s,w
  2144  04A8  0084               	movwf	4
  2145  04A9  0800               	movf	0,w
  2146  04AA  3A2D               	xorlw	45
  2147  04AB  1D03               	skipz
  2148  04AC  2CAF               	goto	l3102
  2149  04AD  0AFA               	incf	atoi@sign,f
  2150  04AE  2CD9               	goto	l3104
  2151  04AF                     l3102:	
  2152  04AF  087D               	movf	atoi@s,w
  2153  04B0  0084               	movwf	4
  2154  04B1  0800               	movf	0,w
  2155  04B2  3A2B               	xorlw	43
  2156  04B3  1903               	btfsc	3,2
  2157  04B4  2CD9               	goto	l3104
  2158  04B5                     l3110:	
  2159  04B5  087D               	movf	atoi@s,w
  2160  04B6  0084               	movwf	4
  2161  04B7  0800               	movf	0,w
  2162  04B8  24EF  120A  118A   	fcall	_isdigit
  2163  04BB  1C03               	btfss	3,0
  2164  04BC  2CDB               	goto	l3112
  2165  04BD  087D               	movf	atoi@s,w
  2166  04BE  0084               	movwf	4
  2167  04BF  087C               	movf	atoi@a+1,w
  2168  04C0  00F1               	movwf	?___wmul+1
  2169  04C1  087B               	movf	atoi@a,w
  2170  04C2  00F0               	movwf	?___wmul
  2171  04C3  300A               	movlw	10
  2172  04C4  00F2               	movwf	?___wmul+2
  2173  04C5  01F3               	clrf	?___wmul+3
  2174  04C6  24FD  120A  118A   	fcall	___wmul
  2175  04C9  0800               	movf	0,w
  2176  04CA  0770               	addwf	?___wmul,w
  2177  04CB  00F8               	movwf	??_atoi
  2178  04CC  3000               	movlw	0
  2179  04CD  1803               	skipnc
  2180  04CE  3001               	movlw	1
  2181  04CF  0771               	addwf	?___wmul+1,w
  2182  04D0  00F9               	movwf	??_atoi+1
  2183  04D1  0878               	movf	??_atoi,w
  2184  04D2  3ED0               	addlw	208
  2185  04D3  00FB               	movwf	atoi@a
  2186  04D4  0879               	movf	??_atoi+1,w
  2187  04D5  1803               	skipnc
  2188  04D6  3E01               	addlw	1
  2189  04D7  3EFF               	addlw	255
  2190  04D8  00FC               	movwf	atoi@a+1
  2191  04D9                     l3104:	
  2192  04D9  0AFD               	incf	atoi@s,f
  2193  04DA  2CB5               	goto	l3110
  2194  04DB                     l3112:	
  2195  04DB  087A               	movf	atoi@sign,w
  2196  04DC  1903               	btfsc	3,2
  2197  04DD  2CEA               	goto	l3118
  2198  04DE  097B               	comf	atoi@a,w
  2199  04DF  00F8               	movwf	??_atoi
  2200  04E0  097C               	comf	atoi@a+1,w
  2201  04E1  00F9               	movwf	??_atoi+1
  2202  04E2  0AF8               	incf	??_atoi,f
  2203  04E3  1903               	skipnz
  2204  04E4  0AF9               	incf	??_atoi+1,f
  2205  04E5  0878               	movf	??_atoi,w
  2206  04E6  00F6               	movwf	?_atoi
  2207  04E7  0879               	movf	??_atoi+1,w
  2208  04E8  00F7               	movwf	?_atoi+1
  2209  04E9  0008               	return
  2210  04EA                     l3118:	
  2211  04EA  087C               	movf	atoi@a+1,w
  2212  04EB  00F7               	movwf	?_atoi+1
  2213  04EC  087B               	movf	atoi@a,w
  2214  04ED  00F6               	movwf	?_atoi
  2215  04EE  0008               	return
  2216  04EF                     __end_of_atoi:	
  2217  04EF                     __ptext355:	
  2218 ;; =============== function ___wmul ends ============
  2219                           
  2220                           
  2221 ;; *************** function _isdigit *****************
  2222 ;; Defined at:
  2223 ;;		line 13 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\isdigit.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  c               1    wreg     unsigned char 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  c               1    1[COMMON] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;		None               void
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0
  2232 ;; Tracked objects:
  2233 ;;		On entry : 160/0
  2234 ;;		On exit  : 160/0
  2235 ;;		Unchanged: FFE9F/0
  2236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2237 ;;      Params:         0       0       0       0       0
  2238 ;;      Locals:         2       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0
  2240 ;;      Totals:         2       0       0       0       0
  2241 ;;Total ram usage:        2 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_atoi
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249  04EF                     _isdigit:	
  2250                           
  2251                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2252                           ;isdigit@c stored from wreg
  2253  04EF  00F1               	movwf	isdigit@c
  2254  04F0  303A               	movlw	58
  2255  04F1  01F0               	clrf	_isdigit$2410
  2256  04F2  0271               	subwf	isdigit@c,w
  2257  04F3  1803               	skipnc
  2258  04F4  2CFB               	goto	l3022
  2259  04F5  3030               	movlw	48
  2260  04F6  0271               	subwf	isdigit@c,w
  2261  04F7  1C03               	skipc
  2262  04F8  2CFB               	goto	l3022
  2263  04F9  01F0               	clrf	_isdigit$2410
  2264  04FA  0AF0               	incf	_isdigit$2410,f
  2265  04FB                     l3022:	
  2266  04FB  0C70               	rrf	_isdigit$2410,w
  2267  04FC  0008               	return
  2268  04FD                     __end_of_isdigit:	
  2269  04FD                     __ptext354:	
  2270 ;; =============== function ___lwdiv ends ============
  2271                           
  2272                           
  2273 ;; *************** function ___wmul *****************
  2274 ;; Defined at:
  2275 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  multiplier      2    0[COMMON] unsigned int 
  2278 ;;  multiplicand    2    2[COMMON] unsigned int 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  product         2    4[COMMON] unsigned int 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  2    0[COMMON] unsigned int 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0
  2285 ;; Tracked objects:
  2286 ;;		On entry : 160/0
  2287 ;;		On exit  : 160/0
  2288 ;;		Unchanged: FFE9F/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         4       0       0       0       0
  2291 ;;      Locals:         2       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0
  2293 ;;      Totals:         6       0       0       0       0
  2294 ;;Total ram usage:        6 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_atoi
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302  04FD                     ___wmul:	
  2303                           
  2304                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2305  04FD  01F4               	clrf	___wmul@product
  2306  04FE  01F5               	clrf	___wmul@product+1
  2307  04FF                     l3028:	
  2308  04FF  1C70               	btfss	___wmul@multiplier,0
  2309  0500  2D07               	goto	l3032
  2310  0501  0872               	movf	___wmul@multiplicand,w
  2311  0502  07F4               	addwf	___wmul@product,f
  2312  0503  1803               	skipnc
  2313  0504  0AF5               	incf	___wmul@product+1,f
  2314  0505  0873               	movf	___wmul@multiplicand+1,w
  2315  0506  07F5               	addwf	___wmul@product+1,f
  2316  0507                     l3032:	
  2317  0507  1003               	clrc
  2318  0508  0DF2               	rlf	___wmul@multiplicand,f
  2319  0509  0DF3               	rlf	___wmul@multiplicand+1,f
  2320  050A  1003               	clrc
  2321  050B  0CF1               	rrf	___wmul@multiplier+1,f
  2322  050C  0CF0               	rrf	___wmul@multiplier,f
  2323  050D  0871               	movf	___wmul@multiplier+1,w
  2324  050E  0470               	iorwf	___wmul@multiplier,w
  2325  050F  1D03               	skipz
  2326  0510  2CFF               	goto	l3028
  2327  0511  0875               	movf	___wmul@product+1,w
  2328  0512  00F1               	movwf	?___wmul+1
  2329  0513  0874               	movf	___wmul@product,w
  2330  0514  00F0               	movwf	?___wmul
  2331  0515  0008               	return
  2332  0516                     __end_of___wmul:	
  2333                           
  2334                           	psect	text357
  2335  0487                     __ptext357:	
  2336 ;; =============== function _msecbase ends ============
  2337                           
  2338                           
  2339 ;; *************** function _init_comms *****************
  2340 ;; Defined at:
  2341 ;;		line 52 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;		None               void
  2348 ;; Registers used:
  2349 ;;		wreg, status,2
  2350 ;; Tracked objects:
  2351 ;;		On entry : 17F/0
  2352 ;;		On exit  : 17F/60
  2353 ;;		Unchanged: FFE80/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2355 ;;      Params:         0       0       0       0       0
  2356 ;;      Locals:         0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0
  2358 ;;      Totals:         0       0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; This function calls:
  2362 ;;		Nothing
  2363 ;; This function is called by:
  2364 ;;		_main
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367  0487                     _init_comms:	
  2368                           
  2369                           ;SRPROG2.c: 53: TRISC7 = 1;
  2370                           
  2371                           ; Regs used in _init_comms: [wreg+status,2]
  2372  0487  1683               	bsf	3,5	;RP0=1, select bank1
  2373  0488  3019               	movlw	25
  2374  0489  1787               	bsf	7,7
  2375                           
  2376                           ;SRPROG2.c: 54: TRISC6 = 0;
  2377  048A  1307               	bcf	7,6
  2378                           
  2379                           ;SRPROG2.c: 55: SPBRG = 0x19;
  2380  048B  0099               	movwf	25	;volatile
  2381                           
  2382                           ;SRPROG2.c: 57: RCSTA = 0x90;
  2383  048C  3090               	movlw	144
  2384  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2385  048E  0098               	movwf	24	;volatile
  2386                           
  2387                           ;SRPROG2.c: 58: TXSTA = 0x26;
  2388  048F  3026               	movlw	38
  2389  0490  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0491  0098               	movwf	24	;volatile
  2391                           
  2392                           ;SRPROG2.c: 59: BAUDCTL = 0;
  2393  0492  1703               	bsf	3,6	;RP1=1, select bank3
  2394  0493  0187               	clrf	7	;volatile
  2395  0494  0008               	return
  2396  0495                     __end_of_init_comms:	
  2397                           
  2398                           	psect	text358
  2399  0472                     __ptext358:	
  2400 ;; =============== function _init_comms ends ============
  2401                           
  2402                           
  2403 ;; *************** function _getch *****************
  2404 ;; Defined at:
  2405 ;;		line 45 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      unsigned char 
  2412 ;; Registers used:
  2413 ;;		wreg
  2414 ;; Tracked objects:
  2415 ;;		On entry : 60/0
  2416 ;;		On exit  : 60/0
  2417 ;;		Unchanged: FFF9F/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2419 ;;      Params:         0       0       0       0       0
  2420 ;;      Locals:         0       0       0       0       0
  2421 ;;      Temps:          0       0       0       0       0
  2422 ;;      Totals:         0       0       0       0       0
  2423 ;;Total ram usage:        0 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_main
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431  0472                     _getch:	
  2432  0472                     l1057:	
  2433                           ;SRPROG2.c: 47: while(!RCIF)
  2434                           
  2435                           ; Regs used in _getch: [wreg]
  2436                           
  2437  0472  1E8C               	btfss	12,5
  2438  0473  2C72               	goto	l1057
  2439                           
  2440                           ;SRPROG2.c: 49: return RCREG;
  2441                           ;	Return value of _getch is never used
  2442  0474  081A               	movf	26,w	;volatile
  2443  0475  0008               	return
  2444  0476                     __end_of_getch:	
  2445                           
  2446                           	psect	text359
  2447  0476                     __ptext359:	
  2448 ;; =============== function _getch ends ============
  2449                           
  2450                           
  2451 ;; *************** function _putch *****************
  2452 ;; Defined at:
  2453 ;;		line 38 in file "C:\Users\Jorge\OneDrive\Escritorio\SRPROG2\SRPROG2.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  byte            1    0[COMMON] unsigned char 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;		None               void
  2460 ;; Registers used:
  2461 ;;		wreg
  2462 ;; Tracked objects:
  2463 ;;		On entry : 160/0
  2464 ;;		On exit  : 160/0
  2465 ;;		Unchanged: FFE9F/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2467 ;;      Params:         1       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0
  2470 ;;      Totals:         1       0       0       0       0
  2471 ;;Total ram usage:        1 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_printf
  2477 ;;		__doprnt
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480  0476                     _putch:	
  2481  0476                     l1051:	
  2482                           ;SRPROG2.c: 40: while(!TXIF)
  2483                           
  2484                           ; Regs used in _putch: [wreg]
  2485                           
  2486  0476  1E0C               	btfss	12,4
  2487  0477  2C76               	goto	l1051
  2488                           
  2489                           ;SRPROG2.c: 42: TXREG = byte;
  2490  0478  0870               	movf	putch@byte,w
  2491  0479  0099               	movwf	25	;volatile
  2492  047A  0008               	return
  2493  047B                     __end_of_putch:	
  2494                           
  2495 ;; =============== function _putch ends ============
  2496  0002                     
  2497                           	psect	functab
  2498  0700                     __pfunctab:	
  2499  0700                     fptable:	
  2500  0700  00FF               	movwf	(btemp+1)& (0+127)
  2501  0701  3007               	movlw	high fptable
  2502  0702  008A               	movwf	10
  2503  0703  087F               	movf	(btemp+1)& (0+127),w
  2504  0704  0782               	addwf	2,f
  2505  0705                     fpbase:	
  2506  0705  2F05               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  2507  0706                     fp__putch:	
  2508  0706  120A  118A  2C76   	ljmp	_putch
  2509  007E                     btemp	set	126	;btemp
  2510  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Sat May 21 11:35:18 2022

                   pc 0002                    fsr 0004   ___wmul@multiplicand 0072                   _RB0 0030  
                 _RB1 0031                   _RC0 0038                   _RC3 003B                   _RC4 003C  
                 u515 06BC                   u555 06E1                   u635 0577                   u675 063B  
                 u837 073D                   u847 075D                   u857 07F7                   fsr0 0004  
                 indf 0000           lcd_goto@pos 0075                  l1104 0000                  l1113 0000  
                l1051 0476                  l1107 0000                  l1060 0000                  l1116 059C  
                l1054 0000                  l1070 0768                  l1063 0000                  l1119 0000  
                l1151 0000                  l3000 0000                  l1057 0472                  l3010 0000  
                l1074 076A                  l1067 0762                  l3012 0000                  l1092 0000  
                l3006 0000                  l3022 04FB                  l3014 0000                  l3110 04B5  
                l3102 04AF                  l2151 0000                  l3008 0000                  l3016 0000  
                l3032 0507                  l3112 04DB                  l3104 04D9                  l3200 0000  
                l2160 0000                  l1089 0000                  l3034 0000                  l3026 0000  
                l3042 0000                  l3114 0000                  l3122 056F                  l3130 0000  
                l3202 0000                  l3210 0000                  l1098 0000                  l3036 0000  
                l3028 04FF                  l3052 06B3                  l3044 0000                  l3140 0000  
                l3204 0000                  l3212 0000                  l3220 0000                  l3300 0000  
                l3062 0000                  l3054 0000                  l3118 04EA                  l3126 0000  
                l3150 0000                  l3142 05F9                  l3206 0000                  l3214 0000  
                l3230 0000                  l3222 0000                  l3310 0000                  l3302 0000  
                l2167 0000                  l3064 06CA                  l3128 0571                  l3160 0626  
                l3216 0000                  l3232 0000                  l3224 0000                  l3320 0000  
                l3312 0000                  l3304 0000                  l3058 0000                  l3082 0000  
                l3090 049C                  l3154 0000                  l3146 0000                  l3138 05F2  
                l3226 0000                  l3234 0000                  l3242 0000                  l3250 0000  
                l3330 0000                  l3322 0000                  l3314 0000                  l3306 0000  
                l2179 0000                  l3076 06DB                  l3084 06EE                  l3068 0000  
                l3092 0496                  l3180 0663                  l3156 0624                  l3148 060D  
                l3228 0000                  l3236 0000                  l3244 051D                  l3260 0000  
                l3252 0000                  l3340 0773                  l3332 0000                  l3324 0000  
                l3316 0744                  l3308 0000                  l2189 0000                  l3094 049E  
                l3182 0000                  l3190 069C                  l3174 0655                  l3166 0000  
                l3238 0000                  l3246 0000                  l3270 0000                  l3262 0000  
                l3254 0000                  l3350 0794                  l3342 0000                  l3334 0000  
                l3326 0000                  l3318 0000                  l2199 0000                  l3088 0000  
                l3176 0000                  l3168 0642                  l3192 05D1                  l3248 0000  
                l3280 0000                  l3272 0000                  l3264 0000                  l3256 0000  
                l3360 0000                  l3352 0000                  l3344 0776                  l3336 0766  
                l3328 0000                  l3098 0000                  l3186 0696                  l3178 065E  
                l3194 06A2                  l3282 0000                  l3274 0000                  l3266 0000  
                l3258 0000                  l3370 0000                  l3362 0000                  l3354 079C  
                l3346 0000                  l3290 0000                  l3188 0000                  l3284 0000  
                l3276 0000                  l3268 0000                  l3372 0000                  l3364 0000  
                l3292 0000                  l3198 0000                  l3286 0000                  l3278 0000  
                l3366 0000                  l3358 07AA                  l3374 07F1                  l3294 0000  
                l3288 0000                  l3368 0000                  l3296 0000                  l3298 0000  
                l2996 0000                  STR_1 001D                  STR_2 002A                  STR_3 003F  
                STR_4 003A                  STR_5 0034                  STR_6 0042                  _T0IF 005A  
                _RCIF 0065                  _TMR0 0001                  _TXIF 0064                  _dato 0034  
                _dist 0036                  _atoi 0495                  _main 0709                  btemp 007E  
                start 0000                 ?_atoi 0076                 ?_main 0070                 _ANSEL 0188  
               _T1CON 0010       __end_of___lwdiv 06CF       __end_of___lwmod 06F3                 _RCREG 001A  
               _RCSTA 0018                 _TMR1H 000F                 _TMR1L 000E                 _SPBRG 0099  
               _PORTB 0006                 _PORTD 0008       __end_of__doprnt 06A5                 _TRISA 0085  
               _TRISC 0087                 _TRISD 0088                 _TRISE 0089                 _TXREG 0019  
               _TXSTA 0098                 _getch 0472       __end_of_isdigit 04FD                 _pause 056F  
               atoi@a 007B                 atoi@s 007D                 _putch 0476                 fpbase 0705  
               pclath 000A                 status 0003                 wtemp0 007E       __end_of_sprintf 05D0  
        __end_of_atoi 04EF          __end_of_main 07FF                ??_atoi 0078                ??_main 0031  
              ?_getch 0070                _ADCON1 009F                ?_pause 0070                ?_putch 0070  
              _ANSELH 0189                _TMR1IF 0060                _TMR1ON 0080                _TRISB1 0431  
              _TRISC6 043E                _TRISC7 043F      __end_of_lcd_init 056F      __end_of_lcd_goto 051C  
    __end_of_lcd_puts 0539                _carac1 0038                ___wmul 04FD             ??___lwdiv 0074  
           ??___lwmod 007B             ??__doprnt 0020          __doprnt@_val 0024          __doprnt@flag 0022  
              _printf 05B4          __doprnt@prec 0023      __end_of_msecbase 05A0                fptable 0700  
              fptotal 0002             ??_isdigit 0070                pause@x 0072             ??_sprintf 007E  
      __pcstackCOMMON 0070         __end_of_getch 0476         __end_of_pause 0580         __end_of_putch 047B  
  __size_of_lcd_clear 0009            __doprnt@ap 007D            __doprnt@pb 0029               ??_getch 0070  
  __size_of_lcd_write 0013               ??_pause 0072               ??_putch 0071            __pbssBANK0 0034  
          __pmaintext 0709               ?___wmul 0070               _BAUDCTL 0187               ?_printf 002A  
           ?_lcd_init 0070             ?_lcd_goto 0070             ?_lcd_puts 0075             ?_msecbase 0070  
   __end_of_lcd_clear 05A9     __end_of_lcd_write 0593       __size_of___wmul 0019               ___lwdiv 06A5  
             ___lwmod 06CF            _init_comms 0487               __doprnt 05D0       __size_of_printf 000C  
             _dpowers 0013               _isdigit 04EF               _sprintf 05C0            ??_lcd_init 0075  
          ??_lcd_goto 0075            ??_lcd_puts 0077  end_of_initialization 0483            ??_msecbase 0070  
             printf@f 002C            lcd_write@c 0074           ?_init_comms 0070        __end_of___wmul 0516  
      __end_of_printf 05C0   start_initialization 047B              ??___wmul 0074              ??_printf 007E  
        pause@usvalue 0070         __pcstackBANK0 0020          _isdigit$2410 0070   __size_of_init_comms 000E  
   __size_of_lcd_init 0036     __size_of_lcd_goto 0006             __doprnt@c 0028             __doprnt@f 007C  
   __size_of_lcd_puts 001D      ___lwdiv@dividend 0072             __pfunctab 0700     __size_of_msecbase 000D  
           __ptext350 056F             __ptext342 0539             __ptext351 0495             __ptext343 05A0  
           __ptext352 06CF             __ptext344 051C             __ptext353 06A5             __ptext345 0516  
           __ptext354 04FD             __ptext346 0580             __ptext355 04EF             __ptext347 05B4  
           __ptext356 0593             __ptext348 05C0             __ptext357 0487             __ptext349 05D0  
           __ptext358 0472             __ptext359 0476              ?___lwdiv 0070              ?___lwmod 0077  
            ?__doprnt 007C             _lcd_clear 05A0             __pstrings 0003             _lcd_write 0580  
            ?_isdigit 0070      ___lwdiv@quotient 0074        __size_of_getch 0004              ?_sprintf 002A  
      __size_of_pause 0011        __size_of_putch 0005        ___wmul@product 0074            ?_lcd_clear 0070  
         __stringbase 0012            ?_lcd_write 0070     ___wmul@multiplier 0070             lcd_puts@s 0075  
        ??_init_comms 0070      __size_of___lwdiv 002A      __size_of___lwmod 0024      __size_of__doprnt 00D5  
    __size_of_isdigit 000E       ___lwdiv@divisor 0070       ___lwdiv@counter 0076              _lcd_init 0539  
            _lcd_goto 0516              _lcd_puts 051C      __size_of_sprintf 0010         __size_of_atoi 005A  
       __size_of_main 00F6    __end_of_init_comms 0495              _msecbase 0593              atoi@sign 007A  
            fp__putch 0706           ??_lcd_clear 0075           ??_lcd_write 0074             putch@byte 0070  
            isdigit@c 0071             sprintf@ap 002E             sprintf@pb 002F             sprintf@wh 002D  
    ___lwmod@dividend 0079             stringcode 000D              printf@ap 002D              printf@pb 002E  
          _OPTION_REG 0081              sprintf@f 002A       ___lwmod@divisor 0077       ___lwmod@counter 007B  
            stringdir 000D              stringtab 0003  



HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Sat May 21 15:50:51 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,delta=2
    10                           	psect	text61,local,class=CODE,delta=2
    11                           	psect	text64,local,class=CODE,delta=2
    12                           	psect	text65,local,class=CODE,delta=2
    13                           	psect	pa_nodes,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  000A                     	;#
    16                           
    17                           	psect	config
    18  2007  E0D4               	dw	57556	;#
    19  2008  FFFF               	dw	65535	;#
    20                           
    21                           	psect	nvCOMMON
    22  007A                     __pnvCOMMON:	
    23  007A                     _dato:	
    24  007A                     	ds	1
    25  001F                     _ADCON0	set	31
    26  001E                     _ADRESH	set	30
    27  0017                     _CCP1CON	set	23
    28  001D                     _CCP2CON	set	29
    29  0015                     _CCPR1L	set	21
    30  001B                     _CCPR2L	set	27
    31  0005                     _PORTA	set	5
    32  0006                     _PORTB	set	6
    33  0012                     _T2CON	set	18
    34  0001                     _TMR0	set	1
    35  00F9                     _GO_DONE	set	249
    36  005A                     _T0IF	set	90
    37  009F                     _ADCON1	set	159
    38  0081                     _OPTION_REG	set	129
    39  0092                     _PR2	set	146
    40  0085                     _TRISA	set	133
    41  0086                     _TRISB	set	134
    42  0087                     _TRISC	set	135
    43  0088                     _TRISD	set	136
    44  0089                     _TRISE	set	137
    45  0188                     _ANSEL	set	392
    46  0189                     _ANSELH	set	393
    47  009E                     _ADRESL	set	158
    48                           
    49                           	psect	cinit
    50  0732                     start_initialization:	
    51                           
    52                           ; Clear objects allocated to COMMON
    53  0732  01F6               	clrf	__pbssCOMMON& (0+127)
    54  0733  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    55  0734  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    56  0735  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
    57  0736                     end_of_initialization:	
    58                           ;End of C runtime variable initialization code
    59                           
    60  0736  0183               	clrf	3
    61  0737  120A  118A  2F6E   	ljmp	_main	;jump to C main() function
    62                           
    63                           	psect	bssCOMMON
    64  0076                     __pbssCOMMON:	
    65  0076                     _vadc1:	
    66  0076                     	ds	2
    67  0078                     _vadc2:	
    68  0078                     	ds	2
    69                           
    70                           	psect	cstackCOMMON
    71  0070                     __pcstackCOMMON:	
    72  0070                     ?_pause:	
    73  0070                     ?_ADC:	
    74                           ; 0 bytes @ 0x0
    75                           
    76  0070                     ??_ADC:	
    77                           ; 0 bytes @ 0x0
    78                           
    79  0070                     ?_PWM:	
    80                           ; 0 bytes @ 0x0
    81                           
    82  0070                     ?_msecbase:	
    83                           ; 0 bytes @ 0x0
    84                           
    85  0070                     ??_msecbase:	
    86                           ; 0 bytes @ 0x0
    87                           
    88  0070                     ?_main:	
    89                           ; 0 bytes @ 0x0
    90                           
    91  0070                     pause@usvalue:	
    92                           ; 0 bytes @ 0x0
    93                           
    94                           
    95                           ; 2 bytes @ 0x0
    96  0070                     	ds	2
    97  0072                     ??_pause:	
    98  0072                     pause@x:	
    99                           ; 0 bytes @ 0x2
   100                           
   101                           
   102                           ; 2 bytes @ 0x2
   103  0072                     	ds	2
   104  0074                     ??_PWM:	
   105                           
   106                           ; 0 bytes @ 0x4
   107  0074                     	ds	2
   108  0076                     ??_main:	
   109                           
   110                           	psect	maintext
   111  076E                     __pmaintext:	
   112                           ; 0 bytes @ 0x6
   113 ;;Data sizes: Strings 0, constant 0, data 0, bss 4, persistent 1 stack 0
   114 ;;Auto spaces:   Size  Autos    Used
   115 ;; COMMON          14      6      11
   116 ;; BANK0           80      0       0
   117 ;; BANK1           80      0       0
   118 ;; BANK3           96      0       0
   119 ;; BANK2           96      0       0
   120 ;;
   121 ;; Pointer list with targets:
   122 ;;
   123 ;; Critical Paths under _main in COMMON
   124 ;;
   125 ;;   _main->_PWM
   126 ;;   _PWM->_pause
   127 ;;
   128 ;; Critical Paths under _main in BANK0
   129 ;;
   130 ;;   None.
   131 ;;
   132 ;; Critical Paths under _main in BANK1
   133 ;;
   134 ;;   None.
   135 ;;
   136 ;; Critical Paths under _main in BANK3
   137 ;;
   138 ;;   None.
   139 ;;
   140 ;; Critical Paths under _main in BANK2
   141 ;;
   142 ;;   None.
   143 ;;
   144 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   145 ;;
   146 ;;
   147 ;;Call Graph Tables:
   148 ;;
   149 ;; ---------------------------------------------------------------------------------
   150 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   151 ;; ---------------------------------------------------------------------------------
   152 ;; (0) _main                                                 0     0      0      60
   153 ;;                              _pause
   154 ;;                                _ADC
   155 ;;                                _PWM
   156 ;; ---------------------------------------------------------------------------------
   157 ;; (1) _PWM                                                  2     2      0      30
   158 ;;                                              4 COMMON     2     2      0
   159 ;;                              _pause
   160 ;; ---------------------------------------------------------------------------------
   161 ;; (2) _pause                                                4     2      2      30
   162 ;;                                              0 COMMON     4     2      2
   163 ;;                           _msecbase
   164 ;; ---------------------------------------------------------------------------------
   165 ;; (3) _msecbase                                             0     0      0       0
   166 ;; ---------------------------------------------------------------------------------
   167 ;; (1) _ADC                                                  1     1      0       0
   168 ;;                                              0 COMMON     1     1      0
   169 ;; ---------------------------------------------------------------------------------
   170 ;; Estimated maximum stack depth 3
   171 ;; ---------------------------------------------------------------------------------
   172 ;; Call Graph Graphs:
   173 ;; _main (ROOT)
   174 ;;   _pause
   175 ;;     _msecbase
   176 ;;   _ADC
   177 ;;   _PWM
   178 ;;     _pause
   179 ;;       _msecbase
   180 ;;
   181 ;; Address spaces:
   182 ;;Name               Size   Autos  Total    Cost      Usage
   183 ;;BITCOMMON            E      0       0       0        0.0%
   184 ;;EEDATA             100      0       0       0        0.0%
   185 ;;NULL                 0      0       0       0        0.0%
   186 ;;CODE                 0      0       0       0        0.0%
   187 ;;COMMON               E      6       B       1       78.6%
   188 ;;BITSFR0              0      0       0       1        0.0%
   189 ;;SFR0                 0      0       0       1        0.0%
   190 ;;BITSFR1              0      0       0       2        0.0%
   191 ;;SFR1                 0      0       0       2        0.0%
   192 ;;STACK                0      0       3       2        0.0%
   193 ;;ABS                  0      0       B       3        0.0%
   194 ;;BITBANK0            50      0       0       4        0.0%
   195 ;;BITSFR3              0      0       0       4        0.0%
   196 ;;SFR3                 0      0       0       4        0.0%
   197 ;;BANK0               50      0       0       5        0.0%
   198 ;;BITSFR2              0      0       0       5        0.0%
   199 ;;SFR2                 0      0       0       5        0.0%
   200 ;;BITBANK1            50      0       0       6        0.0%
   201 ;;BANK1               50      0       0       7        0.0%
   202 ;;BITBANK3            60      0       0       8        0.0%
   203 ;;BANK3               60      0       0       9        0.0%
   204 ;;BITBANK2            60      0       0      10        0.0%
   205 ;;BANK2               60      0       0      11        0.0%
   206 ;;DATA                 0      0       E      12        0.0%
   207                           
   208                           
   209 ;; *************** function _main *****************
   210 ;; Defined at:
   211 ;;		line 19 in file "C:\Users\Jorge\OneDrive\Escritorio\PRPWM\PRPWM.c"
   212 ;; Parameters:    Size  Location     Type
   213 ;;		None
   214 ;; Auto vars:     Size  Location     Type
   215 ;;		None
   216 ;; Return value:  Size  Location     Type
   217 ;;		None               void
   218 ;; Registers used:
   219 ;;		wreg, status,2, status,0, pclath, cstack
   220 ;; Tracked objects:
   221 ;;		On entry : 17F/0
   222 ;;		On exit  : 11F/0
   223 ;;		Unchanged: FFE80/0
   224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   225 ;;      Params:         0       0       0       0       0
   226 ;;      Locals:         0       0       0       0       0
   227 ;;      Temps:          0       0       0       0       0
   228 ;;      Totals:         0       0       0       0       0
   229 ;;Total ram usage:        0 bytes
   230 ;; Hardware stack levels required when called:    3
   231 ;; This function calls:
   232 ;;		_pause
   233 ;;		_ADC
   234 ;;		_PWM
   235 ;; This function is called by:
   236 ;;		Startup code after reset
   237 ;; This function uses a non-reentrant model
   238 ;;
   239  076E                     _main:	
   240                           
   241                           ;PRPWM.c: 21: ANSEL = 0x00;
   242                           
   243                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   244  076E  1683               	bsf	3,5	;RP0=1, select bank3
   245  076F  1703               	bsf	3,6	;RP1=1, select bank3
   246  0770  0188               	clrf	8	;volatile
   247                           
   248                           ;PRPWM.c: 22: ANSELH = 0x00;
   249  0771  0189               	clrf	9	;volatile
   250                           
   251                           ;PRPWM.c: 23: TRISA= 0x00;
   252  0772  1303               	bcf	3,6	;RP1=0, select bank1
   253  0773  0185               	clrf	5	;volatile
   254                           
   255                           ;PRPWM.c: 24: TRISB = 0xFF;
   256  0774  30FF               	movlw	255
   257  0775  0086               	movwf	6	;volatile
   258                           
   259                           ;PRPWM.c: 25: TRISC = 0x00;
   260  0776  0187               	clrf	7	;volatile
   261                           
   262                           ;PRPWM.c: 26: TRISD = 0x0F;
   263  0777  300F               	movlw	15
   264  0778  0088               	movwf	8	;volatile
   265                           
   266                           ;PRPWM.c: 27: TRISE = 0x07;
   267  0779  3007               	movlw	7
   268  077A  0089               	movwf	9	;volatile
   269                           
   270                           ;PRPWM.c: 28: ADCON1 = 0x80;
   271  077B  3080               	movlw	128
   272  077C  009F               	movwf	31	;volatile
   273                           
   274                           ;PRPWM.c: 30: T2CON = 0x07;
   275  077D  3007               	movlw	7
   276  077E  1283               	bcf	3,5	;RP0=0, select bank0
   277  077F  0092               	movwf	18	;volatile
   278                           
   279                           ;PRPWM.c: 31: PR2 = 0xFF;
   280  0780  30FF               	movlw	255
   281  0781  1683               	bsf	3,5	;RP0=1, select bank1
   282  0782  0092               	movwf	18	;volatile
   283                           
   284                           ;PRPWM.c: 32: CCPR1L = 0x80;
   285  0783  3080               	movlw	128
   286  0784  1283               	bcf	3,5	;RP0=0, select bank0
   287  0785  0095               	movwf	21	;volatile
   288                           
   289                           ;PRPWM.c: 33: CCP1CON = 0x0C;
   290  0786  300C               	movlw	12
   291  0787  0097               	movwf	23	;volatile
   292                           
   293                           ;PRPWM.c: 34: CCP2CON = 0x0C;
   294  0788  009D               	movwf	29	;volatile
   295  0789                     l1039:	
   296                           ;PRPWM.c: 36: while(1)
   297                           
   298                           
   299                           ;PRPWM.c: 37: {
   300                           ;PRPWM.c: 39: dato = PORTB;
   301  0789  1283               	bcf	3,5	;RP0=0, select bank0
   302  078A  1303               	bcf	3,6	;RP1=0, select bank0
   303  078B  0806               	movf	6,w	;volatile
   304  078C  00FA               	movwf	_dato
   305                           
   306                           ;PRPWM.c: 40: pause(10);
   307  078D  300A               	movlw	10
   308  078E  00F0               	movwf	?_pause
   309  078F  01F1               	clrf	?_pause+1
   310  0790  120A  118A  27CF   	fcall	_pause
      +       120A  118A         
   311                           
   312                           ;PRPWM.c: 41: PORTA = dato;
   313  0795  087A               	movf	_dato,w
   314  0796  1283               	bcf	3,5	;RP0=0, select bank0
   315  0797  1303               	bcf	3,6	;RP1=0, select bank0
   316  0798  0085               	movwf	5	;volatile
   317                           
   318                           ;PRPWM.c: 43: ADC();
   319  0799  120A  118A  273A   	fcall	_ADC
      +       120A  118A         
   320                           
   321                           ;PRPWM.c: 45: PWM();
   322  079E  120A  118A  27A4   	fcall	_PWM
      +       120A  118A         
   323  07A3  2F89               	goto	l1039
   324  07A4                     __end_of_main:	
   325                           
   326                           	psect	text61
   327  07A4                     __ptext61:	
   328 ;; =============== function _main ends ============
   329                           
   330                           
   331 ;; *************** function _PWM *****************
   332 ;; Defined at:
   333 ;;		line 63 in file "C:\Users\Jorge\OneDrive\Escritorio\PRPWM\PRPWM.c"
   334 ;; Parameters:    Size  Location     Type
   335 ;;		None
   336 ;; Auto vars:     Size  Location     Type
   337 ;;		None
   338 ;; Return value:  Size  Location     Type
   339 ;;		None               void
   340 ;; Registers used:
   341 ;;		wreg, status,2, status,0, pclath, cstack
   342 ;; Tracked objects:
   343 ;;		On entry : 17F/20
   344 ;;		On exit  : 11F/0
   345 ;;		Unchanged: FFE80/0
   346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   347 ;;      Params:         0       0       0       0       0
   348 ;;      Locals:         0       0       0       0       0
   349 ;;      Temps:          2       0       0       0       0
   350 ;;      Totals:         2       0       0       0       0
   351 ;;Total ram usage:        2 bytes
   352 ;; Hardware stack levels used:    1
   353 ;; Hardware stack levels required when called:    2
   354 ;; This function calls:
   355 ;;		_pause
   356 ;; This function is called by:
   357 ;;		_main
   358 ;; This function uses a non-reentrant model
   359 ;;
   360  07A4                     _PWM:	
   361                           
   362                           ;PRPWM.c: 64: ADRESH=vadc1>>2;
   363                           
   364                           ; Regs used in _PWM: [wreg+status,2+status,0+pclath+cstack]
   365  07A4  0877               	movf	_vadc1+1,w
   366  07A5  00F5               	movwf	??_PWM+1
   367  07A6  0876               	movf	_vadc1,w
   368  07A7  27F6  120A  118A   	fcall	PL3	;call to abstracted procedure
   369  07AA  009E               	movwf	30	;volatile
   370                           
   371                           ;PRPWM.c: 65: ADRESL=vadc1<<8;
   372  07AB  1683               	bsf	3,5	;RP0=1, select bank1
   373  07AC  019E               	clrf	30	;volatile
   374                           
   375                           ;PRPWM.c: 66: CCPR1L=ADRESH;
   376  07AD  1283               	bcf	3,5	;RP0=0, select bank0
   377  07AE  081E               	movf	30,w	;volatile
   378  07AF  0095               	movwf	21	;volatile
   379                           
   380                           ;PRPWM.c: 67: CCP1CON=0X0C|(ADRESL>>2);
   381  07B0  27EB  120A  118A   	fcall	PL2	;call to abstracted procedure
   382  07B3  0097               	movwf	23	;volatile
   383                           
   384                           ;PRPWM.c: 68: pause(1);
   385  07B4  01F0               	clrf	?_pause
   386  07B5  0AF0               	incf	?_pause,f
   387  07B6  01F1               	clrf	?_pause+1
   388  07B7  27CF  120A  118A   	fcall	_pause
   389                           
   390                           ;PRPWM.c: 70: ADRESH=vadc2>>2;
   391  07BA  0879               	movf	_vadc2+1,w
   392  07BB  00F5               	movwf	??_PWM+1
   393  07BC  0878               	movf	_vadc2,w
   394  07BD  27F6  120A  118A   	fcall	PL3	;call to abstracted procedure
   395  07C0  1303               	bcf	3,6	;RP1=0, select bank0
   396  07C1  009E               	movwf	30	;volatile
   397                           
   398                           ;PRPWM.c: 71: ADRESL=vadc2<<8;
   399  07C2  1683               	bsf	3,5	;RP0=1, select bank1
   400  07C3  019E               	clrf	30	;volatile
   401                           
   402                           ;PRPWM.c: 72: CCPR2L=ADRESH;
   403  07C4  1283               	bcf	3,5	;RP0=0, select bank0
   404  07C5  081E               	movf	30,w	;volatile
   405  07C6  009B               	movwf	27	;volatile
   406                           
   407                           ;PRPWM.c: 73: CCP2CON=0X0C|(ADRESL>>2);
   408  07C7  27EB  120A  118A   	fcall	PL2	;call to abstracted procedure
   409  07CA  009D               	movwf	29	;volatile
   410                           
   411                           ;PRPWM.c: 74: pause(1);
   412  07CB  01F0               	clrf	?_pause
   413  07CC  0AF0               	incf	?_pause,f
   414  07CD  01F1               	clrf	?_pause+1
   415  07CE  2FCF               	ljmp	l2437
   416  07CF                     __end_of_PWM:	
   417  07CF                     __ptext62:	
   418 ;; =============== function _PWM ends ============
   419                           
   420                           
   421 ;; *************** function _pause *****************
   422 ;; Defined at:
   423 ;;		line 79 in file "C:\Users\Jorge\OneDrive\Escritorio\PRPWM\PRPWM.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  usvalue         2    0[COMMON] unsigned short 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  x               2    2[COMMON] unsigned short 
   428 ;; Return value:  Size  Location     Type
   429 ;;		None               void
   430 ;; Registers used:
   431 ;;		wreg, status,2, status,0, pclath, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 17F/0
   434 ;;		On exit  : 11F/0
   435 ;;		Unchanged: FFE80/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   437 ;;      Params:         2       0       0       0       0
   438 ;;      Locals:         2       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0
   440 ;;      Totals:         4       0       0       0       0
   441 ;;Total ram usage:        4 bytes
   442 ;; Hardware stack levels used:    1
   443 ;; Hardware stack levels required when called:    1
   444 ;; This function calls:
   445 ;;		_msecbase
   446 ;; This function is called by:
   447 ;;		_main
   448 ;;		_PWM
   449 ;; This function uses a non-reentrant model
   450 ;;
   451  07CF                     _pause:	
   452  07CF                     l2437:	
   453                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
   454                           
   455                           
   456                           ;PRPWM.c: 80: unsigned short x;
   457                           ;PRPWM.c: 82: for (x=0; x<=usvalue; x++)
   458  07CF  01F2               	clrf	pause@x
   459  07D0  01F3               	clrf	pause@x+1
   460  07D1                     l2443:	
   461  07D1  0873               	movf	pause@x+1,w
   462  07D2  0271               	subwf	pause@usvalue+1,w
   463  07D3  1D03               	skipz
   464  07D4  2FD7               	goto	u65
   465  07D5  0872               	movf	pause@x,w
   466  07D6  0270               	subwf	pause@usvalue,w
   467  07D7                     u65:	
   468  07D7  1C03               	btfss	3,0
   469  07D8  0008               	return
   470                           
   471                           ;PRPWM.c: 83: {
   472                           ;PRPWM.c: 84: msecbase();
   473  07D9  27E0  120A  118A   	fcall	_msecbase
   474  07DC  0AF2               	incf	pause@x,f
   475  07DD  1903               	skipnz
   476  07DE  0AF3               	incf	pause@x+1,f
   477  07DF  2FD1               	goto	l2443
   478  07E0                     __end_of_pause:	
   479  07E0                     __ptext63:	
   480 ;; =============== function _pause ends ============
   481                           
   482                           
   483 ;; *************** function _msecbase *****************
   484 ;; Defined at:
   485 ;;		line 89 in file "C:\Users\Jorge\OneDrive\Escritorio\PRPWM\PRPWM.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;		None               void
   492 ;; Registers used:
   493 ;;		wreg
   494 ;; Tracked objects:
   495 ;;		On entry : 11F/0
   496 ;;		On exit  : 11F/0
   497 ;;		Unchanged: FFE80/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   499 ;;      Params:         0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0
   501 ;;      Temps:          0       0       0       0       0
   502 ;;      Totals:         0       0       0       0       0
   503 ;;Total ram usage:        0 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; This function calls:
   506 ;;		Nothing
   507 ;; This function is called by:
   508 ;;		_pause
   509 ;; This function uses a non-reentrant model
   510 ;;
   511  07E0                     _msecbase:	
   512                           
   513                           ;PRPWM.c: 90: OPTION_REG = 0b11010001;
   514                           
   515                           ; Regs used in _msecbase: [wreg]
   516  07E0  30D1               	movlw	209
   517  07E1  1683               	bsf	3,5	;RP0=1, select bank1
   518  07E2  1303               	bcf	3,6	;RP1=0, select bank1
   519  07E3  0081               	movwf	1	;volatile
   520                           
   521                           ;PRPWM.c: 91: TMR0 = 0x0E;
   522  07E4  300E               	movlw	14
   523  07E5  1283               	bcf	3,5	;RP0=0, select bank0
   524  07E6  0081               	movwf	1	;volatile
   525  07E7                     l1063:	
   526                           ;PRPWM.c: 93: while(!T0IF);
   527                           
   528  07E7  1D0B               	btfss	11,2
   529  07E8  2FE7               	goto	l1063
   530                           
   531                           ;PRPWM.c: 94: T0IF = 0;
   532  07E9  110B               	bcf	11,2
   533  07EA  0008               	return
   534  07EB                     __end_of_msecbase:	
   535  07EB                     PL2:	
   536  07EB  1683               	bsf	3,5	;RP0=1, select bank1
   537  07EC  081E               	movf	30,w	;volatile
   538  07ED  00F4               	movwf	??_PWM
   539  07EE  1003               	clrc
   540  07EF  0CF4               	rrf	??_PWM,f
   541  07F0  1003               	clrc
   542  07F1  0CF4               	rrf	??_PWM,f
   543  07F2  0874               	movf	??_PWM,w
   544  07F3  380C               	iorlw	12
   545  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   546  07F5  0008               	return
   547  07F6                     PL3:	
   548  07F6  00F4               	movwf	??_PWM
   549  07F7  1003               	clrc
   550  07F8  0CF5               	rrf	??_PWM+1,f
   551  07F9  0CF4               	rrf	??_PWM,f
   552  07FA  1003               	clrc
   553  07FB  0CF5               	rrf	??_PWM+1,f
   554  07FC  0CF4               	rrf	??_PWM,f
   555  07FD  0874               	movf	??_PWM,w
   556  07FE  1283               	bcf	3,5	;RP0=0, select bank0
   557  07FF  0008               	return
   558                           
   559                           	psect	text64
   560  073A                     __ptext64:	
   561 ;; =============== function _msecbase ends ============
   562                           
   563                           
   564 ;; *************** function _ADC *****************
   565 ;; Defined at:
   566 ;;		line 50 in file "C:\Users\Jorge\OneDrive\Escritorio\PRPWM\PRPWM.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;		None
   569 ;; Auto vars:     Size  Location     Type
   570 ;;		None
   571 ;; Return value:  Size  Location     Type
   572 ;;		None               void
   573 ;; Registers used:
   574 ;;		wreg, status,2, status,0
   575 ;; Tracked objects:
   576 ;;		On entry : 17F/0
   577 ;;		On exit  : 17F/20
   578 ;;		Unchanged: FFE80/0
   579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   580 ;;      Params:         0       0       0       0       0
   581 ;;      Locals:         0       0       0       0       0
   582 ;;      Temps:          1       0       0       0       0
   583 ;;      Totals:         1       0       0       0       0
   584 ;;Total ram usage:        1 bytes
   585 ;; Hardware stack levels used:    1
   586 ;; This function calls:
   587 ;;		Nothing
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592  073A                     _ADC:	
   593                           
   594                           ;PRPWM.c: 51: ADCON0=0xD5;
   595                           
   596                           ; Regs used in _ADC: [wreg+status,2+status,0]
   597  073A  30D5               	movlw	213
   598  073B  009F               	movwf	31	;volatile
   599                           
   600                           ;PRPWM.c: 52: GO_DONE=1;
   601  073C  149F               	bsf	31,1
   602  073D                     l1045:	
   603                           ;PRPWM.c: 53: while(GO_DONE);
   604                           
   605  073D  189F               	btfsc	31,1
   606  073E  2F3D               	goto	l1045
   607                           
   608                           ;PRPWM.c: 54: vadc1=(ADRESH<<2)|(ADRESL>>6);
   609  073F  081E               	movf	30,w	;volatile
   610  0740  00F6               	movwf	_vadc1
   611  0741  01F7               	clrf	_vadc1+1
   612  0742  1003               	clrc
   613  0743  0DF6               	rlf	_vadc1,f
   614  0744  0DF7               	rlf	_vadc1+1,f
   615  0745  1003               	clrc
   616  0746  0DF6               	rlf	_vadc1,f
   617  0747  0DF7               	rlf	_vadc1+1,f
   618  0748  1683               	bsf	3,5	;RP0=1, select bank1
   619  0749  081E               	movf	30,w	;volatile
   620  074A  00F0               	movwf	??_ADC
   621  074B  3006               	movlw	6
   622  074C                     u25:	
   623  074C  1003               	clrc
   624  074D  0CF0               	rrf	??_ADC,f
   625  074E  3EFF               	addlw	-1
   626  074F  1D03               	skipz
   627  0750  2F4C               	goto	u25
   628  0751  0870               	movf	??_ADC,w
   629  0752  04F6               	iorwf	_vadc1,f
   630                           
   631                           ;PRPWM.c: 56: ADCON0=0xD9;
   632  0753  30D9               	movlw	217
   633  0754  1283               	bcf	3,5	;RP0=0, select bank0
   634  0755  009F               	movwf	31	;volatile
   635                           
   636                           ;PRPWM.c: 57: GO_DONE=1;
   637  0756  149F               	bsf	31,1
   638  0757                     l1048:	
   639                           ;PRPWM.c: 58: while(GO_DONE);
   640                           
   641  0757  189F               	btfsc	31,1
   642  0758  2F57               	goto	l1048
   643                           
   644                           ;PRPWM.c: 59: vadc2=(ADRESH<<2)|(ADRESL>>6);
   645  0759  081E               	movf	30,w	;volatile
   646  075A  00F8               	movwf	_vadc2
   647  075B  01F9               	clrf	_vadc2+1
   648  075C  1003               	clrc
   649  075D  0DF8               	rlf	_vadc2,f
   650  075E  0DF9               	rlf	_vadc2+1,f
   651  075F  1003               	clrc
   652  0760  0DF8               	rlf	_vadc2,f
   653  0761  0DF9               	rlf	_vadc2+1,f
   654  0762  1683               	bsf	3,5	;RP0=1, select bank1
   655  0763  081E               	movf	30,w	;volatile
   656  0764  00F0               	movwf	??_ADC
   657  0765  3006               	movlw	6
   658  0766                     u45:	
   659  0766  1003               	clrc
   660  0767  0CF0               	rrf	??_ADC,f
   661  0768  3EFF               	addlw	-1
   662  0769  1D03               	skipz
   663  076A  2F66               	goto	u45
   664  076B  0870               	movf	??_ADC,w
   665  076C  04F8               	iorwf	_vadc2,f
   666  076D  0008               	return
   667  076E                     __end_of_ADC:	
   668                           
   669                           	psect	text65
   670  0000                     __ptext65:	
   671 ;; =============== function _ADC ends ============
   672                           
   673  007E                     btemp	set	126	;btemp
   674  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Sat May 21 15:50:51 2022

                  u25 074C                    u45 0766                    u65 07D7                   _ADC 073A  
                 _PR2 0092                   _PWM 07A4                  ?_ADC 0070                  ?_PWM 0070  
                l1051 0000                  l1060 0000                  l1045 073D                  l1054 0000  
                l1063 07E7                  l1039 0789                  l1048 0757                  l1066 0000  
                l2421 0000                  l2433 0000                  l2425 0000                  l2441 0000  
                l2427 0000                  l2419 0000                  l2435 0000                  l2443 07D1  
                l2451 0000                  l2429 0000                  l2437 07CF                  l2461 0000  
                l2453 0000                  l2445 0000                  l2455 0000                  l2447 0000  
                l2471 0000                  l2463 0000                  l2457 0000                  l2449 0000  
                l2465 0000                  l2459 0000                  l2467 0000                  l2469 0000  
                _T0IF 005A                  _TMR0 0001                  _dato 007A                  _main 076E  
                btemp 007E                  start 0000                 ??_ADC 0070                 ??_PWM 0074  
               ?_main 0070                 _ANSEL 0188                 _T2CON 0012                 _PORTA 0005  
               _PORTB 0006                 _TRISA 0085                 _TRISB 0086                 _TRISC 0087  
               _TRISD 0088                 _TRISE 0089                 _vadc1 0076                 _vadc2 0078  
               _pause 07CF                 status 0003                 wtemp0 007E          __end_of_main 07A4  
              ??_main 0076                _ADCON0 001F                _ADCON1 009F                _ADRESH 001E  
              _ADRESL 009E                _CCPR1L 0015                ?_pause 0070                _CCPR2L 001B  
              _ANSELH 0189      __end_of_msecbase 07EB                pause@x 0072        __pcstackCOMMON 0070  
       __end_of_pause 07E0               ??_pause 0072            __pnvCOMMON 007A            __pmaintext 076E  
             _CCP1CON 0017               _CCP2CON 001D               _GO_DONE 00F9             ?_msecbase 0070  
        __size_of_ADC 0034          __size_of_PWM 002B  end_of_initialization 0736            ??_msecbase 0070  
 start_initialization 0732           __end_of_ADC 076E           __end_of_PWM 07CF          pause@usvalue 0070  
         __pbssCOMMON 0076     __size_of_msecbase 000B        __size_of_pause 0011              __ptext61 07A4  
            __ptext62 07CF              __ptext63 07E0              __ptext64 073A              __ptext65 0000  
       __size_of_main 0036              _msecbase 07E0            _OPTION_REG 0081  



HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Thu Apr 28 14:22:52 2022

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text141,local,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,delta=2
    10                           	psect	text143,local,class=CODE,delta=2
    11                           	psect	text148,local,class=CODE,delta=2
    12                           	psect	text151,local,class=CODE,delta=2
    13                           	psect	text152,local,class=CODE,delta=2
    14                           	psect	text154,local,class=CODE,delta=2
    15                           	psect	pa_nodes,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  000A                     	;#
    18                           
    19                           	psect	config
    20  2007  E0F4               	dw	57588	;#
    21  2008  FFFF               	dw	65535	;#
    22                           
    23                           	psect	text141
    24  0000                     __ptext141:	
    25  0005                     _PORTA	set	5
    26  0008                     _PORTD	set	8
    27  001A                     _RCREG	set	26
    28  0018                     _RCSTA	set	24
    29  0001                     _TMR0	set	1
    30  0019                     _TXREG	set	25
    31  0038                     _RC0	set	56
    32  003B                     _RC3	set	59
    33  003C                     _RC4	set	60
    34  0065                     _RCIF	set	101
    35  005A                     _T0IF	set	90
    36  0064                     _TXIF	set	100
    37  009F                     _ADCON1	set	159
    38  0081                     _OPTION_REG	set	129
    39  0099                     _SPBRG	set	153
    40  0085                     _TRISA	set	133
    41  0086                     _TRISB	set	134
    42  0087                     _TRISC	set	135
    43  0088                     _TRISD	set	136
    44  0089                     _TRISE	set	137
    45  0098                     _TXSTA	set	152
    46  043E                     _TRISC6	set	1086
    47  043F                     _TRISC7	set	1087
    48  0188                     _ANSEL	set	392
    49  0189                     _ANSELH	set	393
    50  0187                     _BAUDCTL	set	391
    51                           
    52                           	psect	strings
    53  0003                     __pstrings:	
    54  0003                     stringtab:	
    55                           ;	global	stringdir,stringtab,__stringbase
    56                           
    57  0003                     stringcode:	
    58                           ;	String table - string pointers are 1 byte each
    59                           
    60  0003                     stringdir:	
    61  0003  3000               	movlw	high stringdir
    62  0004  008A               	movwf	10
    63  0005  0804               	movf	4,w
    64  0006  0A84               	incf	4,f
    65  0007  0782               	addwf	2,f
    66  0008                     __stringbase:	
    67  0008  3400               	retlw	0
    68  0009                     STR_5:	
    69  0009  344C               	retlw	76	;'L'
    70  000A  3465               	retlw	101	;'e'
    71  000B  3474               	retlw	116	;'t'
    72  000C  3472               	retlw	114	;'r'
    73  000D  3461               	retlw	97	;'a'
    74  000E  343A               	retlw	58	;':'
    75  000F  3420               	retlw	32	;' '
    76  0010  345B               	retlw	91	;'['
    77  0011  3425               	retlw	37	;'%'
    78  0012  3463               	retlw	99	;'c'
    79  0013  345D               	retlw	93	;']'
    80  0014  340D               	retlw	13
    81  0015  340A               	retlw	10
    82  0016  3400               	retlw	0
    83  0017                     STR_4:	
    84  0017  3454               	retlw	84	;'T'
    85  0018  3465               	retlw	101	;'e'
    86  0019  3463               	retlw	99	;'c'
    87  001A  346C               	retlw	108	;'l'
    88  001B  3465               	retlw	101	;'e'
    89  001C  3461               	retlw	97	;'a'
    90  001D  343A               	retlw	58	;':'
    91  001E  340D               	retlw	13
    92  001F  340A               	retlw	10
    93  0020  3400               	retlw	0
    94  0021                     STR_6:	
    95  0021  344C               	retlw	76	;'L'
    96  0022  3465               	retlw	101	;'e'
    97  0023  3474               	retlw	116	;'t'
    98  0024  3472               	retlw	114	;'r'
    99  0025  3461               	retlw	97	;'a'
   100  0026  343A               	retlw	58	;':'
   101  0027  3400               	retlw	0
   102  0028                     STR_1:	
   103  0028  340D               	retlw	13
   104  0029  340A               	retlw	10
   105  002A  340A               	retlw	10
   106  002B  3400               	retlw	0
   107  0028                     
   108                           	psect	cinit
   109  066B                     start_initialization:	
   110  066B                     end_of_initialization:	
   111                           ;End of C runtime variable initialization code
   112                           
   113  066B  0183               	clrf	3
   114  066C  120A  118A  2F5C   	ljmp	_main	;jump to C main() function
   115                           
   116                           	psect	cstackCOMMON
   117  0070                     __pcstackCOMMON:	
   118  0070                     ?_lcd_init:	
   119  0070                     ?_lcd_clear:	
   120                           ; 0 bytes @ 0x0
   121                           
   122  0070                     ?_pause:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  0070                     ?_lcd_goto:	
   126                           ; 0 bytes @ 0x0
   127                           
   128  0070                     ?_lcd_puts:	
   129                           ; 0 bytes @ 0x0
   130                           
   131  0070                     ?_lcd_putch:	
   132                           ; 0 bytes @ 0x0
   133                           
   134  0070                     ?_msecbase:	
   135                           ; 0 bytes @ 0x0
   136                           
   137  0070                     ??_msecbase:	
   138                           ; 0 bytes @ 0x0
   139                           
   140  0070                     ?_putch:	
   141                           ; 0 bytes @ 0x0
   142                           
   143  0070                     ??_putch:	
   144                           ; 0 bytes @ 0x0
   145                           
   146  0070                     ??_getch:	
   147                           ; 0 bytes @ 0x0
   148                           
   149  0070                     ?_init_comms:	
   150                           ; 0 bytes @ 0x0
   151                           
   152  0070                     ??_init_comms:	
   153                           ; 0 bytes @ 0x0
   154                           
   155  0070                     ?_main:	
   156                           ; 0 bytes @ 0x0
   157                           
   158  0070                     ?_lcd_write:	
   159                           ; 0 bytes @ 0x0
   160                           
   161  0070                     ?_getch:	
   162                           ; 0 bytes @ 0x0
   163                           
   164  0070                     putch@byte:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0070                     pause@usvalue:	
   168                           ; 1 bytes @ 0x0
   169                           
   170                           
   171                           ; 2 bytes @ 0x0
   172  0070                     	ds	1
   173  0071                     ?_printf:	
   174                           
   175                           ; 2 bytes @ 0x1
   176  0071                     	ds	1
   177  0072                     ??_pause:	
   178  0072                     pause@x:	
   179                           ; 0 bytes @ 0x2
   180                           
   181                           
   182                           ; 2 bytes @ 0x2
   183  0072                     	ds	1
   184  0073                     ??_printf:	
   185  0073                     printf@ap:	
   186                           ; 0 bytes @ 0x3
   187                           
   188                           
   189                           ; 1 bytes @ 0x3
   190  0073                     	ds	1
   191  0074                     ??_lcd_write:	
   192  0074                     lcd_write@c:	
   193                           ; 0 bytes @ 0x4
   194                           
   195  0074                     printf@f:	
   196                           ; 1 bytes @ 0x4
   197                           
   198                           
   199                           ; 1 bytes @ 0x4
   200  0074                     	ds	1
   201  0075                     ??_lcd_init:	
   202  0075                     ??_lcd_clear:	
   203                           ; 0 bytes @ 0x5
   204                           
   205  0075                     ??_lcd_goto:	
   206                           ; 0 bytes @ 0x5
   207                           
   208  0075                     ??_lcd_puts:	
   209                           ; 0 bytes @ 0x5
   210                           
   211  0075                     ??_lcd_putch:	
   212                           ; 0 bytes @ 0x5
   213                           
   214  0075                     lcd_puts@s:	
   215                           ; 0 bytes @ 0x5
   216                           
   217  0075                     lcd_putch@c:	
   218                           ; 1 bytes @ 0x5
   219                           
   220  0075                     lcd_goto@pos:	
   221                           ; 1 bytes @ 0x5
   222                           
   223  0075                     printf@c:	
   224                           ; 1 bytes @ 0x5
   225                           
   226                           
   227                           ; 1 bytes @ 0x5
   228  0075                     	ds	1
   229  0076                     ??_main:	
   230  0076                     main@input:	
   231                           ; 0 bytes @ 0x6
   232                           
   233                           
   234                           ; 1 bytes @ 0x6
   235  0076                     	ds	1
   236  0077                     main@count:	
   237                           
   238                           ; 1 bytes @ 0x7
   239  0077                     	ds	1
   240                           
   241                           	psect	maintext
   242  075C                     __pmaintext:	
   243 ;;Data sizes: Strings 35, constant 0, data 0, bss 0, persistent 0 stack 0
   244 ;;Auto spaces:   Size  Autos    Used
   245 ;; COMMON          14      8       8
   246 ;; BANK0           80      0       0
   247 ;; BANK1           80      0       0
   248 ;; BANK3           96      0       0
   249 ;; BANK2           96      0       0
   250 ;;
   251 ;; Pointer list with targets:
   252 ;; printf@f	PTR const unsigned char  size(1) Largest target is 14
   253 ;;		 -> STR_5(CODE[14]), STR_4(CODE[10]), STR_3(CODE[4]), STR_2(CODE[4]), 
   254 ;;		 -> STR_1(CODE[4]), 
   255 ;;
   256 ;; ?_printf	int  size(1) Largest target is 0
   257 ;;
   258 ;; printf@ap	PTR void [1] size(1) Largest target is 2
   259 ;;		 -> ?_printf(COMMON[2]), 
   260 ;;
   261 ;; S1861$_cp	PTR const unsigned char  size(1) Largest target is 0
   262 ;;
   263 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   264 ;;
   265 ;; lcd_puts@s	PTR const unsigned char  size(1) Largest target is 7
   266 ;;		 -> STR_6(CODE[7]), 
   267 ;;
   268 ;;
   269 ;; Critical Paths under _main in COMMON
   270 ;;
   271 ;;   _main->_lcd_init
   272 ;;   _main->_lcd_goto
   273 ;;   _main->_printf
   274 ;;   _main->_lcd_puts
   275 ;;   _main->_lcd_putch
   276 ;;   _lcd_init->_lcd_write
   277 ;;   _lcd_putch->_lcd_write
   278 ;;   _lcd_puts->_lcd_write
   279 ;;   _lcd_goto->_lcd_write
   280 ;;   _lcd_clear->_lcd_write
   281 ;;   _lcd_write->_pause
   282 ;;   _printf->_putch
   283 ;;
   284 ;; Critical Paths under _main in BANK0
   285 ;;
   286 ;;   None.
   287 ;;
   288 ;; Critical Paths under _main in BANK1
   289 ;;
   290 ;;   None.
   291 ;;
   292 ;; Critical Paths under _main in BANK3
   293 ;;
   294 ;;   None.
   295 ;;
   296 ;; Critical Paths under _main in BANK2
   297 ;;
   298 ;;   None.
   299 ;;
   300 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   301 ;;
   302 ;;
   303 ;;Call Graph Tables:
   304 ;;
   305 ;; ---------------------------------------------------------------------------------
   306 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   307 ;; ---------------------------------------------------------------------------------
   308 ;; (0) _main                                                 2     2      0     840
   309 ;;                                              6 COMMON     2     2      0
   310 ;;                           _lcd_init
   311 ;;                          _lcd_clear
   312 ;;                         _init_comms
   313 ;;                              _pause
   314 ;;                              _putch
   315 ;;                           _lcd_goto
   316 ;;                             _printf
   317 ;;                              _getch
   318 ;;                           _lcd_puts
   319 ;;                          _lcd_putch
   320 ;; ---------------------------------------------------------------------------------
   321 ;; (1) _lcd_init                                             1     1      0     195
   322 ;;                                              5 COMMON     1     1      0
   323 ;;                              _pause
   324 ;;                          _lcd_write
   325 ;;                          _lcd_clear
   326 ;; ---------------------------------------------------------------------------------
   327 ;; (1) _lcd_putch                                            1     1      0      75
   328 ;;                                              5 COMMON     1     1      0
   329 ;;                          _lcd_write
   330 ;; ---------------------------------------------------------------------------------
   331 ;; (1) _lcd_puts                                             1     1      0      90
   332 ;;                                              5 COMMON     1     1      0
   333 ;;                          _lcd_write
   334 ;; ---------------------------------------------------------------------------------
   335 ;; (1) _lcd_goto                                             1     1      0      75
   336 ;;                                              5 COMMON     1     1      0
   337 ;;                          _lcd_write
   338 ;; ---------------------------------------------------------------------------------
   339 ;; (1) _lcd_clear                                            0     0      0      90
   340 ;;                          _lcd_write
   341 ;;                              _pause
   342 ;; ---------------------------------------------------------------------------------
   343 ;; (2) _lcd_write                                            1     1      0      60
   344 ;;                                              4 COMMON     1     1      0
   345 ;;                              _pause
   346 ;; ---------------------------------------------------------------------------------
   347 ;; (1) _printf                                              11     9      2     105
   348 ;;                                              1 COMMON     5     3      2
   349 ;;                              _putch
   350 ;; ---------------------------------------------------------------------------------
   351 ;; (3) _pause                                                4     2      2      30
   352 ;;                                              0 COMMON     4     2      2
   353 ;;                           _msecbase
   354 ;; ---------------------------------------------------------------------------------
   355 ;; (4) _msecbase                                             0     0      0       0
   356 ;; ---------------------------------------------------------------------------------
   357 ;; (1) _init_comms                                           0     0      0       0
   358 ;; ---------------------------------------------------------------------------------
   359 ;; (1) _getch                                                0     0      0       0
   360 ;; ---------------------------------------------------------------------------------
   361 ;; (2) _putch                                                1     1      0      15
   362 ;;                                              0 COMMON     1     1      0
   363 ;; ---------------------------------------------------------------------------------
   364 ;; Estimated maximum stack depth 4
   365 ;; ---------------------------------------------------------------------------------
   366 ;; Call Graph Graphs:
   367 ;; _main (ROOT)
   368 ;;   _lcd_init
   369 ;;     _pause
   370 ;;       _msecbase
   371 ;;     _lcd_write
   372 ;;       _pause
   373 ;;         _msecbase
   374 ;;     _lcd_clear
   375 ;;       _lcd_write
   376 ;;         _pause
   377 ;;           _msecbase
   378 ;;       _pause
   379 ;;         _msecbase
   380 ;;   _lcd_clear
   381 ;;     _lcd_write
   382 ;;       _pause
   383 ;;         _msecbase
   384 ;;     _pause
   385 ;;       _msecbase
   386 ;;   _init_comms
   387 ;;   _pause
   388 ;;     _msecbase
   389 ;;   _putch
   390 ;;   _lcd_goto
   391 ;;     _lcd_write
   392 ;;       _pause
   393 ;;         _msecbase
   394 ;;   _printf
   395 ;;     _putch
   396 ;;   _getch
   397 ;;   _lcd_puts
   398 ;;     _lcd_write
   399 ;;       _pause
   400 ;;         _msecbase
   401 ;;   _lcd_putch
   402 ;;     _lcd_write
   403 ;;       _pause
   404 ;;         _msecbase
   405 ;;
   406 ;; Address spaces:
   407 ;;Name               Size   Autos  Total    Cost      Usage
   408 ;;BITCOMMON            E      0       0       0        0.0%
   409 ;;EEDATA             100      0       0       0        0.0%
   410 ;;NULL                 0      0       0       0        0.0%
   411 ;;CODE                 0      0       0       0        0.0%
   412 ;;COMMON               E      8       8       1       57.1%
   413 ;;BITSFR0              0      0       0       1        0.0%
   414 ;;SFR0                 0      0       0       1        0.0%
   415 ;;BITSFR1              0      0       0       2        0.0%
   416 ;;SFR1                 0      0       0       2        0.0%
   417 ;;STACK                0      0       5       2        0.0%
   418 ;;ABS                  0      0       0       3        0.0%
   419 ;;BITBANK0            50      0       0       4        0.0%
   420 ;;BITSFR3              0      0       0       4        0.0%
   421 ;;SFR3                 0      0       0       4        0.0%
   422 ;;BANK0               50      0       0       5        0.0%
   423 ;;BITSFR2              0      0       0       5        0.0%
   424 ;;SFR2                 0      0       0       5        0.0%
   425 ;;BITBANK1            50      0       0       6        0.0%
   426 ;;BANK1               50      0       0       7        0.0%
   427 ;;BITBANK3            60      0       0       8        0.0%
   428 ;;BANK3               60      0       0       9        0.0%
   429 ;;BITBANK2            60      0       0      10        0.0%
   430 ;;BANK2               60      0       0      11        0.0%
   431 ;;DATA                 0      0       0      12        0.0%
   432                           
   433                           
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 73 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;  count           1    7[COMMON] unsigned char 
   441 ;;  input           1    6[COMMON] unsigned char 
   442 ;; Return value:  Size  Location     Type
   443 ;;		None               void
   444 ;; Registers used:
   445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   446 ;; Tracked objects:
   447 ;;		On entry : 17F/0
   448 ;;		On exit  : 17F/0
   449 ;;		Unchanged: FFE80/0
   450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   451 ;;      Params:         0       0       0       0       0
   452 ;;      Locals:         2       0       0       0       0
   453 ;;      Temps:          0       0       0       0       0
   454 ;;      Totals:         2       0       0       0       0
   455 ;;Total ram usage:        2 bytes
   456 ;; Hardware stack levels required when called:    5
   457 ;; This function calls:
   458 ;;		_lcd_init
   459 ;;		_lcd_clear
   460 ;;		_init_comms
   461 ;;		_pause
   462 ;;		_putch
   463 ;;		_lcd_goto
   464 ;;		_printf
   465 ;;		_getch
   466 ;;		_lcd_puts
   467 ;;		_lcd_putch
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472  075C                     _main:	
   473                           
   474                           ;USART2.c: 75: ANSEL = 0x00;
   475                           
   476                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   477  075C  1683               	bsf	3,5	;RP0=1, select bank3
   478  075D  1703               	bsf	3,6	;RP1=1, select bank3
   479  075E  0188               	clrf	8	;volatile
   480                           
   481                           ;USART2.c: 76: ANSELH = 0x00;
   482  075F  0189               	clrf	9	;volatile
   483                           
   484                           ;USART2.c: 78: TRISA = 0x00;
   485  0760  1303               	bcf	3,6	;RP1=0, select bank1
   486  0761  0185               	clrf	5	;volatile
   487                           
   488                           ;USART2.c: 79: TRISB = 0x00;
   489  0762  0186               	clrf	6	;volatile
   490                           
   491                           ;USART2.c: 80: TRISC = 0x00;
   492  0763  0187               	clrf	7	;volatile
   493                           
   494                           ;USART2.c: 81: TRISD = 0x00;
   495  0764  0188               	clrf	8	;volatile
   496                           
   497                           ;USART2.c: 82: TRISE = 0x07;
   498  0765  3007               	movlw	7
   499  0766  0089               	movwf	9	;volatile
   500                           
   501                           ;USART2.c: 83: ADCON1 = 0x80;
   502  0767  3080               	movlw	128
   503  0768  009F               	movwf	31	;volatile
   504                           
   505                           ;USART2.c: 84: PORTA = 0X00;
   506  0769  1283               	bcf	3,5	;RP0=0, select bank0
   507  076A  0185               	clrf	5	;volatile
   508                           
   509                           ;USART2.c: 85: lcd_init();
   510  076B  120A  118A  26E1   	fcall	_lcd_init
      +       120A  118A         
   511                           
   512                           ;USART2.c: 86: lcd_clear();
   513  0770  120A  118A  2748   	fcall	_lcd_clear
      +       120A  118A         
   514                           
   515                           ;USART2.c: 88: unsigned char input;
   516                           ;USART2.c: 92: init_comms();
   517  0775  120A  118A  2675   	fcall	_init_comms
      +       120A  118A         
   518                           
   519                           ;USART2.c: 93: pause(10);
   520  077A  300A               	movlw	10
   521  077B  00F0               	movwf	?_pause
   522  077C  01F1               	clrf	?_pause+1
   523  077D  120A  118A  2717   	fcall	_pause
      +       120A  118A         
   524                           
   525                           ;USART2.c: 95: {
   526                           ;USART2.c: 96: unsigned char count;
   527                           ;USART2.c: 97: for (count = 0x31; count <= 0x39; count = count +1)
   528  0782  3031               	movlw	49
   529  0783  00F7               	movwf	main@count
   530  0784                     l2615:	
   531                           
   532                           ;USART2.c: 98: {
   533                           ;USART2.c: 99: putch(count);
   534  0784  0877               	movf	main@count,w
   535  0785  120A  118A  26B8   	fcall	_putch
      +       120A  118A         
   536                           
   537                           ;USART2.c: 100: pause(300);
   538  078A  302C               	movlw	44
   539  078B  00F0               	movwf	?_pause
   540  078C  3001               	movlw	1
   541  078D  00F1               	movwf	?_pause+1
   542  078E  120A  118A  2717   	fcall	_pause
      +       120A  118A         
   543                           
   544                           ;USART2.c: 101: lcd_goto(0x00);
   545  0793  3000               	movlw	0
   546  0794  120A  118A  26C3   	fcall	_lcd_goto
      +       120A  118A         
   547  0799  303A               	movlw	58
   548  079A  0AF7               	incf	main@count,f
   549  079B  0277               	subwf	main@count,w
   550  079C  1C03               	skipc
   551  079D  2F84               	goto	l2615
   552                           
   553                           ;USART2.c: 102: }
   554                           ;USART2.c: 103: printf("\r\n\n");
   555  079E  3020               	movlw	(STR_1-__stringbase)& (0+255)
   556  079F  120A  118A  2684   	fcall	_printf
      +       120A  118A         
   557                           
   558                           ;USART2.c: 105: for (count = 0x61; count <= 0x7A; count = count +1)
   559  07A4  3061               	movlw	97
   560  07A5  00F7               	movwf	main@count
   561  07A6                     l2629:	
   562                           
   563                           ;USART2.c: 106: {
   564                           ;USART2.c: 107: putch(count);
   565  07A6  0877               	movf	main@count,w
   566  07A7  120A  118A  26B8   	fcall	_putch
      +       120A  118A         
   567                           
   568                           ;USART2.c: 108: pause(300);
   569  07AC  302C               	movlw	44
   570  07AD  00F0               	movwf	?_pause
   571  07AE  3001               	movlw	1
   572  07AF  00F1               	movwf	?_pause+1
   573  07B0  120A  118A  2717   	fcall	_pause
      +       120A  118A         
   574  07B5  307B               	movlw	123
   575  07B6  0AF7               	incf	main@count,f
   576  07B7  0277               	subwf	main@count,w
   577  07B8  1C03               	skipc
   578  07B9  2FA6               	goto	l2629
   579                           
   580                           ;USART2.c: 109: }
   581                           ;USART2.c: 110: printf("\r\n\n");
   582  07BA  3020               	movlw	(STR_1-__stringbase)& (0+255)
   583  07BB  120A  118A  2684   	fcall	_printf
      +       120A  118A         
   584                           
   585                           ;USART2.c: 111: for (count = 0x41; count <= 0x5A; count = count +1)
   586  07C0  3041               	movlw	65
   587  07C1  00F7               	movwf	main@count
   588  07C2                     l2643:	
   589                           
   590                           ;USART2.c: 112: {
   591                           ;USART2.c: 113: putch(count);
   592  07C2  0877               	movf	main@count,w
   593  07C3  120A  118A  26B8   	fcall	_putch
      +       120A  118A         
   594  07C8  305B               	movlw	91
   595  07C9  0AF7               	incf	main@count,f
   596  07CA  0277               	subwf	main@count,w
   597  07CB  1C03               	skipc
   598  07CC  2FC2               	goto	l2643
   599  07CD                     l2649:	
   600                           
   601                           ;USART2.c: 119: {
   602                           ;USART2.c: 124: printf("\r\n\n");
   603  07CD  3020               	movlw	(STR_1-__stringbase)& (0+255)
   604  07CE  120A  118A  2684   	fcall	_printf
      +       120A  118A         
   605                           
   606                           ;USART2.c: 125: printf("Teclea:\r\n");
   607  07D3  300F               	movlw	(STR_4-__stringbase)& (0+255)
   608  07D4  120A  118A  2684   	fcall	_printf
      +       120A  118A         
   609                           
   610                           ;USART2.c: 126: input = getch();
   611  07D9  120A  118A  266F   	fcall	_getch
      +       120A  118A         
   612  07DE  00F6               	movwf	main@input
   613                           
   614                           ;USART2.c: 127: printf("Letra: [%c]\r\n",input);
   615  07DF  00F1               	movwf	?_printf
   616  07E0  3001               	movlw	(STR_5-__stringbase)& (0+255)
   617  07E1  01F2               	clrf	?_printf+1
   618  07E2  120A  118A  2684   	fcall	_printf
      +       120A  118A         
   619                           
   620                           ;USART2.c: 128: lcd_goto(0x00);
   621  07E7  3000               	movlw	0
   622  07E8  120A  118A  26C3   	fcall	_lcd_goto
      +       120A  118A         
   623                           
   624                           ;USART2.c: 129: lcd_puts("Letra:");
   625  07ED  3019               	movlw	(STR_6-__stringbase)& (0+255)
   626  07EE  120A  118A  26C9   	fcall	_lcd_puts
      +       120A  118A         
   627                           
   628                           ;USART2.c: 130: lcd_goto(0x06);
   629  07F3  3006               	movlw	6
   630  07F4  120A  118A  26C3   	fcall	_lcd_goto
      +       120A  118A         
   631                           
   632                           ;USART2.c: 131: lcd_putch(input);
   633  07F9  0876               	movf	main@input,w
   634  07FA  120A  118A  26C0   	fcall	_lcd_putch
      +       120A  118A         
   635  07FF  2FCD               	goto	l2649
   636  0800                     __end_of_main:	
   637                           
   638                           	psect	text143
   639  06C0                     __ptext143:	
   640 ;; =============== function _lcd_init ends ============
   641                           
   642                           
   643 ;; *************** function _lcd_putch *****************
   644 ;; Defined at:
   645 ;;		line 164 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  c               1    wreg     unsigned char 
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  c               1    5[COMMON] unsigned char 
   650 ;; Return value:  Size  Location     Type
   651 ;;		None               void
   652 ;; Registers used:
   653 ;;		wreg, status,2, status,0, pclath, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 17F/0
   656 ;;		On exit  : 17F/0
   657 ;;		Unchanged: FFE80/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   659 ;;      Params:         0       0       0       0       0
   660 ;;      Locals:         1       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0
   662 ;;      Totals:         1       0       0       0       0
   663 ;;Total ram usage:        1 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    3
   666 ;; This function calls:
   667 ;;		_lcd_write
   668 ;; This function is called by:
   669 ;;		_main
   670 ;; This function uses a non-reentrant model
   671 ;;
   672  06C0                     _lcd_putch:	
   673                           
   674                           ; Regs used in _lcd_putch: [wreg+status,2+status,0+pclath+cstack]
   675                           ;lcd_putch@c stored from wreg
   676  06C0  00F5               	movwf	lcd_putch@c
   677                           
   678                           ;USART2.c: 165: RC3 = 1;
   679  06C1  1587               	bsf	7,3
   680                           
   681                           ;USART2.c: 166: lcd_write( c );
   682  06C2  2F28               	ljmp	_lcd_write
   683  06C3                     __end_of_lcd_putch:	
   684  06C3                     __ptext145:	
   685 ;; =============== function _lcd_puts ends ============
   686                           
   687                           
   688 ;; *************** function _lcd_goto *****************
   689 ;; Defined at:
   690 ;;		line 170 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  pos             1    wreg     unsigned char 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  pos             1    5[COMMON] unsigned char 
   695 ;; Return value:  Size  Location     Type
   696 ;;		None               void
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, pclath, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 11F/0
   701 ;;		On exit  : 17F/0
   702 ;;		Unchanged: FFE80/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   704 ;;      Params:         0       0       0       0       0
   705 ;;      Locals:         1       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0
   707 ;;      Totals:         1       0       0       0       0
   708 ;;Total ram usage:        1 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    3
   711 ;; This function calls:
   712 ;;		_lcd_write
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717  06C3                     _lcd_goto:	
   718                           
   719                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
   720                           ;lcd_goto@pos stored from wreg
   721  06C3  00F5               	movwf	lcd_goto@pos
   722  06C4  2759               	call	PL3	;select bank 0
   723                           
   724                           ;USART2.c: 171: RC3 = 0;
   725  06C5  1187               	bcf	7,3
   726                           
   727                           ;USART2.c: 172: lcd_write(0x80 + pos);
   728  06C6  0875               	movf	lcd_goto@pos,w
   729  06C7  3E80               	addlw	128
   730  06C8  2F28               	ljmp	_lcd_write
   731  06C9                     __end_of_lcd_goto:	
   732  06C9                     __ptext144:	
   733 ;; =============== function _lcd_putch ends ============
   734                           
   735                           
   736 ;; *************** function _lcd_puts *****************
   737 ;; Defined at:
   738 ;;		line 157 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  s               1    wreg     PTR const unsigned char 
   741 ;;		 -> STR_6(7), 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  s               1    5[COMMON] PTR const unsigned char 
   744 ;;		 -> STR_6(7), 
   745 ;; Return value:  Size  Location     Type
   746 ;;		None               void
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 17F/0
   751 ;;		On exit  : 17F/0
   752 ;;		Unchanged: FFE80/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   754 ;;      Params:         0       0       0       0       0
   755 ;;      Locals:         1       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0
   757 ;;      Totals:         1       0       0       0       0
   758 ;;Total ram usage:        1 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    3
   761 ;; This function calls:
   762 ;;		_lcd_write
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767  06C9                     _lcd_puts:	
   768                           
   769                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   770                           ;lcd_puts@s stored from wreg
   771  06C9  00F5               	movwf	lcd_puts@s
   772                           
   773                           ;USART2.c: 158: RC3 = 1;
   774  06CA  1587               	bsf	7,3
   775  06CB                     l2549:	
   776                           ;USART2.c: 159: while(*s)
   777                           
   778  06CB  0875               	movf	lcd_puts@s,w
   779  06CC  0084               	movwf	4
   780  06CD  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
   781  06D2  3800               	iorlw	0
   782  06D3  1903               	btfsc	3,2
   783  06D4  0008               	return
   784                           
   785                           ;USART2.c: 160: lcd_write(*s++);
   786  06D5  0875               	movf	lcd_puts@s,w
   787  06D6  0084               	movwf	4
   788  06D7  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
   789  06DC  2728  120A  118A   	fcall	_lcd_write
   790  06DF  0AF5               	incf	lcd_puts@s,f
   791  06E0  2ECB               	goto	l2549
   792  06E1                     __end_of_lcd_puts:	
   793  06E1                     __ptext142:	
   794 ;; =============== function _main ends ============
   795                           
   796                           
   797 ;; *************** function _lcd_init *****************
   798 ;; Defined at:
   799 ;;		line 176 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  init_value      1    0        unsigned char 
   804 ;; Return value:  Size  Location     Type
   805 ;;		None               void
   806 ;; Registers used:
   807 ;;		wreg, status,2, status,0, pclath, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : 17F/0
   810 ;;		On exit  : 17F/0
   811 ;;		Unchanged: FFE80/0
   812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   813 ;;      Params:         0       0       0       0       0
   814 ;;      Locals:         1       0       0       0       0
   815 ;;      Temps:          0       0       0       0       0
   816 ;;      Totals:         1       0       0       0       0
   817 ;;Total ram usage:        1 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    4
   820 ;; This function calls:
   821 ;;		_pause
   822 ;;		_lcd_write
   823 ;;		_lcd_clear
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828  06E1                     _lcd_init:	
   829  06E1  300F               	movlw	15
   830                           
   831                           ;USART2.c: 181: RC3 = 0;
   832                           
   833                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   834  06E2  1187               	bcf	7,3
   835                           
   836                           ;USART2.c: 182: RC0 = 0;
   837  06E3  1007               	bcf	7,0
   838                           
   839                           ;USART2.c: 183: RC4 = 0;
   840  06E4  1207               	bcf	7,4
   841                           
   842                           ;USART2.c: 185: pause(15);
   843  06E5  00F0               	movwf	?_pause
   844  06E6  01F1               	clrf	?_pause+1
   845  06E7  2717  120A  118A   	fcall	_pause
   846                           
   847                           ;USART2.c: 186: PORTD = init_value;
   848  06EA  3003               	movlw	3
   849  06EB  2759               	call	PL3	;select bank 0
   850  06EC  0088               	movwf	8	;volatile
   851  06ED  300A               	movlw	10
   852                           
   853                           ;USART2.c: 187: ((RC0 = 1),(RC0=0));
   854  06EE  1407               	bsf	7,0
   855  06EF  1007               	bcf	7,0
   856                           
   857                           ;USART2.c: 188: pause(10);
   858  06F0  00F0               	movwf	?_pause
   859  06F1  01F1               	clrf	?_pause+1
   860  06F2  2717  120A  118A   	fcall	_pause
   861                           
   862                           ;USART2.c: 189: ((RC0 = 1),(RC0=0));
   863                           
   864                           ;USART2.c: 190: pause(10);
   865  06F5  2751  120A  118A   	fcall	PL2	;call to abstracted procedure
   866  06F8  2717  120A  118A   	fcall	_pause
   867                           
   868                           ;USART2.c: 191: ((RC0 = 1),(RC0=0));
   869                           
   870                           ;USART2.c: 192: pause(10);
   871  06FB  2751  120A  118A   	fcall	PL2	;call to abstracted procedure
   872  06FE  2717  120A  118A   	fcall	_pause
   873                           
   874                           ;USART2.c: 193: PORTD= 2;
   875  0701  3002               	movlw	2
   876  0702  2759               	call	PL3	;select bank 0
   877  0703  0088               	movwf	8	;volatile
   878  0704  3028               	movlw	40
   879                           
   880                           ;USART2.c: 194: ((RC0 = 1),(RC0=0));
   881  0705  1407               	bsf	7,0
   882  0706  1007               	bcf	7,0
   883                           
   884                           ;USART2.c: 196: lcd_write(0x28);
   885  0707  2728  120A  118A   	fcall	_lcd_write
   886                           
   887                           ;USART2.c: 197: lcd_write(0x0C);
   888  070A  300C               	movlw	12
   889  070B  2728  120A  118A   	fcall	_lcd_write
   890                           
   891                           ;USART2.c: 198: lcd_write(0x0F);
   892  070E  300F               	movlw	15
   893  070F  2728  120A  118A   	fcall	_lcd_write
   894                           
   895                           ;USART2.c: 199: lcd_clear();
   896  0712  2748  120A  118A   	fcall	_lcd_clear
   897                           
   898                           ;USART2.c: 200: lcd_write(0x06);
   899  0715  3006               	movlw	6
   900  0716  2F28               	ljmp	_lcd_write
   901  0717                     __end_of_lcd_init:	
   902  0717                     __ptext149:	
   903 ;; =============== function _printf ends ============
   904                           
   905                           
   906 ;; *************** function _pause *****************
   907 ;; Defined at:
   908 ;;		line 204 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  usvalue         2    0[COMMON] unsigned short 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  x               2    2[COMMON] unsigned short 
   913 ;; Return value:  Size  Location     Type
   914 ;;		None               void
   915 ;; Registers used:
   916 ;;		wreg, status,2, status,0, pclath, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : 11F/60
   919 ;;		On exit  : 11F/0
   920 ;;		Unchanged: FFE80/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   922 ;;      Params:         2       0       0       0       0
   923 ;;      Locals:         2       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0
   925 ;;      Totals:         4       0       0       0       0
   926 ;;Total ram usage:        4 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    1
   929 ;; This function calls:
   930 ;;		_msecbase
   931 ;; This function is called by:
   932 ;;		_main
   933 ;;		_lcd_write
   934 ;;		_lcd_clear
   935 ;;		_lcd_init
   936 ;; This function uses a non-reentrant model
   937 ;;
   938  0717                     _pause:	
   939  0717                     l2495:	
   940                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
   941                           
   942                           
   943                           ;USART2.c: 205: unsigned short x;
   944                           ;USART2.c: 207: for (x=0; x<=usvalue; x++)
   945  0717  01F2               	clrf	pause@x
   946  0718  01F3               	clrf	pause@x+1
   947  0719                     l2501:	
   948  0719  0873               	movf	pause@x+1,w
   949  071A  0271               	subwf	pause@usvalue+1,w
   950  071B  1D03               	skipz
   951  071C  2F1F               	goto	u45
   952  071D  0872               	movf	pause@x,w
   953  071E  0270               	subwf	pause@usvalue,w
   954  071F                     u45:	
   955  071F  1C03               	btfss	3,0
   956  0720  0008               	return
   957                           
   958                           ;USART2.c: 208: {
   959                           ;USART2.c: 209: msecbase();
   960  0721  273B  120A  118A   	fcall	_msecbase
   961  0724  0AF2               	incf	pause@x,f
   962  0725  1903               	skipnz
   963  0726  0AF3               	incf	pause@x+1,f
   964  0727  2F19               	goto	l2501
   965  0728                     __end_of_pause:	
   966  0728                     __ptext147:	
   967 ;; =============== function _lcd_clear ends ============
   968                           
   969                           
   970 ;; *************** function _lcd_write *****************
   971 ;; Defined at:
   972 ;;		line 141 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  c               1    wreg     unsigned char 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  c               1    4[COMMON] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;		None               void
   979 ;; Registers used:
   980 ;;		wreg, status,2, status,0, pclath, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 11F/0
   983 ;;		On exit  : 17F/0
   984 ;;		Unchanged: FFE80/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         1       0       0       0       0
   988 ;;      Temps:          0       0       0       0       0
   989 ;;      Totals:         1       0       0       0       0
   990 ;;Total ram usage:        1 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    2
   993 ;; This function calls:
   994 ;;		_pause
   995 ;; This function is called by:
   996 ;;		_lcd_clear
   997 ;;		_lcd_puts
   998 ;;		_lcd_putch
   999 ;;		_lcd_goto
  1000 ;;		_lcd_init
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003  0728                     _lcd_write:	
  1004                           
  1005                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1006                           ;lcd_write@c stored from wreg
  1007  0728  00F4               	movwf	lcd_write@c
  1008                           
  1009                           ;USART2.c: 142: pause(1);
  1010  0729  01F0               	clrf	?_pause
  1011  072A  0AF0               	incf	?_pause,f
  1012  072B  01F1               	clrf	?_pause+1
  1013  072C  2717  120A  118A   	fcall	_pause
  1014                           
  1015                           ;USART2.c: 143: PORTD = ( ( c >> 4) & 0x0F);
  1016  072F  0E74               	swapf	lcd_write@c,w
  1017  0730  390F               	andlw	15
  1018  0731  2759               	call	PL3	;select bank 0
  1019  0732  0088               	movwf	8	;volatile
  1020                           
  1021                           ;USART2.c: 144: ((RC0 = 1),(RC0=0));
  1022  0733  1407               	bsf	7,0
  1023  0734  1007               	bcf	7,0
  1024                           
  1025                           ;USART2.c: 145: PORTD = (c & 0x0F);
  1026  0735  0874               	movf	lcd_write@c,w
  1027  0736  390F               	andlw	15
  1028  0737  0088               	movwf	8	;volatile
  1029                           
  1030                           ;USART2.c: 146: ((RC0 = 1),(RC0=0));
  1031  0738  1407               	bsf	7,0
  1032  0739  1007               	bcf	7,0
  1033  073A  0008               	return
  1034  073B                     __end_of_lcd_write:	
  1035  073B                     __ptext150:	
  1036 ;; =============== function _pause ends ============
  1037                           
  1038                           
  1039 ;; *************** function _msecbase *****************
  1040 ;; Defined at:
  1041 ;;		line 214 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;		None               void
  1048 ;; Registers used:
  1049 ;;		wreg
  1050 ;; Tracked objects:
  1051 ;;		On entry : 11F/60
  1052 ;;		On exit  : 11F/0
  1053 ;;		Unchanged: FFE80/0
  1054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1055 ;;      Params:         0       0       0       0       0
  1056 ;;      Locals:         0       0       0       0       0
  1057 ;;      Temps:          0       0       0       0       0
  1058 ;;      Totals:         0       0       0       0       0
  1059 ;;Total ram usage:        0 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_pause
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067  073B                     _msecbase:	
  1068                           
  1069                           ;USART2.c: 215: OPTION_REG = 0b11010001;
  1070                           
  1071                           ; Regs used in _msecbase: [wreg]
  1072  073B  30D1               	movlw	209
  1073  073C  1683               	bsf	3,5	;RP0=1, select bank1
  1074  073D  1303               	bcf	3,6	;RP1=0, select bank1
  1075  073E  0081               	movwf	1	;volatile
  1076                           
  1077                           ;USART2.c: 216: TMR0 = 0x0E;
  1078  073F  300E               	movlw	14
  1079  0740  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0741  0081               	movwf	1	;volatile
  1081                           
  1082                           ;USART2.c: 217: TMR0 = 0x8E;
  1083  0742  308E               	movlw	142
  1084  0743  0081               	movwf	1	;volatile
  1085  0744                     l1102:	
  1086                           ;USART2.c: 218: while(!T0IF);
  1087                           
  1088  0744  1D0B               	btfss	11,2
  1089  0745  2F44               	goto	l1102
  1090                           
  1091                           ;USART2.c: 219: T0IF = 0;
  1092  0746  110B               	bcf	11,2
  1093  0747  0008               	return
  1094  0748                     __end_of_msecbase:	
  1095  0748                     __ptext146:	
  1096 ;; =============== function _lcd_goto ends ============
  1097                           
  1098                           
  1099 ;; *************** function _lcd_clear *****************
  1100 ;; Defined at:
  1101 ;;		line 150 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;		None
  1106 ;; Return value:  Size  Location     Type
  1107 ;;		None               void
  1108 ;; Registers used:
  1109 ;;		wreg, status,2, status,0, pclath, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 17F/0
  1112 ;;		On exit  : 11F/0
  1113 ;;		Unchanged: FFE80/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1115 ;;      Params:         0       0       0       0       0
  1116 ;;      Locals:         0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0
  1118 ;;      Totals:         0       0       0       0       0
  1119 ;;Total ram usage:        0 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    3
  1122 ;; This function calls:
  1123 ;;		_lcd_write
  1124 ;;		_pause
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;;		_lcd_init
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130  0748                     _lcd_clear:	
  1131  0748  3001               	movlw	1
  1132                           
  1133                           ;USART2.c: 151: RC3 = 0;
  1134                           
  1135                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1136  0749  1187               	bcf	7,3
  1137                           
  1138                           ;USART2.c: 152: lcd_write(0x01);
  1139  074A  2728  120A  118A   	fcall	_lcd_write
  1140                           
  1141                           ;USART2.c: 153: pause (2);
  1142  074D  3002               	movlw	2
  1143  074E  00F0               	movwf	?_pause
  1144  074F  01F1               	clrf	?_pause+1
  1145  0750  2F17               	ljmp	l2495
  1146  0751                     __end_of_lcd_clear:	
  1147  0751                     PL2:	
  1148  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1149  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1150  0753  300A               	movlw	10
  1151  0754  1407               	bsf	7,0
  1152  0755  1007               	bcf	7,0
  1153  0756  00F0               	movwf	?_pause
  1154  0757  01F1               	clrf	?_pause+1
  1155  0758  0008               	return
  1156  0759                     PL3:	
  1157  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1158  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1159  075B  0008               	return
  1160                           
  1161                           	psect	text148
  1162  0684                     __ptext148:	
  1163 ;; =============== function _lcd_write ends ============
  1164                           
  1165                           
  1166 ;; *************** function _printf *****************
  1167 ;; Defined at:
  1168 ;;		line 461 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  f               1    wreg     PTR const unsigned char 
  1171 ;;		 -> STR_5(14), STR_4(10), STR_3(4), STR_2(4), 
  1172 ;;		 -> STR_1(4), 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  f               1    4[COMMON] PTR const unsigned char 
  1175 ;;		 -> STR_5(14), STR_4(10), STR_3(4), STR_2(4), 
  1176 ;;		 -> STR_1(4), 
  1177 ;;  _val            4    0        struct .
  1178 ;;  c               1    5[COMMON] char 
  1179 ;;  ap              1    3[COMMON] PTR void [1]
  1180 ;;		 -> ?_printf(2), 
  1181 ;;  flag            1    0        unsigned char 
  1182 ;;  prec            1    0        char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  2    1[COMMON] int 
  1185 ;; Registers used:
  1186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 11F/0
  1189 ;;		On exit  : 11F/0
  1190 ;;		Unchanged: FFE80/0
  1191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1192 ;;      Params:         2       0       0       0       0
  1193 ;;      Locals:         3       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0
  1195 ;;      Totals:         5       0       0       0       0
  1196 ;;Total ram usage:        5 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    1
  1199 ;; This function calls:
  1200 ;;		_putch
  1201 ;; This function is called by:
  1202 ;;		_main
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205  0684                     _printf:	
  1206                           
  1207                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1208                           ;printf@f stored from wreg
  1209  0684  00F4               	movwf	printf@f
  1210  0685  3071               	movlw	?_printf& (0+255)
  1211  0686  00F3               	movwf	printf@ap
  1212  0687                     l2519:	
  1213  0687  0874               	movf	printf@f,w
  1214  0688  0AF4               	incf	printf@f,f
  1215  0689  0084               	movwf	4
  1216  068A  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1217  068F  00F5               	movwf	printf@c
  1218  0690  08F5               	movf	printf@c,f
  1219  0691  1903               	btfsc	3,2
  1220  0692  0008               	return
  1221  0693  3A25               	xorlw	37
  1222  0694  1903               	skipnz
  1223  0695  2EA6               	goto	l2517
  1224  0696  0875               	movf	printf@c,w
  1225  0697  26B8  120A  118A   	fcall	_putch
  1226  069A  2E87               	goto	l2519
  1227  069B                     l2509:	
  1228  069B  0873               	movf	printf@ap,w
  1229  069C  0084               	movwf	4
  1230  069D  0800               	movf	0,w
  1231  069E  00F5               	movwf	printf@c
  1232  069F  0AF3               	incf	printf@ap,f
  1233  06A0  0AF3               	incf	printf@ap,f
  1234  06A1                     l2513:	
  1235  06A1  0875               	movf	printf@c,w
  1236  06A2  26B8  120A  118A   	fcall	_putch
  1237  06A5  2E87               	goto	l2519
  1238  06A6                     l2517:	
  1239  06A6  0874               	movf	printf@f,w
  1240  06A7  0AF4               	incf	printf@f,f
  1241  06A8  0084               	movwf	4
  1242  06A9  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1243  06AE  00F5               	movwf	printf@c
  1244                           
  1245                           ; Switch size 1, requested type "space"
  1246                           ; Number of cases is 2, Range of values is 0 to 99
  1247                           ; switch strategies available:
  1248                           ; Name         Instructions Cycles
  1249                           ; simple_byte            7     4 (average)
  1250                           ; jumptable            260     6 (fixed)
  1251                           ; rangetable           104     6 (fixed)
  1252                           ; spacedrange          206     9 (fixed)
  1253                           ; locatedrange         100     3 (fixed)
  1254                           ;	Chosen strategy is simple_byte
  1255  06AF  3A00               	xorlw	0	; case 0
  1256  06B0  1903               	skipnz
  1257  06B1  2EB7               	goto	l1124
  1258  06B2  3A63               	xorlw	99	; case 99
  1259  06B3  1903               	skipnz
  1260  06B4  2E9B               	goto	l2509
  1261  06B5  2EA1               	goto	l2513
  1262  06B6  2E87               	goto	l2519
  1263  06B7                     l1124:	
  1264  06B7  0008               	return
  1265  06B8                     __end_of_printf:	
  1266  06B8                     __ptext153:	
  1267 ;; =============== function _getch ends ============
  1268                           
  1269                           
  1270 ;; *************** function _putch *****************
  1271 ;; Defined at:
  1272 ;;		line 44 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  byte            1    wreg     unsigned char 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  byte            1    0[COMMON] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;		None               void
  1279 ;; Registers used:
  1280 ;;		wreg
  1281 ;; Tracked objects:
  1282 ;;		On entry : 11F/60
  1283 ;;		On exit  : 17F/0
  1284 ;;		Unchanged: FFE80/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1286 ;;      Params:         0       0       0       0       0
  1287 ;;      Locals:         1       0       0       0       0
  1288 ;;      Temps:          0       0       0       0       0
  1289 ;;      Totals:         1       0       0       0       0
  1290 ;;Total ram usage:        1 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; This function calls:
  1293 ;;		Nothing
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;;		_printf
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299  06B8                     _putch:	
  1300                           
  1301                           ; Regs used in _putch: [wreg]
  1302                           ;putch@byte stored from wreg
  1303  06B8  00F0               	movwf	putch@byte
  1304  06B9                     l1045:	
  1305                           ;USART2.c: 46: while(!TXIF)
  1306                           
  1307  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  1308  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  1309  06BB  1E0C               	btfss	12,4
  1310  06BC  2EB9               	goto	l1045
  1311                           
  1312                           ;USART2.c: 48: TXREG = byte;
  1313  06BD  0870               	movf	putch@byte,w
  1314  06BE  0099               	movwf	25	;volatile
  1315  06BF  0008               	return
  1316  06C0                     __end_of_putch:	
  1317                           
  1318                           	psect	text151
  1319  0675                     __ptext151:	
  1320 ;; =============== function _msecbase ends ============
  1321                           
  1322                           
  1323 ;; *************** function _init_comms *****************
  1324 ;; Defined at:
  1325 ;;		line 60 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;		None
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;		None
  1330 ;; Return value:  Size  Location     Type
  1331 ;;		None               void
  1332 ;; Registers used:
  1333 ;;		wreg, status,2
  1334 ;; Tracked objects:
  1335 ;;		On entry : 11F/0
  1336 ;;		On exit  : 17F/60
  1337 ;;		Unchanged: FFE80/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1339 ;;      Params:         0       0       0       0       0
  1340 ;;      Locals:         0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0
  1342 ;;      Totals:         0       0       0       0       0
  1343 ;;Total ram usage:        0 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351  0675                     _init_comms:	
  1352                           
  1353                           ;USART2.c: 61: TRISC7 = 1;
  1354                           
  1355                           ; Regs used in _init_comms: [wreg+status,2]
  1356  0675  1683               	bsf	3,5	;RP0=1, select bank1
  1357  0676  1303               	bcf	3,6	;RP1=0, select bank1
  1358  0677  3019               	movlw	25
  1359  0678  1787               	bsf	7,7
  1360                           
  1361                           ;USART2.c: 62: TRISC6 = 0;
  1362  0679  1307               	bcf	7,6
  1363                           
  1364                           ;USART2.c: 63: SPBRG = 0x19;
  1365  067A  0099               	movwf	25	;volatile
  1366                           
  1367                           ;USART2.c: 65: RCSTA = 0x90;
  1368  067B  3090               	movlw	144
  1369  067C  1283               	bcf	3,5	;RP0=0, select bank0
  1370  067D  0098               	movwf	24	;volatile
  1371                           
  1372                           ;USART2.c: 66: TXSTA = 0x26;
  1373  067E  3026               	movlw	38
  1374  067F  1683               	bsf	3,5	;RP0=1, select bank1
  1375  0680  0098               	movwf	24	;volatile
  1376                           
  1377                           ;USART2.c: 67: BAUDCTL = 0;
  1378  0681  1703               	bsf	3,6	;RP1=1, select bank3
  1379  0682  0187               	clrf	7	;volatile
  1380  0683  0008               	return
  1381  0684                     __end_of_init_comms:	
  1382                           
  1383                           	psect	text152
  1384  066F                     __ptext152:	
  1385 ;; =============== function _init_comms ends ============
  1386                           
  1387                           
  1388 ;; *************** function _getch *****************
  1389 ;; Defined at:
  1390 ;;		line 52 in file "C:\Users\Jorge\OneDrive\Escritorio\Microcontroladores\Proyectos\USART2\USART2.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;		None
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      unsigned char 
  1397 ;; Registers used:
  1398 ;;		wreg
  1399 ;; Tracked objects:
  1400 ;;		On entry : 11F/0
  1401 ;;		On exit  : 17F/0
  1402 ;;		Unchanged: FFE80/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         0       0       0       0       0
  1405 ;;      Locals:         0       0       0       0       0
  1406 ;;      Temps:          0       0       0       0       0
  1407 ;;      Totals:         0       0       0       0       0
  1408 ;;Total ram usage:        0 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416  066F                     _getch:	
  1417  066F                     l1051:	
  1418                           ;USART2.c: 54: while(!RCIF)
  1419                           
  1420                           ; Regs used in _getch: [wreg]
  1421                           
  1422  066F  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0670  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0671  1E8C               	btfss	12,5
  1425  0672  2E6F               	goto	l1051
  1426                           
  1427                           ;USART2.c: 56: return RCREG;
  1428  0673  081A               	movf	26,w	;volatile
  1429  0674  0008               	return
  1430  0675                     __end_of_getch:	
  1431                           
  1432                           	psect	text154
  1433  0000                     __ptext154:	
  1434 ;; =============== function _putch ends ============
  1435                           
  1436  007E                     btemp	set	126	;btemp
  1437  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Thu Apr 28 14:22:52 2022

                   pc 0002                    u45 071F                    fsr 0004                   _RC0 0038  
                 _RC3 003B                   _RC4 003C                   fsr0 0004                   indf 0000  
         lcd_goto@pos 0075                  l1102 0744                  l1105 0000                  l1051 066F  
                l1124 06B7                  l1045 06B9                  l1054 0000                  l1048 0000  
                l1057 0000                  l1090 0000                  l1075 0000                  l1084 0000  
                l1093 0000                  l1078 0000                  l1087 0000                  l1099 0000  
                l2501 0719                  l2511 0000                  l2503 0000                  l2513 06A1  
                l2521 0000                  l2601 0000                  l2531 0000                  l2523 0000  
                l2603 0000                  l2509 069B                  l2517 06A6                  l2533 0000  
                l2525 0000                  l2541 0000                  l2605 0000                  l2519 0687  
                l2527 0000                  l2535 0000                  l2543 0000                  l2551 0000  
                l2631 0000                  l2623 0000                  l2615 0784                  l2607 0000  
                l2481 0000                  l2529 0000                  l2537 0000                  l2553 0000  
                l2561 0000                  l2633 0000                  l2617 0000                  l2609 0000  
                l2491 0000                  l2539 0000                  l2547 0000                  l2571 0000  
                l2563 0000                  l2555 0000                  l2651 0000                  l2643 07C2  
                l2619 0000                  l2477 0000                  l2493 0000                  l2549 06CB  
                l2581 0000                  l2573 0000                  l2565 0000                  l2557 0000  
                l2661 0000                  l2653 0000                  l2645 0000                  l2637 0000  
                l2629 07A6                  l2487 0000                  l2495 0717                  l2591 0000  
                l2583 0000                  l2575 0000                  l2567 0000                  l2559 0000  
                l2655 0000                  l2647 0000                  l2489 0000                  l2593 0000  
                l2585 0000                  l2577 0000                  l2569 0000                  l2657 0000  
                l2649 07CD                  l2499 0000                  l2587 0000                  l2579 0000  
                l2659 0000                  l2595 0000                  l2589 0000                  l2597 0000  
                l2599 0000                  STR_1 0028                  STR_2 0028                  STR_3 0028  
                STR_4 0017                  STR_5 0009                  STR_6 0021                  _T0IF 005A  
                _RCIF 0065                  _TMR0 0001                  _TXIF 0064                  _main 075C  
                btemp 007E                  start 0000                 ?_main 0070                 _ANSEL 0188  
               _RCREG 001A                 _RCSTA 0018                 _SPBRG 0099                 _PORTA 0005  
               _PORTD 0008                 _TRISA 0085                 _TRISB 0086                 _TRISC 0087  
               _TRISD 0088                 _TRISE 0089                 _TXREG 0019                 _TXSTA 0098  
               _getch 066F                 _pause 0717                 _putch 06B8                 pclath 000A  
               status 0003                 wtemp0 007E          __end_of_main 0800                ??_main 0076  
              ?_getch 0070                _ADCON1 009F                ?_pause 0070                ?_putch 0070  
              _ANSELH 0189                _TRISC6 043E                _TRISC7 043F      __end_of_lcd_init 0717  
    __end_of_lcd_goto 06C9      __end_of_lcd_puts 06E1                _printf 0684      __end_of_msecbase 0748  
              pause@x 0072        __pcstackCOMMON 0070         __end_of_getch 0675         __end_of_pause 0728  
       __end_of_putch 06C0    __size_of_lcd_clear 0009    __size_of_lcd_putch 0003               ??_getch 0070  
  __size_of_lcd_write 0013               ??_pause 0072               ??_putch 0070            __pmaintext 075C  
             _BAUDCTL 0187               ?_printf 0071             ?_lcd_init 0070             ?_lcd_goto 0070  
           ?_lcd_puts 0070             ?_msecbase 0070     __end_of_lcd_clear 0751     __end_of_lcd_putch 06C3  
   __end_of_lcd_write 073B            _init_comms 0675       __size_of_printf 0034            ??_lcd_init 0075  
          ??_lcd_goto 0075            ??_lcd_puts 0075  end_of_initialization 066B            ??_msecbase 0070  
             printf@c 0075               printf@f 0074            lcd_putch@c 0075            lcd_write@c 0074  
         ?_init_comms 0070        __end_of_printf 06B8   start_initialization 066B              ??_printf 0073  
        pause@usvalue 0070   __size_of_init_comms 000F     __size_of_lcd_init 0036     __size_of_lcd_goto 0006  
   __size_of_lcd_puts 0018     __size_of_msecbase 000D             __ptext141 0000             __ptext150 073B  
           __ptext142 06E1             __ptext151 0675             __ptext143 06C0             __ptext152 066F  
           __ptext144 06C9             __ptext153 06B8             __ptext145 06C3             __ptext154 0000  
           __ptext146 0748             __ptext147 0728             __ptext148 0684             __ptext149 0717  
           _lcd_clear 0748             __pstrings 0003             _lcd_putch 06C0             _lcd_write 0728  
      __size_of_getch 0006        __size_of_pause 0011        __size_of_putch 0008            ?_lcd_clear 0070  
          ?_lcd_putch 0070           __stringbase 0008            ?_lcd_write 0070             main@count 0077  
           main@input 0076             lcd_puts@s 0075          ??_init_comms 0070              _lcd_init 06E1  
            _lcd_goto 06C3              _lcd_puts 06C9         __size_of_main 00A4    __end_of_init_comms 0684  
            _msecbase 073B           ??_lcd_clear 0075           ??_lcd_putch 0075           ??_lcd_write 0074  
           putch@byte 0070             stringcode 0003              printf@ap 0073            _OPTION_REG 0081  
            stringdir 0003              stringtab 0003  
